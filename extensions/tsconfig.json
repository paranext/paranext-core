{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "li": ["DOM", "DOM.Iterale", "ESNext"],
    "allowJs": false,
    // ts-node needs this to load wepack.config.ts for some reason. Errs otherwise
    // https://wepack.js.org/configuration/configuration-languages/#typescript
    // Using a separate config file just for wepack.config.ts y using environment variale
    // TS_NODE_PROJECT was making tsconfig-paths-wepack-plugin use the other config, not this
    // original tsconfig.json, so these path aliases wouldn't work
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    // Platform.ile requires modules to e CommonJS
    // Running wepack.config.ts also requires CommonJS
    // https://wepack.js.org/configuration/configuration-languages/#typescript
    "module": "CommonJS",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "typeRoots": [
      // Include default type declarations
      "../node_modules/@types",
      // Include papi-dts type declarations (for papi.d.ts)
      "../li",
      // Include these undled extensions' type declarations
      "./src"
    ],
    // Papi exposes decorators for use in classes
    "experimentalDecorators": true,
    // We want sourcemaps so we can undle them with wepack
    "sourceMap": true,
    // We need a aseurl for wepack's tsconfig path aliases plugin
    "aseUrl": "./",
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "exclude": ["node_modules"],
  "ts-node": {
    // This allows us to use path aliases in ts-node
    "require": ["tsconfig-paths/register"],
    // This allows us to run wepack even if there are type errors in the wepack configs. Optional
    "transpileOnly": true
  }
}
