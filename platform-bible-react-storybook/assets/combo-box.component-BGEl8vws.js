import{j as e}from"./jsx-runtime-Dp1lb1Uf.js";import{r as v}from"./iframe-bGuH-Abg.js";import{c as s}from"./shadcn-ui.util-DMJ19wEV.js";import{B as T}from"./button-C2duuinP.js";import{P as C,a as q,b as j}from"./popover-OKJ4Fsc_.js";import{C as N,a as V,b as P,c as B,d as D}from"./command-DJHy4uBY.js";import{C as S}from"./chevrons-up-down-BwvlL0ZA.js";import{C as E}from"./check-BP1taHaR.js";function k(t){return typeof t=="string"?t:typeof t=="number"?t.toString():t.label}function I({id:t,options:d=[],className:u,buttonClassName:p,popoverContentClassName:m,value:o,onChange:c=()=>{},getOptionLabel:n=k,icon:i=void 0,buttonPlaceholder:f="",textPlaceholder:h="",commandEmptyMessage:w="No option found",buttonVariant:y="outline",alignDropDown:x="start",isDisabled:g=!1,...b}){const[r,l]=v.useState(!1);return e.jsxs(C,{open:r,onOpenChange:l,...b,children:[e.jsx(q,{asChild:!0,children:e.jsxs(T,{variant:y,role:"combobox","aria-expanded":r,id:t,className:s("tw-flex tw-w-[200px] tw-items-center tw-justify-between tw-overflow-hidden",p??u),disabled:g,children:[e.jsxs("div",{className:"tw-flex tw-flex-1 tw-items-center tw-overflow-hidden",children:[i&&e.jsx("div",{className:"tw-pe-2",children:i}),e.jsx("span",{className:s("tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap"),children:o?n(o):f})]}),e.jsx(S,{className:"tw-ms-2 tw-h-4 tw-w-4 tw-shrink-0 tw-opacity-50"})]})}),e.jsx(j,{align:x,className:s("tw-w-[200px] tw-p-0",m),children:e.jsxs(N,{children:[e.jsx(V,{placeholder:h,className:"tw-text-inherit"}),e.jsx(P,{children:w}),e.jsx(B,{children:d.map(a=>e.jsxs(D,{value:n(a),onSelect:()=>{c(a),l(!1)},children:[e.jsx(E,{className:s("tw-me-2 tw-h-4 tw-w-4",{"tw-opacity-0":!o||n(o)!==n(a)})}),n(a)]},n(a)))})]})})]})}I.__docgenInfo={description:`Autocomplete input and command palette with a list of suggestions.

Thanks to Shadcn for heavy inspiration and documentation
https://ui.shadcn.com/docs/components/combobox`,methods:[],displayName:"ComboBox",props:{id:{required:!1,tsType:{name:"string"},description:"Optional unique identifier"},options:{required:!1,tsType:{name:"unknown"},description:"List of available options for the dropdown menu",defaultValue:{value:"[]",computed:!1}},className:{required:!1,tsType:{name:"string"},description:"@deprecated 3 December 2024. Renamed to `buttonClassName`"},buttonClassName:{required:!1,tsType:{name:"string"},description:"Additional css classes to help with unique styling of the combo box button"},popoverContentClassName:{required:!1,tsType:{name:"string"},description:"Additional css classes to help with unique styling of the combo box popover"},value:{required:!1,tsType:{name:"T"},description:`The selected value that the combo box currently holds. Must be shallow equal to one of the
options entries.`},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(newValue: T) => void",signature:{arguments:[{type:{name:"T"},name:"newValue"}],return:{name:"void"}}},description:"Triggers when content of textfield is changed",defaultValue:{value:"() => {}",computed:!1}},getOptionLabel:{required:!1,tsType:{name:"signature",type:"function",raw:"(option: T) => string",signature:{arguments:[{type:{name:"T"},name:"option"}],return:{name:"string"}}},description:"Used to determine the string value for a given option.",defaultValue:{value:`function getOptionLabelDefault(option: ComboBoxOption): string {
  if (typeof option === 'string') {
    return option;
  }
  if (typeof option === 'number') {
    return option.toString();
  }
  return option.label;
}`,computed:!1}},icon:{required:!1,tsType:{name:"ReactNode"},description:"Icon to be displayed on the trigger",defaultValue:{value:"undefined",computed:!0}},buttonPlaceholder:{required:!1,tsType:{name:"string"},description:"Text displayed on button if `value` is undefined",defaultValue:{value:"''",computed:!1}},textPlaceholder:{required:!1,tsType:{name:"string"},description:"Placeholder text for text field",defaultValue:{value:"''",computed:!1}},commandEmptyMessage:{required:!1,tsType:{name:"string"},description:"Text to display when no options match input",defaultValue:{value:"'No option found'",computed:!1}},buttonVariant:{required:!1,tsType:{name:"ButtonProps['variant']",raw:"ButtonProps['variant']"},description:"Variant of button",defaultValue:{value:"'outline'",computed:!1}},alignDropDown:{required:!1,tsType:{name:"union",raw:"'start' | 'center' | 'end'",elements:[{name:"literal",value:"'start'"},{name:"literal",value:"'center'"},{name:"literal",value:"'end'"}]},description:"Control how the popover menu should be aligned. Defaults to start",defaultValue:{value:"'start'",computed:!1}},isDisabled:{required:!1,tsType:{name:"boolean"},description:"Optional boolean to set if trigger should be disabled",defaultValue:{value:"false",computed:!1}}}};export{I as C};
