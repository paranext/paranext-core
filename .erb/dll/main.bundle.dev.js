(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(global, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ansi-styles/index.js":
/*!*******************************************!*\
  !*** ./node_modules/ansi-styles/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* module decorator */ module = __webpack_require__.nmd(module);


const wrapAnsi16 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${code + offset}m`;
};

const wrapAnsi256 = (fn, offset) => (...args) => {
	const code = fn(...args);
	return `\u001B[${38 + offset};5;${code}m`;
};

const wrapAnsi16m = (fn, offset) => (...args) => {
	const rgb = fn(...args);
	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
};

const ansi2ansi = n => n;
const rgb2rgb = (r, g, b) => [r, g, b];

const setLazyProperty = (object, property, get) => {
	Object.defineProperty(object, property, {
		get: () => {
			const value = get();

			Object.defineProperty(object, property, {
				value,
				enumerable: true,
				configurable: true
			});

			return value;
		},
		enumerable: true,
		configurable: true
	});
};

/** @type {typeof import('color-convert')} */
let colorConvert;
const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
	if (colorConvert === undefined) {
		colorConvert = __webpack_require__(/*! color-convert */ "./node_modules/color-convert/index.js");
	}

	const offset = isBackground ? 10 : 0;
	const styles = {};

	for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
		const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
		if (sourceSpace === targetSpace) {
			styles[name] = wrap(identity, offset);
		} else if (typeof suite === 'object') {
			styles[name] = wrap(suite[targetSpace], offset);
		}
	}

	return styles;
};

function assembleStyles() {
	const codes = new Map();
	const styles = {
		modifier: {
			reset: [0, 0],
			// 21 isn't widely supported and 22 does the same thing
			bold: [1, 22],
			dim: [2, 22],
			italic: [3, 23],
			underline: [4, 24],
			inverse: [7, 27],
			hidden: [8, 28],
			strikethrough: [9, 29]
		},
		color: {
			black: [30, 39],
			red: [31, 39],
			green: [32, 39],
			yellow: [33, 39],
			blue: [34, 39],
			magenta: [35, 39],
			cyan: [36, 39],
			white: [37, 39],

			// Bright color
			blackBright: [90, 39],
			redBright: [91, 39],
			greenBright: [92, 39],
			yellowBright: [93, 39],
			blueBright: [94, 39],
			magentaBright: [95, 39],
			cyanBright: [96, 39],
			whiteBright: [97, 39]
		},
		bgColor: {
			bgBlack: [40, 49],
			bgRed: [41, 49],
			bgGreen: [42, 49],
			bgYellow: [43, 49],
			bgBlue: [44, 49],
			bgMagenta: [45, 49],
			bgCyan: [46, 49],
			bgWhite: [47, 49],

			// Bright color
			bgBlackBright: [100, 49],
			bgRedBright: [101, 49],
			bgGreenBright: [102, 49],
			bgYellowBright: [103, 49],
			bgBlueBright: [104, 49],
			bgMagentaBright: [105, 49],
			bgCyanBright: [106, 49],
			bgWhiteBright: [107, 49]
		}
	};

	// Alias bright black as gray (and grey)
	styles.color.gray = styles.color.blackBright;
	styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
	styles.color.grey = styles.color.blackBright;
	styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

	for (const [groupName, group] of Object.entries(styles)) {
		for (const [styleName, style] of Object.entries(group)) {
			styles[styleName] = {
				open: `\u001B[${style[0]}m`,
				close: `\u001B[${style[1]}m`
			};

			group[styleName] = styles[styleName];

			codes.set(style[0], style[1]);
		}

		Object.defineProperty(styles, groupName, {
			value: group,
			enumerable: false
		});
	}

	Object.defineProperty(styles, 'codes', {
		value: codes,
		enumerable: false
	});

	styles.color.close = '\u001B[39m';
	styles.bgColor.close = '\u001B[49m';

	setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
	setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
	setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
	setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

	return styles;
}

// Make the export immutable
Object.defineProperty(module, 'exports', {
	enumerable: true,
	get: assembleStyles
});


/***/ }),

/***/ "./node_modules/chalk/source/index.js":
/*!********************************************!*\
  !*** ./node_modules/chalk/source/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const ansiStyles = __webpack_require__(/*! ansi-styles */ "./node_modules/ansi-styles/index.js");
const {stdout: stdoutColor, stderr: stderrColor} = __webpack_require__(/*! supports-color */ "./node_modules/supports-color/index.js");
const {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
} = __webpack_require__(/*! ./util */ "./node_modules/chalk/source/util.js");

const {isArray} = Array;

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m'
];

const styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class ChalkClass {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = {};
	applyOptions(chalk, options);

	chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);

	Object.setPrototypeOf(chalk, Chalk.prototype);
	Object.setPrototypeOf(chalk.template, chalk);

	chalk.template.constructor = () => {
		throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
	};

	chalk.template.Instance = ChalkClass;

	return chalk.template;
};

function Chalk(options) {
	return chalkFactory(options);
}

for (const [styleName, style] of Object.entries(ansiStyles)) {
	styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		}
	};
}

styles.visible = {
	get() {
		const builder = createBuilder(this, this._styler, true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	}
};

const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

for (const model of usedModels) {
	styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

for (const model of usedModels) {
	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

const proto = Object.defineProperties(() => {}, {
	...styles,
	level: {
		enumerable: true,
		get() {
			return this._generator.level;
		},
		set(level) {
			this._generator.level = level;
		}
	}
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	const builder = (...arguments_) => {
		if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
			// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
			return applyStyle(builder, chalkTag(builder, ...arguments_));
		}

		// Single argument is hot path, implicit coercion is faster than anything
		// eslint-disable-next-line no-implicit-coercion
		return applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
	};

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder._generator = self;
	builder._styler = _styler;
	builder._isEmpty = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self._isEmpty ? '' : string;
	}

	let styler = self._styler;

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.indexOf('\u001B') !== -1) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

let template;
const chalkTag = (chalk, ...strings) => {
	const [firstString] = strings;

	if (!isArray(firstString) || !isArray(firstString.raw)) {
		// If chalk() was called by itself or with a string,
		// return the string itself as a string.
		return strings.join(' ');
	}

	const arguments_ = strings.slice(1);
	const parts = [firstString.raw[0]];

	for (let i = 1; i < firstString.length; i++) {
		parts.push(
			String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
			String(firstString.raw[i])
		);
	}

	if (template === undefined) {
		template = __webpack_require__(/*! ./templates */ "./node_modules/chalk/source/templates.js");
	}

	return template(chalk, parts.join(''));
};

Object.defineProperties(Chalk.prototype, styles);

const chalk = Chalk(); // eslint-disable-line new-cap
chalk.supportsColor = stdoutColor;
chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap
chalk.stderr.supportsColor = stderrColor;

module.exports = chalk;


/***/ }),

/***/ "./node_modules/chalk/source/templates.js":
/*!************************************************!*\
  !*** ./node_modules/chalk/source/templates.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";

const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

const ESCAPES = new Map([
	['n', '\n'],
	['r', '\r'],
	['t', '\t'],
	['b', '\b'],
	['f', '\f'],
	['v', '\v'],
	['0', '\0'],
	['\\', '\\'],
	['e', '\u001B'],
	['a', '\u0007']
]);

function unescape(c) {
	const u = c[0] === 'u';
	const bracket = c[1] === '{';

	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
		return String.fromCharCode(parseInt(c.slice(1), 16));
	}

	if (u && bracket) {
		return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
	}

	return ESCAPES.get(c) || c;
}

function parseArguments(name, arguments_) {
	const results = [];
	const chunks = arguments_.trim().split(/\s*,\s*/g);
	let matches;

	for (const chunk of chunks) {
		const number = Number(chunk);
		if (!Number.isNaN(number)) {
			results.push(number);
		} else if ((matches = chunk.match(STRING_REGEX))) {
			results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
		} else {
			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
		}
	}

	return results;
}

function parseStyle(style) {
	STYLE_REGEX.lastIndex = 0;

	const results = [];
	let matches;

	while ((matches = STYLE_REGEX.exec(style)) !== null) {
		const name = matches[1];

		if (matches[2]) {
			const args = parseArguments(name, matches[2]);
			results.push([name].concat(args));
		} else {
			results.push([name]);
		}
	}

	return results;
}

function buildStyle(chalk, styles) {
	const enabled = {};

	for (const layer of styles) {
		for (const style of layer.styles) {
			enabled[style[0]] = layer.inverse ? null : style.slice(1);
		}
	}

	let current = chalk;
	for (const [styleName, styles] of Object.entries(enabled)) {
		if (!Array.isArray(styles)) {
			continue;
		}

		if (!(styleName in current)) {
			throw new Error(`Unknown Chalk style: ${styleName}`);
		}

		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
	}

	return current;
}

module.exports = (chalk, temporary) => {
	const styles = [];
	const chunks = [];
	let chunk = [];

	// eslint-disable-next-line max-params
	temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
		if (escapeCharacter) {
			chunk.push(unescape(escapeCharacter));
		} else if (style) {
			const string = chunk.join('');
			chunk = [];
			chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
			styles.push({inverse, styles: parseStyle(style)});
		} else if (close) {
			if (styles.length === 0) {
				throw new Error('Found extraneous } in Chalk template literal');
			}

			chunks.push(buildStyle(chalk, styles)(chunk.join('')));
			chunk = [];
			styles.pop();
		} else {
			chunk.push(character);
		}
	});

	chunks.push(chunk.join(''));

	if (styles.length > 0) {
		const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
		throw new Error(errMessage);
	}

	return chunks.join('');
};


/***/ }),

/***/ "./node_modules/chalk/source/util.js":
/*!*******************************************!*\
  !*** ./node_modules/chalk/source/util.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


const stringReplaceAll = (string, substring, replacer) => {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

module.exports = {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
};


/***/ }),

/***/ "./node_modules/color-convert/conversions.js":
/*!***************************************************!*\
  !*** ./node_modules/color-convert/conversions.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = __webpack_require__(/*! color-name */ "./node_modules/color-name/index.js");

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ "./node_modules/color-convert/index.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(/*! ./conversions */ "./node_modules/color-convert/conversions.js");
const route = __webpack_require__(/*! ./route */ "./node_modules/color-convert/route.js");

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ "./node_modules/color-convert/route.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/route.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const conversions = __webpack_require__(/*! ./conversions */ "./node_modules/color-convert/conversions.js");

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ "./node_modules/color-name/index.js":
/*!******************************************!*\
  !*** ./node_modules/color-name/index.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "./node_modules/electron-log/src/core/Logger.js":
/*!******************************************************!*\
  !*** ./node_modules/electron-log/src/core/Logger.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const scopeFactory = __webpack_require__(/*! ./scope */ "./node_modules/electron-log/src/core/scope.js");

/**
 * @property {Function} error
 * @property {Function} warn
 * @property {Function} info
 * @property {Function} verbose
 * @property {Function} debug
 * @property {Function} silly
 */
class Logger {
  static instances = {};

  errorHandler = null;
  eventLogger = null;
  functions = {};
  hooks = [];
  isDev = false;
  levels = null;
  logId = null;
  scope = null;
  transports = {};
  variables = {};

  constructor({
    allowUnknownLevel = false,
    errorHandler,
    eventLogger,
    initializeFn,
    isDev = false,
    levels = ['error', 'warn', 'info', 'verbose', 'debug', 'silly'],
    logId,
    transportFactories = {},
    variables,
  } = {}) {
    this.addLevel = this.addLevel.bind(this);
    this.create = this.create.bind(this);
    this.logData = this.logData.bind(this);
    this.processMessage = this.processMessage.bind(this);

    this.allowUnknownLevel = allowUnknownLevel;
    this.initializeFn = initializeFn;
    this.isDev = isDev;
    this.levels = levels;
    this.logId = logId;
    this.transportFactories = transportFactories;
    this.variables = variables || {};
    this.scope = scopeFactory(this);

    this.addLevel('log', false);
    for (const name of this.levels) {
      this.addLevel(name, false);
    }

    this.errorHandler = errorHandler;
    errorHandler?.setOptions({ logFn: this.error });

    this.eventLogger = eventLogger;
    eventLogger?.setOptions({ logger: this });

    for (const [name, factory] of Object.entries(transportFactories)) {
      this.transports[name] = factory(this);
    }

    Logger.instances[logId] = this;
  }

  static getInstance({ logId }) {
    return this.instances[logId] || this.instances.default;
  }

  addLevel(level, index = this.levels.length) {
    if (index !== false) {
      this.levels.splice(index, 0, level);
    }

    this[level] = (...args) => this.logData(args, { level });
    this.functions[level] = this[level];
  }

  catchErrors(options) {
    this.processMessage(
      {
        data: ['log.catchErrors is deprecated. Use log.errorHandler instead'],
        level: 'warn',
      },
      { transports: ['console'] },
    );
    return this.errorHandler.startCatching(options);
  }

  create(options) {
    if (typeof options === 'string') {
      options = { logId: options };
    }

    return new Logger({
      ...options,
      errorHandler: this.errorHandler,
      initializeFn: this.initializeFn,
      isDev: this.isDev,
      transportFactories: this.transportFactories,
      variables: { ...this.variables },
    });
  }

  compareLevels(passLevel, checkLevel, levels = this.levels) {
    const pass = levels.indexOf(passLevel);
    const check = levels.indexOf(checkLevel);
    if (check === -1 || pass === -1) {
      return true;
    }

    return check <= pass;
  }

  initialize(options = {}) {
    this.initializeFn({ logger: this, ...options });
  }

  logData(data, options = {}) {
    this.processMessage({ data, ...options });
  }

  processMessage(message, { transports = this.transports } = {}) {
    if (message.cmd === 'errorHandler') {
      this.errorHandler.handle(message.error, {
        errorName: message.errorName,
        processType: 'renderer',
        showDialog: Boolean(message.showDialog),
      });
      return;
    }

    let level = message.level;
    if (!this.allowUnknownLevel) {
      level = this.levels.includes(message.level) ? message.level : 'info';
    }

    const normalizedMessage = {
      date: new Date(),
      ...message,
      level,
      variables: {
        ...this.variables,
        ...message.variables,
      },
    };

    for (const [transName, transFn] of this.transportEntries(transports)) {
      if (typeof transFn !== 'function' || transFn.level === false) {
        continue;
      }

      if (!this.compareLevels(transFn.level, message.level)) {
        continue;
      }

      try {
        // eslint-disable-next-line arrow-body-style
        const transformedMsg = this.hooks.reduce((msg, hook) => {
          return msg ? hook(msg, transFn, transName) : msg;
        }, normalizedMessage);

        if (transformedMsg) {
          transFn({ ...transformedMsg, data: [...transformedMsg.data] });
        }
      } catch (e) {
        this.processInternalErrorFn(e);
      }
    }
  }

  processInternalErrorFn(_e) {
    // Do nothing by default
  }

  transportEntries(transports = this.transports) {
    const transportArray = Array.isArray(transports)
      ? transports
      : Object.entries(transports);

    return transportArray
      .map((item) => {
        switch (typeof item) {
          case 'string':
            return this.transports[item] ? [item, this.transports[item]] : null;
          case 'function':
            return [item.name, item];
          default:
            return Array.isArray(item) ? item : null;
        }
      })
      .filter(Boolean);
  }
}

module.exports = Logger;


/***/ }),

/***/ "./node_modules/electron-log/src/core/scope.js":
/*!*****************************************************!*\
  !*** ./node_modules/electron-log/src/core/scope.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


module.exports = scopeFactory;

function scopeFactory(logger) {
  return Object.defineProperties(scope, {
    defaultLabel: { value: '', writable: true },
    labelPadding: { value: true, writable: true },
    maxLabelLength: { value: 0, writable: true },
    labelLength: {
      get() {
        switch (typeof scope.labelPadding) {
          case 'boolean': return scope.labelPadding ? scope.maxLabelLength : 0;
          case 'number': return scope.labelPadding;
          default: return 0;
        }
      },
    },
  });

  function scope(label) {
    scope.maxLabelLength = Math.max(scope.maxLabelLength, label.length);

    const newScope = {};
    for (const level of [...logger.levels, 'log']) {
      newScope[level] = (...d) => logger.logData(d, { level, scope: label });
    }
    return newScope;
  }
}


/***/ }),

/***/ "./node_modules/electron-log/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/electron-log/src/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable global-require */

const isRenderer = typeof process === 'undefined'
  || ( false || "browser" === 'worker');

if (isRenderer) {
  // Makes sense when contextIsolation/sandbox disabled
  __webpack_require__(/*! ./renderer/electron-log-preload */ "./node_modules/electron-log/src/renderer/electron-log-preload.js");
  module.exports = __webpack_require__(/*! ./renderer */ "./node_modules/electron-log/src/renderer/index.js");
} else {
  module.exports = __webpack_require__(/*! ./main */ "./node_modules/electron-log/src/main/index.js");
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/ErrorHandler.js":
/*!************************************************************!*\
  !*** ./node_modules/electron-log/src/main/ErrorHandler.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const electronApi = __webpack_require__(/*! ./electronApi */ "./node_modules/electron-log/src/main/electronApi.js");

class ErrorHandler {
  isActive = false;
  logFn = null;
  onError = null;
  showDialog = true;

  constructor({ logFn = null, onError = null, showDialog = true } = {}) {
    this.createIssue = this.createIssue.bind(this);
    this.handleError = this.handleError.bind(this);
    this.handleRejection = this.handleRejection.bind(this);
    this.setOptions({ logFn, onError, showDialog });
    this.startCatching = this.startCatching.bind(this);
    this.stopCatching = this.stopCatching.bind(this);
  }

  handle(error, {
    logFn = this.logFn,
    onError = this.onError,
    processType = 'browser',
    showDialog = this.showDialog,
    errorName = '',
  } = {}) {
    error = normalizeError(error);

    try {
      if (typeof onError === 'function') {
        const versions = electronApi.getVersions();
        const createIssue = this.createIssue;
        const result = onError({
          createIssue,
          error,
          errorName,
          processType,
          versions,
        });
        if (result === false) {
          return;
        }
      }

      errorName ? logFn(errorName, error) : logFn(error);

      if (showDialog && !errorName.includes('rejection')) {
        electronApi.showErrorBox(
          `A JavaScript error occurred in the ${processType} process`,
          error.stack,
        );
      }
    } catch {
      console.error(error); // eslint-disable-line no-console
    }
  }

  setOptions({ logFn, onError, showDialog }) {
    if (typeof logFn === 'function') {
      this.logFn = logFn;
    }

    if (typeof onError === 'function') {
      this.onError = onError;
    }

    if (typeof showDialog === 'boolean') {
      this.showDialog = showDialog;
    }
  }

  startCatching({ onError, showDialog } = {}) {
    if (this.isActive) {
      return;
    }

    this.isActive = true;
    this.setOptions({ onError, showDialog });
    process.on('uncaughtException', this.handleError);
    process.on('unhandledRejection', this.handleRejection);
  }

  stopCatching() {
    this.isActive = false;
    process.removeListener('uncaughtException', this.handleError);
    process.removeListener('unhandledRejection', this.handleRejection);
  }

  createIssue(pageUrl, queryParams) {
    electronApi.openUrl(
      `${pageUrl}?${new URLSearchParams(queryParams).toString()}`,
    );
  }

  handleError(error) {
    this.handle(error, { errorName: 'Unhandled' });
  }

  handleRejection(reason) {
    const error = reason instanceof Error
      ? reason
      : new Error(JSON.stringify(reason));
    this.handle(error, { errorName: 'Unhandled rejection' });
  }
}

function normalizeError(e) {
  if (e instanceof Error) {
    return e;
  }

  if (e && typeof e === 'object') {
    if (e.message) {
      return Object.assign(new Error(e.message), e);
    }
    try {
      return new Error(JSON.stringify(e));
    } catch (serErr) {
      return new Error(`Couldn't normalize error ${String(e)}: ${serErr}`);
    }
  }

  return new Error(`Can't normalize error ${String(e)}`);
}

module.exports = ErrorHandler;


/***/ }),

/***/ "./node_modules/electron-log/src/main/EventLogger.js":
/*!***********************************************************!*\
  !*** ./node_modules/electron-log/src/main/EventLogger.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const electronApi = __webpack_require__(/*! ./electronApi */ "./node_modules/electron-log/src/main/electronApi.js");

class EventLogger {
  disposers = [];
  format = '{eventSource}#{eventName}:';
  formatters = {
    app: {
      'certificate-error': ({ args }) => {
        return this.arrayToObject(args.slice(1, 4), [
          'url',
          'error',
          'certificate',
        ]);
      },
      'child-process-gone': ({ args }) => {
        return args.length === 1 ? args[0] : args;
      },
      'render-process-gone': ({ args: [webContents, details] }) => {
        return details && typeof details === 'object'
          ? { ...details, ...this.getWebContentsDetails(webContents) }
          : [];
      },
    },

    webContents: {
      'console-message': ({ args: [level, message, line, sourceId] }) => {
        // 0: debug, 1: info, 2: warning, 3: error
        if (level < 3) {
          return undefined;
        }

        return { message, source: `${sourceId}:${line}` };
      },
      'did-fail-load': ({ args }) => {
        return this.arrayToObject(args, [
          'errorCode',
          'errorDescription',
          'validatedURL',
          'isMainFrame',
          'frameProcessId',
          'frameRoutingId',
        ]);
      },
      'did-fail-provisional-load': ({ args }) => {
        return this.arrayToObject(args, [
          'errorCode',
          'errorDescription',
          'validatedURL',
          'isMainFrame',
          'frameProcessId',
          'frameRoutingId',
        ]);
      },
      'plugin-crashed': ({ args }) => {
        return this.arrayToObject(args, ['name', 'version']);
      },
      'preload-error': ({ args }) => {
        return this.arrayToObject(args, ['preloadPath', 'error']);
      },
    },
  };

  events = {
    app: {
      'certificate-error': true,
      'child-process-gone': true,
      'render-process-gone': true,
    },

    webContents: {
      // 'console-message': true,
      'did-fail-load': true,
      'did-fail-provisional-load': true,
      'plugin-crashed': true,
      'preload-error': true,
      'unresponsive': true,
    },
  };

  level = 'error';
  scope = '';

  constructor(options = {}) {
    this.setOptions(options);
  }

  setOptions({ events, level, logger, format, formatters, scope }) {
    if (typeof events === 'object') {
      this.events = events;
    }

    if (typeof level === 'string') {
      this.level = level;
    }

    if (typeof logger === 'object') {
      this.logger = logger;
    }

    if (typeof format === 'string' || typeof format === 'function') {
      this.format = format;
    }

    if (typeof formatters === 'object') {
      this.formatters = formatters;
    }

    if (typeof scope === 'string') {
      this.scope = scope;
    }
  }

  startLogging(options = {}) {
    this.setOptions(options);

    this.disposeListeners();

    for (const eventName of this.getEventNames(this.events.app)) {
      this.disposers.push(
        electronApi.onAppEvent(eventName, (...handlerArgs) => {
          this.handleEvent({ eventSource: 'app', eventName, handlerArgs });
        }),
      );
    }

    for (const eventName of this.getEventNames(this.events.webContents)) {
      this.disposers.push(
        electronApi.onEveryWebContentsEvent(eventName, (...handlerArgs) => {
          this.handleEvent(
            { eventSource: 'webContents', eventName, handlerArgs },
          );
        }),
      );
    }
  }

  stopLogging() {
    this.disposeListeners();
  }

  arrayToObject(array, fieldNames) {
    const obj = {};

    fieldNames.forEach((fieldName, index) => {
      obj[fieldName] = array[index];
    });

    if (array.length > fieldNames.length) {
      obj.unknownArgs = array.slice(fieldNames.length);
    }

    return obj;
  }

  disposeListeners() {
    this.disposers.forEach((disposer) => disposer());
    this.disposers = [];
  }

  formatEventLog({ eventName, eventSource, handlerArgs }) {
    const [event, ...args] = handlerArgs;
    if (typeof this.format === 'function') {
      return this.format({ args, event, eventName, eventSource });
    }

    const formatter = this.formatters[eventSource]?.[eventName];
    let formattedArgs = args;
    if (typeof formatter === 'function') {
      formattedArgs = formatter({ args, event, eventName, eventSource });
    }

    if (!formattedArgs) {
      return undefined;
    }

    const eventData = {};

    if (Array.isArray(formattedArgs)) {
      eventData.args = formattedArgs;
    } else if (typeof formattedArgs === 'object') {
      Object.assign(eventData, formattedArgs);
    }

    if (eventSource === 'webContents') {
      Object.assign(eventData, this.getWebContentsDetails(event?.sender));
    }

    const title = this.format
      .replace('{eventSource}', eventSource === 'app' ? 'App' : 'WebContents')
      .replace('{eventName}', eventName);

    return [title, eventData];
  }

  getEventNames(eventMap) {
    if (!eventMap || typeof eventMap !== 'object') {
      return [];
    }

    return Object.entries(eventMap)
      .filter(([_, listen]) => listen)
      .map(([eventName]) => eventName);
  }

  getWebContentsDetails(webContents) {
    if (!webContents?.loadURL) {
      return {};
    }

    try {
      return {
        webContents: {
          id: webContents.id,
          url: webContents.getURL(),
        },
      };
    } catch {
      return {};
    }
  }

  handleEvent({ eventName, eventSource, handlerArgs }) {
    const log = this.formatEventLog({ eventName, eventSource, handlerArgs });
    if (log) {
      const logFns = this.scope ? this.logger.scope(this.scope) : this.logger;
      logFns?.[this.level]?.(...log);
    }
  }
}

module.exports = EventLogger;


/***/ }),

/***/ "./node_modules/electron-log/src/main/electronApi.js":
/*!***********************************************************!*\
  !*** ./node_modules/electron-log/src/main/electronApi.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const os = __webpack_require__(/*! os */ "os");
const path = __webpack_require__(/*! path */ "path");

/** @type {Electron.Main} */
let electron;
try {
  // eslint-disable-next-line global-require,import/no-extraneous-dependencies
  electron = __webpack_require__(/*! electron */ "electron");
} catch {
  electron = null;
}

module.exports = {
  getAppUserDataPath() {
    return getPath('userData');
  },

  getName,

  getPath,

  getVersion,

  getVersions() {
    return {
      app: `${getName()} ${getVersion()}`,
      electron: `Electron ${process.versions.electron}`,
      os: getOsVersion(),
    };
  },

  isDev() {
    const app = getApp();

    if (app?.isPackaged !== undefined) {
      return !app.isPackaged;
    }

    if (typeof process.execPath === 'string') {
      const execFileName = path.basename(process.execPath).toLowerCase();
      return execFileName.startsWith('electron');
    }

    return  true
      || 0;
  },

  isElectron() {
    return Boolean(process.versions.electron);
  },

  onAppEvent(eventName, handler) {
    electron?.app?.on(eventName, handler);

    return () => {
      electron?.app?.off(eventName, handler);
    };
  },

  onAppReady(handler) {
    if (electron?.app?.isReady()) {
      handler();
    } else if (electron?.app?.once) {
      electron?.app?.once('ready', handler);
    } else {
      handler();
    }
  },

  onEveryWebContentsEvent(eventName, handler) {
    electron?.webContents?.getAllWebContents().forEach((webContents) => {
      webContents.on(eventName, handler);
    });

    electron?.app?.on('web-contents-created', onWebContentsCreated);

    return () => {
      electron?.webContents?.getAllWebContents().forEach((webContents) => {
        webContents.off(eventName, handler);
      });

      electron?.app?.off('web-contents-created', onWebContentsCreated);
    };

    function onWebContentsCreated(_, webContents) {
      webContents.on(eventName, handler);
    }
  },

  /**
   * Listen to async messages sent from opposite process
   * @param {string} channel
   * @param {function} listener
   */
  onIpc(channel, listener) {
    getIpc()?.on(channel, listener);
  },

  onIpcInvoke(channel, listener) {
    getIpc()?.handle?.(channel, listener);
  },

  /**
   * @param {string} url
   * @param {Function} [logFunction]
   */
  openUrl(url, logFunction = console.error) { // eslint-disable-line no-console
    getElectronModule('shell')?.openExternal(url).catch(logFunction);
  },

  setPreloadFileForSessions({
    filePath,
    includeFutureSession = true,
    getSessions = () => [electron?.session?.defaultSession],
  }) {
    for (const session of getSessions().filter(Boolean)) {
      setPreload(session);
    }

    if (includeFutureSession) {
      electron?.app?.on('session-created', (session) => {
        setPreload(session);
      });
    }

    /**
     * @param {Session} session
     */
    function setPreload(session) {
      session.setPreloads([...session.getPreloads(), filePath]);
    }
  },

  /**
   * Sent a message to opposite process
   * @param {string} channel
   * @param {any} message
   */
  sendIpc(channel, message) {
    if (true) {
      sendIpcToRenderer(channel, message);
    } else {}
  },

  showErrorBox(title, message) {
    const dialog = getElectronModule('dialog');
    if (!dialog) return;

    dialog.showErrorBox(title, message);
  },
};

function getApp() {
  return getElectronModule('app');
}

function getName() {
  const app = getApp();
  if (!app) return null;

  return 'name' in app ? app.name : app.getName();
}

function getElectronModule(name) {
  return electron?.[name] || null;
}

function getIpc() {
  if ( true && electron?.ipcMain) {
    return electron.ipcMain;
  }

  if (false) {}

  return null;
}

function getVersion() {
  const app = getApp();
  if (!app) return null;

  return 'version' in app ? app.version : app.getVersion();
}

function getOsVersion() {
  let osName = os.type().replace('_', ' ');
  let osVersion = os.release();

  if (osName === 'Darwin') {
    osName = 'macOS';
    osVersion = getMacOsVersion();
  }

  return `${osName} ${osVersion}`;
}

function getMacOsVersion() {
  const release = Number(os.release().split('.')[0]);
  if (release <= 19) {
    return `10.${release - 4}`;
  }

  return release - 9;
}

function getPath(name) {
  const app = getApp();
  if (!app) return null;

  try {
    return app.getPath(name);
  } catch (e) {
    return null;
  }
}

function sendIpcToMain(channel, message) {
  getIpc()?.send(channel, message);
}

function sendIpcToRenderer(channel, message) {
  electron?.BrowserWindow?.getAllWindows().forEach((wnd) => {
    if (wnd.webContents?.isDestroyed() === false) {
      wnd.webContents.send(channel, message);
    }
  });
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/electron-log/src/main/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const electronApi = __webpack_require__(/*! ./electronApi */ "./node_modules/electron-log/src/main/electronApi.js");
const { initialize } = __webpack_require__(/*! ./initialize */ "./node_modules/electron-log/src/main/initialize.js");
const transportConsole = __webpack_require__(/*! ./transports/console */ "./node_modules/electron-log/src/main/transports/console.js");
const transportFile = __webpack_require__(/*! ./transports/file */ "./node_modules/electron-log/src/main/transports/file/index.js");
const transportRemote = __webpack_require__(/*! ./transports/remote */ "./node_modules/electron-log/src/main/transports/remote.js");
const Logger = __webpack_require__(/*! ../core/Logger */ "./node_modules/electron-log/src/core/Logger.js");
const ErrorHandler = __webpack_require__(/*! ./ErrorHandler */ "./node_modules/electron-log/src/main/ErrorHandler.js");
const EventLogger = __webpack_require__(/*! ./EventLogger */ "./node_modules/electron-log/src/main/EventLogger.js");

const defaultLogger = new Logger({
  errorHandler: new ErrorHandler(),
  eventLogger: new EventLogger(),
  initializeFn: initialize,
  isDev: electronApi.isDev(),
  logId: 'default',
  transportFactories: {
    console: transportConsole,
    file: transportFile,
    remote: transportRemote,
  },
  variables: {
    processType: 'main',
  },
});

defaultLogger.processInternalErrorFn = (e) => {
  defaultLogger.transports.console.writeFn({
    message: {
      data: ['Unhandled electron-log error', e],
      level: 'error',
    },
  });
};

module.exports = defaultLogger;
module.exports.Logger = Logger;
module.exports["default"] = module.exports;

electronApi.onIpc('__ELECTRON_LOG__', (_, message) => {
  if (message.scope) {
    Logger.getInstance(message).scope(message.scope);
  }

  const date = new Date(message.date);
  processMessage({
    ...message,
    date: date.getTime() ? date : new Date(),
  });
});

electronApi.onIpcInvoke('__ELECTRON_LOG__', (_, { cmd = '', logId }) => {
  switch (cmd) {
    case 'getOptions': {
      const logger = Logger.getInstance({ logId });
      return {
        levels: logger.levels,
        logId,
      };
    }

    default: {
      processMessage({ data: [`Unknown cmd '${cmd}'`], level: 'error' });
      return {};
    }
  }
});

function processMessage(message) {
  Logger.getInstance(message)?.processMessage(message);
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/initialize.js":
/*!**********************************************************!*\
  !*** ./node_modules/electron-log/src/main/initialize.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fs = __webpack_require__(/*! fs */ "fs");
const os = __webpack_require__(/*! os */ "os");
const path = __webpack_require__(/*! path */ "path");
const electronApi = __webpack_require__(/*! ./electronApi */ "./node_modules/electron-log/src/main/electronApi.js");
const preloadInitializeFn = __webpack_require__(/*! ../renderer/electron-log-preload */ "./node_modules/electron-log/src/renderer/electron-log-preload.js");

module.exports = {
  initialize({
    getSessions,
    includeFutureSession,
    logger,
    preload = true,
    spyRendererConsole = false,
  }) {
    electronApi.onAppReady(() => {
      try {
        if (preload) {
          initializePreload({
            getSessions,
            includeFutureSession,
            preloadOption: preload,
          });
        }

        if (spyRendererConsole) {
          initializeSpyRendererConsole({ logger });
        }
      } catch (err) {
        logger.warn(err);
      }
    });
  },
};

function initializePreload({
  getSessions,
  includeFutureSession,
  preloadOption,
}) {
  let preloadPath = typeof preloadOption === 'string'
    ? preloadOption
    : path.resolve(__dirname, '../renderer/electron-log-preload.js');

  if (!fs.existsSync(preloadPath)) {
    preloadPath = path.join(
      electronApi.getAppUserDataPath() || os.tmpdir(),
      'electron-log-preload.js',
    );
    const preloadCode = `
      try {
        (${preloadInitializeFn.toString()})(require('electron'));
      } catch(e) {
        console.error(e);
      }
    `;
    fs.writeFileSync(preloadPath, preloadCode, 'utf8');
  }

  electronApi.setPreloadFileForSessions({
    filePath: preloadPath,
    includeFutureSession,
    getSessions,
  });
}

function initializeSpyRendererConsole({ logger }) {
  const levels = ['verbose', 'info', 'warning', 'error'];
  electronApi.onEveryWebContentsEvent(
    'console-message',
    (event, level, message) => {
      logger.processMessage({
        data: [message],
        level: levels[level],
        variables: { processType: 'renderer' },
      });
    },
  );
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transforms/format.js":
/*!*****************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transforms/format.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const { transform } = __webpack_require__(/*! ./transform */ "./node_modules/electron-log/src/main/transforms/transform.js");

module.exports = {
  concatFirstStringElements,
  formatScope,
  formatText,
  formatVariables,
  timeZoneFromOffset,

  format({ message, logger, transport, data = message?.data }) {
    switch (typeof transport.format) {
      case 'string': {
        return transform({
          message,
          logger,
          transforms: [formatVariables, formatScope, formatText],
          transport,
          initialData: [transport.format, ...data],
        });
      }

      case 'function': {
        return transport.format({
          data,
          level: message?.level || 'info',
          logger,
          message,
          transport,
        });
      }

      default: {
        return data;
      }
    }
  },
};

/**
 * The first argument of console.log may contain a template. In the library
 * the first element is a string related to transports.console.format. So
 * this function concatenates first two elements to make templates like %d
 * work
 * @param {*[]} data
 * @return {*[]}
 */
function concatFirstStringElements({ data }) {
  if (typeof data[0] !== 'string' || typeof data[1] !== 'string') {
    return data;
  }

  if (data[0].match(/%[1cdfiOos]/)) {
    return data;
  }

  return [`${data[0]} ${data[1]}`, ...data.slice(2)];
}

function timeZoneFromOffset(minutesOffset) {
  const minutesPositive = Math.abs(minutesOffset);
  const sign = minutesOffset >= 0 ? '-' : '+';
  const hours = Math.floor(minutesPositive / 60).toString().padStart(2, '0');
  const minutes = (minutesPositive % 60).toString().padStart(2, '0');
  return `${sign}${hours}:${minutes}`;
}

function formatScope({ data, logger, message }) {
  const { defaultLabel, labelLength } = logger?.scope || {};
  const template = data[0];
  let label = message.scope;

  if (!label) {
    label = defaultLabel;
  }

  let scopeText;
  if (label === '') {
    scopeText = labelLength > 0 ? ''.padEnd(labelLength + 3) : '';
  } else if (typeof label === 'string') {
    scopeText = ` (${label})`.padEnd(labelLength + 3);
  } else {
    scopeText = '';
  }

  data[0] = template.replace('{scope}', scopeText);
  return data;
}

function formatVariables({ data, message }) {
  let template = data[0];
  if (typeof template !== 'string') {
    return data;
  }

  // Add additional space to the end of {level}] template to align messages
  template = template.replace('{level}]', `${message.level}]`.padEnd(6, ' '));

  const date = message.date || new Date();
  data[0] = template
    .replace(/\{(\w+)}/g, (substring, name) => {
      switch (name) {
        case 'level': return message.level || 'info';
        case 'logId': return message.logId;

        case 'y': return date.getFullYear().toString(10);
        case 'm': return (date.getMonth() + 1).toString(10).padStart(2, '0');
        case 'd': return date.getDate().toString(10).padStart(2, '0');
        case 'h': return date.getHours().toString(10).padStart(2, '0');
        case 'i': return date.getMinutes().toString(10).padStart(2, '0');
        case 's': return date.getSeconds().toString(10).padStart(2, '0');
        case 'ms': return date.getMilliseconds().toString(10).padStart(3, '0');
        case 'z': return timeZoneFromOffset(date.getTimezoneOffset());
        case 'iso': return date.toISOString();

        default: {
          return message.variables?.[name] || substring;
        }
      }
    })
    .trim();

  return data;
}

function formatText({ data }) {
  const template = data[0];
  if (typeof template !== 'string') {
    return data;
  }

  const textTplPosition = template.lastIndexOf('{text}');
  if (textTplPosition === template.length - 6) {
    data[0] = template.replace(/\s?{text}/, '');
    if (data[0] === '') {
      data.shift();
    }

    return data;
  }

  const templatePieces = template.split('{text}');
  let result = [];

  if (templatePieces[0] !== '') {
    result.push(templatePieces[0]);
  }

  result = result.concat(data.slice(1));

  if (templatePieces[1] !== '') {
    result.push(templatePieces[1]);
  }

  return result;
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transforms/object.js":
/*!*****************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transforms/object.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const util = __webpack_require__(/*! util */ "util");

module.exports = {
  serialize,

  maxDepth({ data, transport, depth = transport?.depth ?? 6 }) {
    if (!data) {
      return data;
    }

    if (depth < 1) {
      if (Array.isArray(data)) return '[array]';
      if (typeof data === 'object' && data) return '[object]';

      return data;
    }

    if (Array.isArray(data)) {
      return data.map((child) => module.exports.maxDepth({
        data: child,
        depth: depth - 1,
      }));
    }

    if (typeof data !== 'object') {
      return data;
    }

    if (data && typeof data.toISOString === 'function') {
      return data;
    }

    // noinspection PointlessBooleanExpressionJS
    if (data === null) {
      return null;
    }

    if (data instanceof Error) {
      return data;
    }

    const newJson = {};
    for (const i in data) {
      if (!Object.prototype.hasOwnProperty.call(data, i)) continue;
      newJson[i] = module.exports.maxDepth({
        data: data[i],
        depth: depth - 1,
      });
    }

    return newJson;
  },

  toJSON({ data }) {
    return JSON.parse(JSON.stringify(data, createSerializer()));
  },

  toString({ data, transport }) {
    const inspectOptions = transport?.inspectOptions || {};

    const simplifiedData = data.map((item) => {
      if (item === undefined) {
        return undefined;
      }

      try {
        const str = JSON.stringify(item, createSerializer(), '  ');
        return str === undefined ? undefined : JSON.parse(str);
      } catch (e) {
        // There are some rare cases when an item can't be simplified.
        // In that case, it's fine to pass it to util.format directly.
        return item;
      }
    });

    return util.formatWithOptions(inspectOptions, ...simplifiedData);
  },
};

/**
 * @param {object} options?
 * @param {boolean} options.serializeMapAndSet?
 * @return {function}
 */
function createSerializer(options = {}) {
  const seen = new WeakSet();

  return function (key, value) {
    if (typeof value === 'object' && value !== null) {
      if (seen.has(value)) {
        return undefined;
      }

      seen.add(value);
    }

    return serialize(key, value, options);
  };
}

/**
 * @param {string} key
 * @param {any} value
 * @param {object} options?
 * @return {any}
 */
function serialize(key, value, options = {}) {
  const serializeMapAndSet = options?.serializeMapAndSet !== false;

  if (value instanceof Error) {
    return value.stack;
  }

  if (!value) {
    return value;
  }

  if (typeof value === 'function') {
    return `[function] ${value.toString()}`;
  }

  if (serializeMapAndSet && value instanceof Map && Object.fromEntries) {
    return Object.fromEntries(value);
  }

  if (serializeMapAndSet && value instanceof Set && Array.from) {
    return Array.from(value);
  }

  return value;
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transforms/style.js":
/*!****************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transforms/style.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";


module.exports = {
  transformStyles,

  applyAnsiStyles({ data }) {
    return transformStyles(data, styleToAnsi, resetAnsiStyle);
  },

  removeStyles({ data }) {
    return transformStyles(data, () => '');
  },
};

const ANSI_COLORS = {
  unset: '\x1b[0m',
  black: '\x1b[30m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

function styleToAnsi(style) {
  const color = style.replace(/color:\s*(\w+).*/, '$1').toLowerCase();
  return ANSI_COLORS[color] || '';
}

function resetAnsiStyle(string) {
  return string + ANSI_COLORS.unset;
}

function transformStyles(data, onStyleFound, onStyleApplied) {
  const foundStyles = {};

  return data.reduce((result, item, index, array) => {
    if (foundStyles[index]) {
      return result;
    }

    if (typeof item === 'string') {
      let valueIndex = index;
      let styleApplied = false;

      item = item.replace(/%[1cdfiOos]/g, (match) => {
        valueIndex += 1;

        if (match !== '%c') {
          return match;
        }

        const style = array[valueIndex];
        if (typeof style === 'string') {
          foundStyles[valueIndex] = true;
          styleApplied = true;
          return onStyleFound(style, item);
        }

        return match;
      });

      if (styleApplied && onStyleApplied) {
        item = onStyleApplied(item);
      }
    }

    result.push(item);
    return result;
  }, []);
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transforms/transform.js":
/*!********************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transforms/transform.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


module.exports = { transform };

function transform({
  logger,
  message,
  transport,

  initialData = message?.data || [],
  transforms = transport?.transforms,
}) {
  return transforms.reduce((data, trans) => {
    if (typeof trans === 'function') {
      return trans({ data, logger, message, transport });
    }

    return data;
  }, initialData);
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/console.js":
/*!******************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/console.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable no-console */

const { concatFirstStringElements, format } = __webpack_require__(/*! ../transforms/format */ "./node_modules/electron-log/src/main/transforms/format.js");
const { maxDepth, toJSON } = __webpack_require__(/*! ../transforms/object */ "./node_modules/electron-log/src/main/transforms/object.js");
const { applyAnsiStyles, removeStyles } = __webpack_require__(/*! ../transforms/style */ "./node_modules/electron-log/src/main/transforms/style.js");
const { transform } = __webpack_require__(/*! ../transforms/transform */ "./node_modules/electron-log/src/main/transforms/transform.js");

const consoleMethods = {
  error: console.error,
  warn: console.warn,
  info: console.info,
  verbose: console.info,
  debug: console.debug,
  silly: console.debug,
  log: console.log,
};

module.exports = consoleTransportFactory;

const separator = process.platform === 'win32' ? '>' : '›';
const DEFAULT_FORMAT = `%c{h}:{i}:{s}.{ms}{scope}%c ${separator} {text}`;

Object.assign(consoleTransportFactory, {
  DEFAULT_FORMAT,
});

function consoleTransportFactory(logger) {
  return Object.assign(transport, {
    format: DEFAULT_FORMAT,
    level: 'silly',
    transforms: [
      addTemplateColors,
      format,
      formatStyles,
      concatFirstStringElements,
      maxDepth,
      toJSON,
    ],
    useStyles: process.env.FORCE_STYLES,

    writeFn({ message }) {
      const consoleLogFn = consoleMethods[message.level] || consoleMethods.info;
      consoleLogFn(...message.data);
    },
  });

  function transport(message) {
    const data = transform({ logger, message, transport });
    transport.writeFn({
      message: { ...message, data },
    });
  }
}

function addTemplateColors({ data, message, transport }) {
  if (transport.format !== DEFAULT_FORMAT) {
    return data;
  }

  return [`color:${levelToStyle(message.level)}`, 'color:unset', ...data];
}

function canUseStyles(useStyleValue, level) {
  if (typeof useStyleValue === 'boolean') {
    return useStyleValue;
  }

  const useStderr = level === 'error' || level === 'warn';
  const stream = useStderr ? process.stderr : process.stdout;
  return stream && stream.isTTY;
}

function formatStyles(args) {
  const { message, transport } = args;
  const useStyles = canUseStyles(transport.useStyles, message.level);
  const nextTransform = useStyles ? applyAnsiStyles : removeStyles;
  return nextTransform(args);
}

function levelToStyle(level) {
  const map = { error: 'red', warn: 'yellow', info: 'cyan', default: 'unset' };
  return map[level] || map.default;
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/file/File.js":
/*!********************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/file/File.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const EventEmitter = __webpack_require__(/*! events */ "events");
const fs = __webpack_require__(/*! fs */ "fs");
const os = __webpack_require__(/*! os */ "os");

class File extends EventEmitter {
  asyncWriteQueue = [];
  bytesWritten = 0;
  hasActiveAsyncWriting = false;
  path = null;
  initialSize = undefined;
  writeOptions = null;
  writeAsync = false;

  constructor({
    path,
    writeOptions = { encoding: 'utf8', flag: 'a', mode: 0o666 },
    writeAsync = false,
  }) {
    super();

    this.path = path;
    this.writeOptions = writeOptions;
    this.writeAsync = writeAsync;
  }

  get size() {
    return this.getSize();
  }

  clear() {
    try {
      fs.writeFileSync(this.path, '', {
        mode: this.writeOptions.mode,
        flag: 'w',
      });
      this.reset();
      return true;
    } catch (e) {
      if (e.code === 'ENOENT') {
        return true;
      }

      this.emit('error', e, this);
      return false;
    }
  }

  crop(bytesAfter) {
    try {
      const content = readFileSyncFromEnd(this.path, bytesAfter || 4096);
      this.clear();
      this.writeLine(`[log cropped]${os.EOL}${content}`);
    } catch (e) {
      this.emit(
        'error',
        new Error(`Couldn't crop file ${this.path}. ${e.message}`),
        this,
      );
    }
  }

  getSize() {
    if (this.initialSize === undefined) {
      try {
        const stats = fs.statSync(this.path);
        this.initialSize = stats.size;
      } catch (e) {
        this.initialSize = 0;
      }
    }

    return this.initialSize + this.bytesWritten;
  }

  increaseBytesWrittenCounter(text) {
    this.bytesWritten += Buffer.byteLength(text, this.writeOptions.encoding);
  }

  isNull() {
    return false;
  }

  nextAsyncWrite() {
    const file = this;

    if (this.hasActiveAsyncWriting || this.asyncWriteQueue.length === 0) {
      return;
    }

    const text = this.asyncWriteQueue.join('');
    this.asyncWriteQueue = [];
    this.hasActiveAsyncWriting = true;

    fs.writeFile(this.path, text, this.writeOptions, (e) => {
      file.hasActiveAsyncWriting = false;

      if (e) {
        file.emit(
          'error',
          new Error(`Couldn't write to ${file.path}. ${e.message}`),
          this,
        );
      } else {
        file.increaseBytesWrittenCounter(text);
      }

      file.nextAsyncWrite();
    });
  }

  reset() {
    this.initialSize = undefined;
    this.bytesWritten = 0;
  }

  toString() {
    return this.path;
  }

  writeLine(text) {
    text += os.EOL;

    if (this.writeAsync) {
      this.asyncWriteQueue.push(text);
      this.nextAsyncWrite();
      return;
    }

    try {
      fs.writeFileSync(this.path, text, this.writeOptions);
      this.increaseBytesWrittenCounter(text);
    } catch (e) {
      this.emit(
        'error',
        new Error(`Couldn't write to ${this.path}. ${e.message}`),
        this,
      );
    }
  }
}

module.exports = File;

function readFileSyncFromEnd(filePath, bytesCount) {
  const buffer = Buffer.alloc(bytesCount);
  const stats = fs.statSync(filePath);

  const readLength = Math.min(stats.size, bytesCount);
  const offset = Math.max(0, stats.size - bytesCount);

  const fd = fs.openSync(filePath, 'r');
  const totalBytes = fs.readSync(fd, buffer, 0, readLength, offset);
  fs.closeSync(fd);

  return buffer.toString('utf8', 0, totalBytes);
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/file/FileRegistry.js":
/*!****************************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/file/FileRegistry.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const EventEmitter = __webpack_require__(/*! events */ "events");
const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const File = __webpack_require__(/*! ./File */ "./node_modules/electron-log/src/main/transports/file/File.js");
const NullFile = __webpack_require__(/*! ./NullFile */ "./node_modules/electron-log/src/main/transports/file/NullFile.js");

class FileRegistry extends EventEmitter {
  store = {};

  constructor() {
    super();
    this.emitError = this.emitError.bind(this);
  }

  /**
   * Provide a File object corresponding to the filePath
   * @param {string} filePath
   * @param {WriteOptions} [writeOptions]
   * @param {boolean} [writeAsync]
   * @return {File}
   */
  provide({ filePath, writeOptions, writeAsync = false }) {
    let file;
    try {
      filePath = path.resolve(filePath);

      if (this.store[filePath]) {
        return this.store[filePath];
      }

      file = this.createFile({ filePath, writeOptions, writeAsync });
    } catch (e) {
      file = new NullFile({ path: filePath });
      this.emitError(e, file);
    }

    file.on('error', this.emitError);
    this.store[filePath] = file;
    return file;
  }

  /**
   * @param {string} filePath
   * @param {WriteOptions} writeOptions
   * @param {boolean} async
   * @return {File}
   * @private
   */
  createFile({ filePath, writeOptions, writeAsync }) {
    this.testFileWriting(filePath);
    return new File({ path: filePath, writeOptions, writeAsync });
  }

  /**
   * @param {Error} error
   * @param {File} file
   * @private
   */
  emitError(error, file) {
    this.emit('error', error, file);
  }

  /**
   * @param {string} filePath
   * @private
   */
  testFileWriting(filePath) {
    fs.mkdirSync(path.dirname(filePath), { recursive: true });
    fs.writeFileSync(filePath, '', { flag: 'a' });
  }
}

module.exports = FileRegistry;


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/file/NullFile.js":
/*!************************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/file/NullFile.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const File = __webpack_require__(/*! ./File */ "./node_modules/electron-log/src/main/transports/file/File.js");

class NullFile extends File {
  clear() {

  }

  crop() {

  }

  getSize() {
    return 0;
  }

  isNull() {
    return true;
  }

  writeLine() {

  }
}

module.exports = NullFile;


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/file/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/file/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const os = __webpack_require__(/*! os */ "os");
const FileRegistry = __webpack_require__(/*! ./FileRegistry */ "./node_modules/electron-log/src/main/transports/file/FileRegistry.js");
const variables = __webpack_require__(/*! ./variables */ "./node_modules/electron-log/src/main/transports/file/variables.js");
const { transform } = __webpack_require__(/*! ../../transforms/transform */ "./node_modules/electron-log/src/main/transforms/transform.js");
const { removeStyles } = __webpack_require__(/*! ../../transforms/style */ "./node_modules/electron-log/src/main/transforms/style.js");
const { format } = __webpack_require__(/*! ../../transforms/format */ "./node_modules/electron-log/src/main/transforms/format.js");
const { toString } = __webpack_require__(/*! ../../transforms/object */ "./node_modules/electron-log/src/main/transforms/object.js");

module.exports = fileTransportFactory;

// Shared between multiple file transport instances
const globalRegistry = new FileRegistry();

function fileTransportFactory(logger, registry = globalRegistry) {
  /** @type {PathVariables} */
  let pathVariables;

  if (registry.listenerCount('error') < 1) {
    registry.on('error', (e, file) => {
      logConsole(`Can't write to ${file}`, e);
    });
  }

  return Object.assign(transport, {
    fileName: getDefaultFileName(logger.variables.processType),
    format: '[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}]{scope} {text}',
    getFile,
    inspectOptions: { depth: 5 },
    level: 'silly',
    maxSize: 1024 ** 2,
    readAllLogs,
    sync: true,
    transforms: [removeStyles, format, toString],
    writeOptions: { flag: 'a', mode: 0o666, encoding: 'utf8' },

    archiveLogFn(file) {
      const oldPath = file.toString();
      const inf = path.parse(oldPath);
      try {
        fs.renameSync(oldPath, path.join(inf.dir, `${inf.name}.old${inf.ext}`));
      } catch (e) {
        logConsole('Could not rotate log', e);
        const quarterOfMaxSize = Math.round(transport.maxSize / 4);
        file.crop(Math.min(quarterOfMaxSize, 256 * 1024));
      }
    },

    resolvePathFn(vars) {
      return path.join(vars.libraryDefaultDir, vars.fileName);
    },
  });

  function transport(message) {
    const file = getFile(message);

    const needLogRotation = transport.maxSize > 0
      && file.size > transport.maxSize;

    if (needLogRotation) {
      transport.archiveLogFn(file);
      file.reset();
    }

    const content = transform({ logger, message, transport });
    file.writeLine(content);
  }

  function initializeOnFirstAccess() {
    if (pathVariables) {
      return;
    }

    // Make a shallow copy of pathVariables to keep getters intact
    pathVariables = Object.create(
      Object.prototype,
      {
        ...Object.getOwnPropertyDescriptors(
          variables.getPathVariables(process.platform),
        ),
        fileName: {
          get() {
            return transport.fileName;
          },
          enumerable: true,
        },
      },
    );

    if (typeof transport.archiveLog === 'function') {
      transport.archiveLogFn = transport.archiveLog;
      logConsole('archiveLog is deprecated. Use archiveLogFn instead');
    }

    if (typeof transport.resolvePath === 'function') {
      transport.resolvePathFn = transport.resolvePath;
      logConsole('resolvePath is deprecated. Use resolvePathFn instead');
    }
  }

  function logConsole(message, error = null, level = 'error') {
    const data = [`electron-log.transports.file: ${message}`];

    if (error) {
      data.push(error);
    }

    logger.transports.console({ data, date: new Date(), level });
  }

  function getFile(msg) {
    initializeOnFirstAccess();

    const filePath = transport.resolvePathFn(pathVariables, msg);
    return registry.provide({
      filePath,
      writeAsync: !transport.sync,
      writeOptions: transport.writeOptions,
    });
  }

  function readAllLogs({ fileFilter = (f) => f.endsWith('.log') } = {}) {
    const logsPath = path.dirname(transport.resolvePathFn(pathVariables));

    return fs.readdirSync(logsPath)
      .map((fileName) => path.join(logsPath, fileName))
      .filter(fileFilter)
      .map((logPath) => {
        try {
          return {
            path: logPath,
            lines: fs.readFileSync(logPath, 'utf8').split(os.EOL),
          };
        } catch {
          return null;
        }
      })
      .filter(Boolean);
  }
}

function getDefaultFileName(processType = "browser") {
  switch (processType) {
    case 'renderer': return 'renderer.log';
    case 'worker': return 'worker.log';
    default: return 'main.log';
  }
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/file/packageJson.js":
/*!***************************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/file/packageJson.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable consistent-return */

const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");

module.exports = {
  readPackageJson,
  tryReadJsonAt,
};

/**
 * @return {{ name?: string, version?: string}}
 */
function readPackageJson() {
  return tryReadJsonAt(__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].filename)
    || tryReadJsonAt(extractPathFromArgs())
    || tryReadJsonAt(process.resourcesPath, 'app.asar')
    || tryReadJsonAt(process.resourcesPath, 'app')
    || tryReadJsonAt(process.cwd())
    || { name: null, version: null };
}

/**
 * @param {...string} searchPaths
 * @return {{ name?: string, version?: string } | null}
 */
function tryReadJsonAt(...searchPaths) {
  if (!searchPaths[0]) {
    return null;
  }

  try {
    const searchPath = path.join(...searchPaths);
    const fileName = findUp('package.json', searchPath);
    if (!fileName) {
      return null;
    }

    const json = JSON.parse(fs.readFileSync(fileName, 'utf8'));
    const name = json.productName || json.name;
    if (!name || name.toLowerCase() === 'electron') {
      return null;
    }

    if (json.productName || json.name) {
      return {
        name,
        version: json.version,
      };
    }
  } catch (e) {
    return null;
  }
}

/**
 * @param {string} fileName
 * @param {string} [cwd]
 * @return {string | null}
 */
function findUp(fileName, cwd) {
  let currentPath = cwd;
  // eslint-disable-next-line no-constant-condition
  while (true) {
    const parsedPath = path.parse(currentPath);
    const root = parsedPath.root;
    const dir = parsedPath.dir;

    if (fs.existsSync(path.join(currentPath, fileName))) {
      return path.resolve(path.join(currentPath, fileName));
    }

    if (currentPath === root) {
      return null;
    }

    currentPath = dir;
  }
}

/**
 * Get app path from --user-data-dir cmd arg, passed to a renderer process
 * @return {string|null}
 */
function extractPathFromArgs() {
  const matchedArgs = process.argv.filter((arg) => {
    return arg.indexOf('--user-data-dir=') === 0;
  });

  if (matchedArgs.length === 0 || typeof matchedArgs[0] !== 'string') {
    return null;
  }

  const userDataDir = matchedArgs[0];
  return userDataDir.replace('--user-data-dir=', '');
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/file/variables.js":
/*!*************************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/file/variables.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const os = __webpack_require__(/*! os */ "os");
const path = __webpack_require__(/*! path */ "path");
const electronApi = __webpack_require__(/*! ../../electronApi */ "./node_modules/electron-log/src/main/electronApi.js");
const packageJson = __webpack_require__(/*! ./packageJson */ "./node_modules/electron-log/src/main/transports/file/packageJson.js");

module.exports = {
  getAppData,
  getLibraryDefaultDir,
  getLibraryTemplate,
  getNameAndVersion,
  getPathVariables,
  getUserData,
};

function getAppData(platform) {
  const appData = electronApi.getPath('appData');
  if (appData) {
    return appData;
  }

  const home = getHome();

  switch (platform) {
    case 'darwin': {
      return path.join(home, 'Library/Application Support');
    }

    case 'win32': {
      return process.env.APPDATA || path.join(home, 'AppData/Roaming');
    }

    default: {
      return process.env.XDG_CONFIG_HOME || path.join(home, '.config');
    }
  }
}

function getHome() {
  return os.homedir ? os.homedir() : process.env.HOME;
}

function getLibraryDefaultDir(platform, appName) {
  if (platform === 'darwin') {
    return path.join(getHome(), 'Library/Logs', appName);
  }

  return path.join(getUserData(platform, appName), 'logs');
}

function getLibraryTemplate(platform) {
  if (platform === 'darwin') {
    return path.join(getHome(), 'Library/Logs', '{appName}');
  }

  return path.join(getAppData(platform), '{appName}', 'logs');
}

function getNameAndVersion() {
  let name = electronApi.getName() || '';
  let version = electronApi.getVersion();

  if (name.toLowerCase() === 'electron') {
    name = '';
    version = '';
  }

  if (name && version) {
    return { name, version };
  }

  const packageValues = packageJson.readPackageJson();
  if (!name) {
    name = packageValues.name;
  }

  if (!version) {
    version = packageValues.version;
  }

  if (!name) {
    // Fallback, otherwise file transport can't be initialized
    name = 'Electron';
  }

  return { name, version };
}

/**
 * @param {string} platform
 * @return {PathVariables}
 */
function getPathVariables(platform) {
  const nameAndVersion = getNameAndVersion();
  const appName = nameAndVersion.name;
  const appVersion = nameAndVersion.version;

  return {
    appData: getAppData(platform),
    appName,
    appVersion,
    get electronDefaultDir() {
      return electronApi.getPath('logs');
    },
    home: getHome(),
    libraryDefaultDir: getLibraryDefaultDir(platform, appName),
    libraryTemplate: getLibraryTemplate(platform),
    temp: electronApi.getPath('temp') || os.tmpdir(),
    userData: getUserData(platform, appName),
  };
}

function getUserData(platform, appName) {
  if (electronApi.getName() !== appName) {
    return path.join(getAppData(platform), appName);
  }

  return electronApi.getPath('userData')
    || path.join(getAppData(platform), appName);
}


/***/ }),

/***/ "./node_modules/electron-log/src/main/transports/remote.js":
/*!*****************************************************************!*\
  !*** ./node_modules/electron-log/src/main/transports/remote.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const http = __webpack_require__(/*! http */ "http");
const https = __webpack_require__(/*! https */ "https");
const { transform } = __webpack_require__(/*! ../transforms/transform */ "./node_modules/electron-log/src/main/transforms/transform.js");
const { removeStyles } = __webpack_require__(/*! ../transforms/style */ "./node_modules/electron-log/src/main/transforms/style.js");
const { toJSON, maxDepth } = __webpack_require__(/*! ../transforms/object */ "./node_modules/electron-log/src/main/transforms/object.js");

module.exports = remoteTransportFactory;

function remoteTransportFactory(logger) {
  return Object.assign(transport, {
    client: { name: 'electron-application' },
    depth: 6,
    level: false,
    requestOptions: {},
    transforms: [removeStyles, toJSON, maxDepth],

    makeBodyFn({ message }) {
      return JSON.stringify({
        client: transport.client,
        data: message.data,
        date: message.date.getTime(),
        level: message.level,
        scope: message.scope,
        variables: message.variables,
      });
    },

    processErrorFn({ error }) {
      logger.processMessage(
        {
          data: [`electron-log: can't POST ${transport.url}`, error],
          level: 'warn',
        },
        { transports: ['console', 'file'] },
      );
    },

    sendRequestFn({ serverUrl, requestOptions, body }) {
      const httpTransport = serverUrl.startsWith('https:') ? https : http;

      const request = httpTransport.request(serverUrl, {
        method: 'POST',
        ...requestOptions,
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': body.length,
          ...requestOptions.headers,
        },
      });

      request.write(body);
      request.end();

      return request;
    },
  });

  function transport(message) {
    if (!transport.url) {
      return;
    }

    const body = transport.makeBodyFn({
      logger,
      message: { ...message, data: transform({ logger, message, transport }) },
      transport,
    });

    const request = transport.sendRequestFn({
      serverUrl: transport.url,
      requestOptions: transport.requestOptions,
      body: Buffer.from(body, 'utf8'),
    });

    request.on('error', (error) => transport.processErrorFn({
      error,
      logger,
      message,
      request,
      transport,
    }));
  }
}


/***/ }),

/***/ "./node_modules/electron-log/src/renderer/electron-log-preload.js":
/*!************************************************************************!*\
  !*** ./node_modules/electron-log/src/renderer/electron-log-preload.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


let electron = {};

try {
  // eslint-disable-next-line global-require,import/no-extraneous-dependencies
  electron = __webpack_require__(/*! electron */ "electron");
} catch (e) {
  // require isn't available, not from a preload script
}

if (electron.ipcRenderer) {
  initialize(electron);
}

if (true) {
  module.exports = initialize;
}

/**
 * @param {Electron.ContextBridge} contextBridge
 * @param {Electron.IpcRenderer} ipcRenderer
 */
function initialize({ contextBridge, ipcRenderer }) {
  if (!ipcRenderer) {
    return;
  }

  ipcRenderer.on('__ELECTRON_LOG_IPC__', (_, message) => {
    window.postMessage({ cmd: 'message', ...message });
  });

  ipcRenderer
    .invoke('__ELECTRON_LOG__', { cmd: 'getOptions' })
    // eslint-disable-next-line no-console
    .catch((e) => console.error(new Error(
      'electron-log isn\'t initialized in the main process. '
      + `Please call log.initialize() before. ${e.message}`,
    )));

  const electronLog = {
    sendToMain(message) {
      try {
        ipcRenderer.send('__ELECTRON_LOG__', message);
      } catch (e) {
        // eslint-disable-next-line no-console
        console.error('electronLog.sendToMain ', e, 'data:', message);

        ipcRenderer.send('__ELECTRON_LOG__', {
          cmd: 'errorHandler',
          error: { message: e?.message, stack: e?.stack },
          errorName: 'sendToMain',
        });
      }
    },

    log(...data) {
      electronLog.sendToMain({ data, level: 'info' });
    },
  };

  for (const level of ['error', 'warn', 'info', 'verbose', 'debug', 'silly']) {
    electronLog[level] = (...data) => electronLog.sendToMain({
      data,
      level,
    });
  }

  if (contextBridge && process.contextIsolated) {
    try {
      contextBridge.exposeInMainWorld('__electronLog', electronLog);
    } catch {
      // Sometimes this files can be included twice
    }
  }

  if (typeof window === 'object') {
    window.__electronLog = electronLog;
  } else {
    // noinspection JSConstantReassignment
    __electronLog = electronLog;
  }
}


/***/ }),

/***/ "./node_modules/electron-log/src/renderer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/electron-log/src/renderer/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const Logger = __webpack_require__(/*! ../core/Logger */ "./node_modules/electron-log/src/core/Logger.js");
const RendererErrorHandler = __webpack_require__(/*! ./lib/RendererErrorHandler */ "./node_modules/electron-log/src/renderer/lib/RendererErrorHandler.js");
const transportConsole = __webpack_require__(/*! ./lib/transports/console */ "./node_modules/electron-log/src/renderer/lib/transports/console.js");
const transportIpc = __webpack_require__(/*! ./lib/transports/ipc */ "./node_modules/electron-log/src/renderer/lib/transports/ipc.js");

module.exports = createLogger();
module.exports.Logger = Logger;
module.exports["default"] = module.exports;

function createLogger() {
  const logger = new Logger({
    allowUnknownLevel: true,
    errorHandler: new RendererErrorHandler(),
    initializeFn: () => {},
    logId: 'default',
    transportFactories: {
      console: transportConsole,
      ipc: transportIpc,
    },
    variables: {
      processType: 'renderer',
    },
  });

  logger.errorHandler.setOptions({
    logFn({ error, errorName, showDialog }) {
      logger.transports.console({
        data: [errorName, error].filter(Boolean),
        level: 'error',
      });
      logger.transports.ipc({
        cmd: 'errorHandler',
        error: {
          cause: error?.cause,
          code: error?.code,
          name: error?.name,
          message: error?.message,
          stack: error?.stack,
        },
        errorName,
        logId: logger.logId,
        showDialog,
      });
    },
  });

  if (typeof window === 'object') {
    window.addEventListener('message', (event) => {
      const { cmd, logId, ...message } = event.data || {};
      const instance = Logger.getInstance({ logId });

      if (cmd === 'message') {
        instance.processMessage(message, { transports: ['console'] });
      }
    });
  }

  // To support custom levels
  return new Proxy(logger, {
    get(target, prop) {
      if (typeof target[prop] !== 'undefined') {
        return target[prop];
      }

      return (...data) => logger.logData(data, { level: prop });
    },
  });
}


/***/ }),

/***/ "./node_modules/electron-log/src/renderer/lib/RendererErrorHandler.js":
/*!****************************************************************************!*\
  !*** ./node_modules/electron-log/src/renderer/lib/RendererErrorHandler.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


// eslint-disable-next-line no-console
const consoleError = console.error;

class RendererErrorHandler {
  logFn = null;
  onError = null;
  showDialog = false;
  preventDefault = true;

  constructor({ logFn = null } = {}) {
    this.handleError = this.handleError.bind(this);
    this.handleRejection = this.handleRejection.bind(this);
    this.startCatching = this.startCatching.bind(this);
    this.logFn = logFn;
  }

  handle(error, {
    logFn = this.logFn,
    errorName = '',
    onError = this.onError,
    showDialog = this.showDialog,
  } = {}) {
    try {
      if (onError?.({ error, errorName, processType: 'renderer' }) !== false) {
        logFn({ error, errorName, showDialog });
      }
    } catch {
      consoleError(error);
    }
  }

  setOptions({ logFn, onError, preventDefault, showDialog }) {
    if (typeof logFn === 'function') {
      this.logFn = logFn;
    }

    if (typeof onError === 'function') {
      this.onError = onError;
    }

    if (typeof preventDefault === 'boolean') {
      this.preventDefault = preventDefault;
    }

    if (typeof showDialog === 'boolean') {
      this.showDialog = showDialog;
    }
  }

  startCatching({ onError, showDialog } = {}) {
    if (this.isActive) {
      return;
    }

    this.isActive = true;
    this.setOptions({ onError, showDialog });

    window.addEventListener('error', (event) => {
      this.preventDefault && event.preventDefault?.();
      this.handleError(event.error || event);
    });
    window.addEventListener('unhandledrejection', (event) => {
      this.preventDefault && event.preventDefault?.();
      this.handleRejection(event.reason || event);
    });
  }

  handleError(error) {
    this.handle(error, { errorName: 'Unhandled' });
  }

  handleRejection(reason) {
    const error = reason instanceof Error
      ? reason
      : new Error(JSON.stringify(reason));
    this.handle(error, { errorName: 'Unhandled rejection' });
  }
}

module.exports = RendererErrorHandler;


/***/ }),

/***/ "./node_modules/electron-log/src/renderer/lib/transports/console.js":
/*!**************************************************************************!*\
  !*** ./node_modules/electron-log/src/renderer/lib/transports/console.js ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";


/* eslint-disable no-console */

module.exports = consoleTransportRendererFactory;

const consoleMethods = {
  error: console.error,
  warn: console.warn,
  info: console.info,
  verbose: console.info,
  debug: console.debug,
  silly: console.debug,
  log: console.log,
};

function consoleTransportRendererFactory(logger) {
  return Object.assign(transport, {
    format: '{h}:{i}:{s}.{ms}{scope} › {text}',

    formatDataFn({
      data = [],
      date = new Date(),
      format = transport.format,
      logId = logger.logId,
      scope = logger.scopeName,
      ...message
    }) {
      if (typeof format === 'function') {
        return format({ ...message, data, date, logId, scope });
      }

      if (typeof format !== 'string') {
        return data;
      }

      data.unshift(format);

      // Concatenate first two data items to support printf-like templates
      if (typeof data[1] === 'string' && data[1].match(/%[1cdfiOos]/)) {
        data = [`${data[0]} ${data[1]}`, ...data.slice(2)];
      }

      data[0] = data[0]
        .replace(/\{(\w+)}/g, (substring, name) => {
          switch (name) {
            case 'level': return message.level;
            case 'logId': return logId;
            case 'scope': return scope ? ` (${scope})` : '';
            case 'text': return '';

            case 'y': return date.getFullYear().toString(10);
            case 'm': return (date.getMonth() + 1).toString(10)
              .padStart(2, '0');
            case 'd': return date.getDate().toString(10).padStart(2, '0');
            case 'h': return date.getHours().toString(10).padStart(2, '0');
            case 'i': return date.getMinutes().toString(10).padStart(2, '0');
            case 's': return date.getSeconds().toString(10).padStart(2, '0');
            case 'ms': return date.getMilliseconds().toString(10)
              .padStart(3, '0');
            case 'iso': return date.toISOString();

            default: {
              return message.variables?.[name] || substring;
            }
          }
        })
        .trim();

      return data;
    },

    writeFn({ message: { level, data } }) {
      const consoleLogFn = consoleMethods[level] || consoleMethods.info;

      // make an empty call stack
      setTimeout(() => consoleLogFn(...data));
    },

  });

  function transport(message) {
    transport.writeFn({
      message: { ...message, data: transport.formatDataFn(message) },
    });
  }
}


/***/ }),

/***/ "./node_modules/electron-log/src/renderer/lib/transports/ipc.js":
/*!**********************************************************************!*\
  !*** ./node_modules/electron-log/src/renderer/lib/transports/ipc.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


module.exports = ipcTransportRendererFactory;

const RESTRICTED_TYPES = new Set([Promise, WeakMap, WeakSet]);

function ipcTransportRendererFactory(logger) {
  return Object.assign(transport, {
    depth: 5,

    serializeFn(data, { depth = 5, seen = new WeakSet() } = {}) {
      if (depth < 1) {
        return `[${typeof data}]`;
      }

      if (seen.has(data)) {
        return data;
      }

      if (['function', 'symbol'].includes(typeof data)) {
        return data.toString();
      }

      // Primitive types (including null and undefined)
      if (Object(data) !== data) {
        return data;
      }

      // Object types

      if (RESTRICTED_TYPES.has(data.constructor)) {
        return `[${data.constructor.name}]`;
      }

      if (Array.isArray(data)) {
        return data.map((item) => transport.serializeFn(
          item,
          { depth: depth - 1, seen },
        ));
      }

      if (data instanceof Error) {
        return data.stack;
      }

      if (data instanceof Map) {
        return new Map(
          Array
            .from(data)
            .map(([key, value]) => [
              transport.serializeFn(key, { depth: depth - 1, seen }),
              transport.serializeFn(value, { depth: depth - 1, seen }),
            ]),
        );
      }

      if (data instanceof Set) {
        return new Set(
          Array.from(data).map(
            (val) => transport.serializeFn(val, { depth: depth - 1, seen }),
          ),
        );
      }

      seen.add(data);

      return Object.fromEntries(
        Object.entries(data).map(
          ([key, value]) => [
            key,
            transport.serializeFn(value, { depth: depth - 1, seen }),
          ],
        ),
      );
    },
  });

  function transport(message) {
    if (!window.__electronLog) {
      logger.processMessage(
        {
          data: ['electron-log: logger isn\'t initialized in the main process'],
          level: 'error',
        },
        { transports: ['console'] },
      );
      return;
    }

    try {
      __electronLog.sendToMain(transport.serializeFn(message, {
        depth: transport.depth,
      }));
    } catch (e) {
      logger.transports.console({
        data: ['electronLog.transports.ipc', e, 'data:', message.data],
        level: 'error',
      });
    }
  }
}


/***/ }),

/***/ "./node_modules/electron-window-state/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/electron-window-state/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(/*! path */ "path");
const electron = __webpack_require__(/*! electron */ "electron");
const jsonfile = __webpack_require__(/*! jsonfile */ "./node_modules/jsonfile/index.js");
const mkdirp = __webpack_require__(/*! mkdirp */ "./node_modules/mkdirp/index.js");

module.exports = function (options) {
  const app = electron.app || electron.remote.app;
  const screen = electron.screen || electron.remote.screen;
  let state;
  let winRef;
  let stateChangeTimer;
  const eventHandlingDelay = 100;
  const config = Object.assign({
    file: 'window-state.json',
    path: app.getPath('userData'),
    maximize: true,
    fullScreen: true
  }, options);
  const fullStoreFileName = path.join(config.path, config.file);

  function isNormal(win) {
    return !win.isMaximized() && !win.isMinimized() && !win.isFullScreen();
  }

  function hasBounds() {
    return state &&
      Number.isInteger(state.x) &&
      Number.isInteger(state.y) &&
      Number.isInteger(state.width) && state.width > 0 &&
      Number.isInteger(state.height) && state.height > 0;
  }

  function resetStateToDefault() {
    const displayBounds = screen.getPrimaryDisplay().bounds;

    // Reset state to default values on the primary display
    state = {
      width: config.defaultWidth || 800,
      height: config.defaultHeight || 600,
      x: 0,
      y: 0,
      displayBounds
    };
  }

  function windowWithinBounds(bounds) {
    return (
      state.x >= bounds.x &&
      state.y >= bounds.y &&
      state.x + state.width <= bounds.x + bounds.width &&
      state.y + state.height <= bounds.y + bounds.height
    );
  }

  function ensureWindowVisibleOnSomeDisplay() {
    const visible = screen.getAllDisplays().some(display => {
      return windowWithinBounds(display.bounds);
    });

    if (!visible) {
      // Window is partially or fully not visible now.
      // Reset it to safe defaults.
      return resetStateToDefault();
    }
  }

  function validateState() {
    const isValid = state && (hasBounds() || state.isMaximized || state.isFullScreen);
    if (!isValid) {
      state = null;
      return;
    }

    if (hasBounds() && state.displayBounds) {
      ensureWindowVisibleOnSomeDisplay();
    }
  }

  function updateState(win) {
    win = win || winRef;
    if (!win) {
      return;
    }
    // Don't throw an error when window was closed
    try {
      const winBounds = win.getBounds();
      if (isNormal(win)) {
        state.x = winBounds.x;
        state.y = winBounds.y;
        state.width = winBounds.width;
        state.height = winBounds.height;
      }
      state.isMaximized = win.isMaximized();
      state.isFullScreen = win.isFullScreen();
      state.displayBounds = screen.getDisplayMatching(winBounds).bounds;
    } catch (err) {}
  }

  function saveState(win) {
    // Update window state only if it was provided
    if (win) {
      updateState(win);
    }

    // Save state
    try {
      mkdirp.sync(path.dirname(fullStoreFileName));
      jsonfile.writeFileSync(fullStoreFileName, state);
    } catch (err) {
      // Don't care
    }
  }

  function stateChangeHandler() {
    // Handles both 'resize' and 'move'
    clearTimeout(stateChangeTimer);
    stateChangeTimer = setTimeout(updateState, eventHandlingDelay);
  }

  function closeHandler() {
    updateState();
  }

  function closedHandler() {
    // Unregister listeners and save state
    unmanage();
    saveState();
  }

  function manage(win) {
    if (config.maximize && state.isMaximized) {
      win.maximize();
    }
    if (config.fullScreen && state.isFullScreen) {
      win.setFullScreen(true);
    }
    win.on('resize', stateChangeHandler);
    win.on('move', stateChangeHandler);
    win.on('close', closeHandler);
    win.on('closed', closedHandler);
    winRef = win;
  }

  function unmanage() {
    if (winRef) {
      winRef.removeListener('resize', stateChangeHandler);
      winRef.removeListener('move', stateChangeHandler);
      clearTimeout(stateChangeTimer);
      winRef.removeListener('close', closeHandler);
      winRef.removeListener('closed', closedHandler);
      winRef = null;
    }
  }

  // Load previous state
  try {
    state = jsonfile.readFileSync(fullStoreFileName);
  } catch (err) {
    // Don't care
  }

  // Check state validity
  validateState();

  // Set state fallback values
  state = Object.assign({
    width: config.defaultWidth || 800,
    height: config.defaultHeight || 600
  }, state);

  return {
    get x() { return state.x; },
    get y() { return state.y; },
    get width() { return state.width; },
    get height() { return state.height; },
    get displayBounds() { return state.displayBounds; },
    get isMaximized() { return state.isMaximized; },
    get isFullScreen() { return state.isFullScreen; },
    saveState,
    unmanage,
    manage,
    resetStateToDefault
  };
};


/***/ }),

/***/ "./node_modules/graceful-fs/clone.js":
/*!*******************************************!*\
  !*** ./node_modules/graceful-fs/clone.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


module.exports = clone

var getPrototypeOf = Object.getPrototypeOf || function (obj) {
  return obj.__proto__
}

function clone (obj) {
  if (obj === null || typeof obj !== 'object')
    return obj

  if (obj instanceof Object)
    var copy = { __proto__: getPrototypeOf(obj) }
  else
    var copy = Object.create(null)

  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
  })

  return copy
}


/***/ }),

/***/ "./node_modules/graceful-fs/graceful-fs.js":
/*!*************************************************!*\
  !*** ./node_modules/graceful-fs/graceful-fs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fs = __webpack_require__(/*! fs */ "fs")
var polyfills = __webpack_require__(/*! ./polyfills.js */ "./node_modules/graceful-fs/polyfills.js")
var legacy = __webpack_require__(/*! ./legacy-streams.js */ "./node_modules/graceful-fs/legacy-streams.js")
var clone = __webpack_require__(/*! ./clone.js */ "./node_modules/graceful-fs/clone.js")

var util = __webpack_require__(/*! util */ "util")

/* istanbul ignore next - node 0.x polyfill */
var gracefulQueue
var previousSymbol

/* istanbul ignore else - node 0.x polyfill */
if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
  gracefulQueue = Symbol.for('graceful-fs.queue')
  // This is used in testing by future versions
  previousSymbol = Symbol.for('graceful-fs.previous')
} else {
  gracefulQueue = '___graceful-fs.queue'
  previousSymbol = '___graceful-fs.previous'
}

function noop () {}

function publishQueue(context, queue) {
  Object.defineProperty(context, gracefulQueue, {
    get: function() {
      return queue
    }
  })
}

var debug = noop
if (util.debuglog)
  debug = util.debuglog('gfs4')
else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
  debug = function() {
    var m = util.format.apply(util, arguments)
    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
    console.error(m)
  }

// Once time initialization
if (!fs[gracefulQueue]) {
  // This queue can be shared by multiple loaded instances
  var queue = global[gracefulQueue] || []
  publishQueue(fs, queue)

  // Patch fs.close/closeSync to shared queue version, because we need
  // to retry() whenever a close happens *anywhere* in the program.
  // This is essential when multiple graceful-fs instances are
  // in play at the same time.
  fs.close = (function (fs$close) {
    function close (fd, cb) {
      return fs$close.call(fs, fd, function (err) {
        // This function uses the graceful-fs shared queue
        if (!err) {
          resetQueue()
        }

        if (typeof cb === 'function')
          cb.apply(this, arguments)
      })
    }

    Object.defineProperty(close, previousSymbol, {
      value: fs$close
    })
    return close
  })(fs.close)

  fs.closeSync = (function (fs$closeSync) {
    function closeSync (fd) {
      // This function uses the graceful-fs shared queue
      fs$closeSync.apply(fs, arguments)
      resetQueue()
    }

    Object.defineProperty(closeSync, previousSymbol, {
      value: fs$closeSync
    })
    return closeSync
  })(fs.closeSync)

  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
    process.on('exit', function() {
      debug(fs[gracefulQueue])
      __webpack_require__(/*! assert */ "assert").equal(fs[gracefulQueue].length, 0)
    })
  }
}

if (!global[gracefulQueue]) {
  publishQueue(global, fs[gracefulQueue]);
}

module.exports = patch(clone(fs))
if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
    module.exports = patch(fs)
    fs.__patched = true;
}

function patch (fs) {
  // Everything that references the open() function needs to be in here
  polyfills(fs)
  fs.gracefulify = patch

  fs.createReadStream = createReadStream
  fs.createWriteStream = createWriteStream
  var fs$readFile = fs.readFile
  fs.readFile = readFile
  function readFile (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$readFile(path, options, cb)

    function go$readFile (path, options, cb, startTime) {
      return fs$readFile(path, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$writeFile = fs.writeFile
  fs.writeFile = writeFile
  function writeFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$writeFile(path, data, options, cb)

    function go$writeFile (path, data, options, cb, startTime) {
      return fs$writeFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$appendFile = fs.appendFile
  if (fs$appendFile)
    fs.appendFile = appendFile
  function appendFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$appendFile(path, data, options, cb)

    function go$appendFile (path, data, options, cb, startTime) {
      return fs$appendFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$copyFile = fs.copyFile
  if (fs$copyFile)
    fs.copyFile = copyFile
  function copyFile (src, dest, flags, cb) {
    if (typeof flags === 'function') {
      cb = flags
      flags = 0
    }
    return go$copyFile(src, dest, flags, cb)

    function go$copyFile (src, dest, flags, cb, startTime) {
      return fs$copyFile(src, dest, flags, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  var fs$readdir = fs.readdir
  fs.readdir = readdir
  var noReaddirOptionVersions = /^v[0-5]\./
  function readdir (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    var go$readdir = noReaddirOptionVersions.test(process.version)
      ? function go$readdir (path, options, cb, startTime) {
        return fs$readdir(path, fs$readdirCallback(
          path, options, cb, startTime
        ))
      }
      : function go$readdir (path, options, cb, startTime) {
        return fs$readdir(path, options, fs$readdirCallback(
          path, options, cb, startTime
        ))
      }

    return go$readdir(path, options, cb)

    function fs$readdirCallback (path, options, cb, startTime) {
      return function (err, files) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([
            go$readdir,
            [path, options, cb],
            err,
            startTime || Date.now(),
            Date.now()
          ])
        else {
          if (files && files.sort)
            files.sort()

          if (typeof cb === 'function')
            cb.call(this, err, files)
        }
      }
    }
  }

  if (process.version.substr(0, 4) === 'v0.8') {
    var legStreams = legacy(fs)
    ReadStream = legStreams.ReadStream
    WriteStream = legStreams.WriteStream
  }

  var fs$ReadStream = fs.ReadStream
  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype)
    ReadStream.prototype.open = ReadStream$open
  }

  var fs$WriteStream = fs.WriteStream
  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype)
    WriteStream.prototype.open = WriteStream$open
  }

  Object.defineProperty(fs, 'ReadStream', {
    get: function () {
      return ReadStream
    },
    set: function (val) {
      ReadStream = val
    },
    enumerable: true,
    configurable: true
  })
  Object.defineProperty(fs, 'WriteStream', {
    get: function () {
      return WriteStream
    },
    set: function (val) {
      WriteStream = val
    },
    enumerable: true,
    configurable: true
  })

  // legacy names
  var FileReadStream = ReadStream
  Object.defineProperty(fs, 'FileReadStream', {
    get: function () {
      return FileReadStream
    },
    set: function (val) {
      FileReadStream = val
    },
    enumerable: true,
    configurable: true
  })
  var FileWriteStream = WriteStream
  Object.defineProperty(fs, 'FileWriteStream', {
    get: function () {
      return FileWriteStream
    },
    set: function (val) {
      FileWriteStream = val
    },
    enumerable: true,
    configurable: true
  })

  function ReadStream (path, options) {
    if (this instanceof ReadStream)
      return fs$ReadStream.apply(this, arguments), this
    else
      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
  }

  function ReadStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        if (that.autoClose)
          that.destroy()

        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
        that.read()
      }
    })
  }

  function WriteStream (path, options) {
    if (this instanceof WriteStream)
      return fs$WriteStream.apply(this, arguments), this
    else
      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
  }

  function WriteStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        that.destroy()
        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
      }
    })
  }

  function createReadStream (path, options) {
    return new fs.ReadStream(path, options)
  }

  function createWriteStream (path, options) {
    return new fs.WriteStream(path, options)
  }

  var fs$open = fs.open
  fs.open = open
  function open (path, flags, mode, cb) {
    if (typeof mode === 'function')
      cb = mode, mode = null

    return go$open(path, flags, mode, cb)

    function go$open (path, flags, mode, cb, startTime) {
      return fs$open(path, flags, mode, function (err, fd) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
        }
      })
    }
  }

  return fs
}

function enqueue (elem) {
  debug('ENQUEUE', elem[0].name, elem[1])
  fs[gracefulQueue].push(elem)
  retry()
}

// keep track of the timeout between retry() calls
var retryTimer

// reset the startTime and lastTime to now
// this resets the start of the 60 second overall timeout as well as the
// delay between attempts so that we'll retry these jobs sooner
function resetQueue () {
  var now = Date.now()
  for (var i = 0; i < fs[gracefulQueue].length; ++i) {
    // entries that are only a length of 2 are from an older version, don't
    // bother modifying those since they'll be retried anyway.
    if (fs[gracefulQueue][i].length > 2) {
      fs[gracefulQueue][i][3] = now // startTime
      fs[gracefulQueue][i][4] = now // lastTime
    }
  }
  // call retry to make sure we're actively processing the queue
  retry()
}

function retry () {
  // clear the timer and remove it to help prevent unintended concurrency
  clearTimeout(retryTimer)
  retryTimer = undefined

  if (fs[gracefulQueue].length === 0)
    return

  var elem = fs[gracefulQueue].shift()
  var fn = elem[0]
  var args = elem[1]
  // these items may be unset if they were added by an older graceful-fs
  var err = elem[2]
  var startTime = elem[3]
  var lastTime = elem[4]

  // if we don't have a startTime we have no way of knowing if we've waited
  // long enough, so go ahead and retry this item now
  if (startTime === undefined) {
    debug('RETRY', fn.name, args)
    fn.apply(null, args)
  } else if (Date.now() - startTime >= 60000) {
    // it's been more than 60 seconds total, bail now
    debug('TIMEOUT', fn.name, args)
    var cb = args.pop()
    if (typeof cb === 'function')
      cb.call(null, err)
  } else {
    // the amount of time between the last attempt and right now
    var sinceAttempt = Date.now() - lastTime
    // the amount of time between when we first tried, and when we last tried
    // rounded up to at least 1
    var sinceStart = Math.max(lastTime - startTime, 1)
    // backoff. wait longer than the total time we've been retrying, but only
    // up to a maximum of 100ms
    var desiredDelay = Math.min(sinceStart * 1.2, 100)
    // it's been long enough since the last retry, do it again
    if (sinceAttempt >= desiredDelay) {
      debug('RETRY', fn.name, args)
      fn.apply(null, args.concat([startTime]))
    } else {
      // if we can't do this job yet, push it to the end of the queue
      // and let the next iteration check again
      fs[gracefulQueue].push(elem)
    }
  }

  // schedule our next run if one isn't already scheduled
  if (retryTimer === undefined) {
    retryTimer = setTimeout(retry, 0)
  }
}


/***/ }),

/***/ "./node_modules/graceful-fs/legacy-streams.js":
/*!****************************************************!*\
  !*** ./node_modules/graceful-fs/legacy-streams.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stream = (__webpack_require__(/*! stream */ "stream").Stream)

module.exports = legacy

function legacy (fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream
  }

  function ReadStream (path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

    Stream.call(this);

    var self = this;

    this.path = path;
    this.fd = null;
    this.readable = true;
    this.paused = false;

    this.flags = 'r';
    this.mode = 438; /*=0666*/
    this.bufferSize = 64 * 1024;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.encoding) this.setEncoding(this.encoding);

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.end === undefined) {
        this.end = Infinity;
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number');
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end');
      }

      this.pos = this.start;
    }

    if (this.fd !== null) {
      process.nextTick(function() {
        self._read();
      });
      return;
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err);
        self.readable = false;
        return;
      }

      self.fd = fd;
      self.emit('open', fd);
      self._read();
    })
  }

  function WriteStream (path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

    Stream.call(this);

    this.path = path;
    this.fd = null;
    this.writable = true;

    this.flags = 'w';
    this.encoding = 'binary';
    this.mode = 438; /*=0666*/
    this.bytesWritten = 0;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.start < 0) {
        throw new Error('start must be >= zero');
      }

      this.pos = this.start;
    }

    this.busy = false;
    this._queue = [];

    if (this.fd === null) {
      this._open = fs.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
      this.flush();
    }
  }
}


/***/ }),

/***/ "./node_modules/graceful-fs/polyfills.js":
/*!***********************************************!*\
  !*** ./node_modules/graceful-fs/polyfills.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var constants = __webpack_require__(/*! constants */ "constants")

var origCwd = process.cwd
var cwd = null

var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

process.cwd = function() {
  if (!cwd)
    cwd = origCwd.call(process)
  return cwd
}
try {
  process.cwd()
} catch (er) {}

// This check is needed until node.js 12 is required
if (typeof process.chdir === 'function') {
  var chdir = process.chdir
  process.chdir = function (d) {
    cwd = null
    chdir.call(process, d)
  }
  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir)
}

module.exports = patch

function patch (fs) {
  // (re-)implement some things that are known busted or missing.

  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (constants.hasOwnProperty('O_SYMLINK') &&
      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs)
  }

  // lutimes implementation, or no-op
  if (!fs.lutimes) {
    patchLutimes(fs)
  }

  // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.

  fs.chown = chownFix(fs.chown)
  fs.fchown = chownFix(fs.fchown)
  fs.lchown = chownFix(fs.lchown)

  fs.chmod = chmodFix(fs.chmod)
  fs.fchmod = chmodFix(fs.fchmod)
  fs.lchmod = chmodFix(fs.lchmod)

  fs.chownSync = chownFixSync(fs.chownSync)
  fs.fchownSync = chownFixSync(fs.fchownSync)
  fs.lchownSync = chownFixSync(fs.lchownSync)

  fs.chmodSync = chmodFixSync(fs.chmodSync)
  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
  fs.lchmodSync = chmodFixSync(fs.lchmodSync)

  fs.stat = statFix(fs.stat)
  fs.fstat = statFix(fs.fstat)
  fs.lstat = statFix(fs.lstat)

  fs.statSync = statFixSync(fs.statSync)
  fs.fstatSync = statFixSync(fs.fstatSync)
  fs.lstatSync = statFixSync(fs.lstatSync)

  // if lchmod/lchown do not exist, then make them no-ops
  if (fs.chmod && !fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchmodSync = function () {}
  }
  if (fs.chown && !fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchownSync = function () {}
  }

  // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.

  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.
  if (platform === "win32") {
    fs.rename = typeof fs.rename !== 'function' ? fs.rename
    : (function (fs$rename) {
      function rename (from, to, cb) {
        var start = Date.now()
        var backoff = 0;
        fs$rename(from, to, function CB (er) {
          if (er
              && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY")
              && Date.now() - start < 60000) {
            setTimeout(function() {
              fs.stat(to, function (stater, st) {
                if (stater && stater.code === "ENOENT")
                  fs$rename(from, to, CB);
                else
                  cb(er)
              })
            }, backoff)
            if (backoff < 100)
              backoff += 10;
            return;
          }
          if (cb) cb(er)
        })
      }
      if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename)
      return rename
    })(fs.rename)
  }

  // if read() returns EAGAIN, then just try it again.
  fs.read = typeof fs.read !== 'function' ? fs.read
  : (function (fs$read) {
    function read (fd, buffer, offset, length, position, callback_) {
      var callback
      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0
        callback = function (er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter ++
            return fs$read.call(fs, fd, buffer, offset, length, position, callback)
          }
          callback_.apply(this, arguments)
        }
      }
      return fs$read.call(fs, fd, buffer, offset, length, position, callback)
    }

    // This ensures `util.promisify` works as it does for native `fs.read`.
    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read)
    return read
  })(fs.read)

  fs.readSync = typeof fs.readSync !== 'function' ? fs.readSync
  : (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
    var eagCounter = 0
    while (true) {
      try {
        return fs$readSync.call(fs, fd, buffer, offset, length, position)
      } catch (er) {
        if (er.code === 'EAGAIN' && eagCounter < 10) {
          eagCounter ++
          continue
        }
        throw er
      }
    }
  }})(fs.readSync)

  function patchLchmod (fs) {
    fs.lchmod = function (path, mode, callback) {
      fs.open( path
             , constants.O_WRONLY | constants.O_SYMLINK
             , mode
             , function (err, fd) {
        if (err) {
          if (callback) callback(err)
          return
        }
        // prefer to return the chmod error, if one occurs,
        // but still try to close, and report closing errors if they occur.
        fs.fchmod(fd, mode, function (err) {
          fs.close(fd, function(err2) {
            if (callback) callback(err || err2)
          })
        })
      })
    }

    fs.lchmodSync = function (path, mode) {
      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)

      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      var threw = true
      var ret
      try {
        ret = fs.fchmodSync(fd, mode)
        threw = false
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd)
          } catch (er) {}
        } else {
          fs.closeSync(fd)
        }
      }
      return ret
    }
  }

  function patchLutimes (fs) {
    if (constants.hasOwnProperty("O_SYMLINK") && fs.futimes) {
      fs.lutimes = function (path, at, mt, cb) {
        fs.open(path, constants.O_SYMLINK, function (er, fd) {
          if (er) {
            if (cb) cb(er)
            return
          }
          fs.futimes(fd, at, mt, function (er) {
            fs.close(fd, function (er2) {
              if (cb) cb(er || er2)
            })
          })
        })
      }

      fs.lutimesSync = function (path, at, mt) {
        var fd = fs.openSync(path, constants.O_SYMLINK)
        var ret
        var threw = true
        try {
          ret = fs.futimesSync(fd, at, mt)
          threw = false
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd)
            } catch (er) {}
          } else {
            fs.closeSync(fd)
          }
        }
        return ret
      }

    } else if (fs.futimes) {
      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
      fs.lutimesSync = function () {}
    }
  }

  function chmodFix (orig) {
    if (!orig) return orig
    return function (target, mode, cb) {
      return orig.call(fs, target, mode, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chmodFixSync (orig) {
    if (!orig) return orig
    return function (target, mode) {
      try {
        return orig.call(fs, target, mode)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function chownFix (orig) {
    if (!orig) return orig
    return function (target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chownFixSync (orig) {
    if (!orig) return orig
    return function (target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }

  function statFix (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options, cb) {
      if (typeof options === 'function') {
        cb = options
        options = null
      }
      function callback (er, stats) {
        if (stats) {
          if (stats.uid < 0) stats.uid += 0x100000000
          if (stats.gid < 0) stats.gid += 0x100000000
        }
        if (cb) cb.apply(this, arguments)
      }
      return options ? orig.call(fs, target, options, callback)
        : orig.call(fs, target, callback)
    }
  }

  function statFixSync (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options) {
      var stats = options ? orig.call(fs, target, options)
        : orig.call(fs, target)
      if (stats) {
        if (stats.uid < 0) stats.uid += 0x100000000
        if (stats.gid < 0) stats.gid += 0x100000000
      }
      return stats;
    }
  }

  // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.
  function chownErOk (er) {
    if (!er)
      return true

    if (er.code === "ENOSYS")
      return true

    var nonroot = !process.getuid || process.getuid() !== 0
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true
    }

    return false
  }
}


/***/ }),

/***/ "./node_modules/has-flag/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-flag/index.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


module.exports = (flag, argv = process.argv) => {
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const position = argv.indexOf(prefix + flag);
	const terminatorPosition = argv.indexOf('--');
	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};


/***/ }),

/***/ "./node_modules/http-status-codes/build/es/status-codes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/http-status-codes/build/es/status-codes.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StatusCodes: () => (/* binding */ StatusCodes)
/* harmony export */ });
// Generated file. Do not edit
var StatusCodes;
(function (StatusCodes) {
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.2.1
     *
     * This interim response indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished.
     */
    StatusCodes[StatusCodes["CONTINUE"] = 100] = "CONTINUE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.2.2
     *
     * This code is sent in response to an Upgrade request header by the client, and indicates the protocol the server is switching too.
     */
    StatusCodes[StatusCodes["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.1
     *
     * This code indicates that the server has received and is processing the request, but no response is available yet.
     */
    StatusCodes[StatusCodes["PROCESSING"] = 102] = "PROCESSING";
    /**
     * Official Documentation @ https://www.rfc-editor.org/rfc/rfc8297#page-3
     *
     * This code indicates to the client that the server is likely to send a final response with the header fields included in the informational response.
     */
    StatusCodes[StatusCodes["EARLY_HINTS"] = 103] = "EARLY_HINTS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.1
     *
     * The request has succeeded. The meaning of a success varies depending on the HTTP method:
     * GET: The resource has been fetched and is transmitted in the message body.
     * HEAD: The entity headers are in the message body.
     * POST: The resource describing the result of the action is transmitted in the message body.
     * TRACE: The message body contains the request message as received by the server
     */
    StatusCodes[StatusCodes["OK"] = 200] = "OK";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.2
     *
     * The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request.
     */
    StatusCodes[StatusCodes["CREATED"] = 201] = "CREATED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.3
     *
     * The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing.
     */
    StatusCodes[StatusCodes["ACCEPTED"] = 202] = "ACCEPTED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.4
     *
     * This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response.
     */
    StatusCodes[StatusCodes["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.5
     *
     * There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
     */
    StatusCodes[StatusCodes["NO_CONTENT"] = 204] = "NO_CONTENT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.6
     *
     * This response code is sent after accomplishing request to tell user agent reset document view which sent this request.
     */
    StatusCodes[StatusCodes["RESET_CONTENT"] = 205] = "RESET_CONTENT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7233#section-4.1
     *
     * This response code is used because of range header sent by the client to separate download into multiple streams.
     */
    StatusCodes[StatusCodes["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.2
     *
     * A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.
     */
    StatusCodes[StatusCodes["MULTI_STATUS"] = 207] = "MULTI_STATUS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.1
     *
     * The request has more than one possible responses. User-agent or user should choose one of them. There is no standardized way to choose one of the responses.
     */
    StatusCodes[StatusCodes["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.2
     *
     * This response code means that URI of requested resource has been changed. Probably, new URI would be given in the response.
     */
    StatusCodes[StatusCodes["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.3
     *
     * This response code means that URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.
     */
    StatusCodes[StatusCodes["MOVED_TEMPORARILY"] = 302] = "MOVED_TEMPORARILY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.4
     *
     * Server sent this response to directing client to get requested resource to another URI with an GET request.
     */
    StatusCodes[StatusCodes["SEE_OTHER"] = 303] = "SEE_OTHER";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7232#section-4.1
     *
     * This is used for caching purposes. It is telling to client that response has not been modified. So, client can continue to use same cached version of response.
     */
    StatusCodes[StatusCodes["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
    /**
     * @deprecated
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.6
     *
     * Was defined in a previous version of the HTTP specification to indicate that a requested response must be accessed by a proxy. It has been deprecated due to security concerns regarding in-band configuration of a proxy.
     */
    StatusCodes[StatusCodes["USE_PROXY"] = 305] = "USE_PROXY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.7
     *
     * Server sent this response to directing client to get requested resource to another URI with same method that used prior request. This has the same semantic than the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.
     */
    StatusCodes[StatusCodes["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7538#section-3
     *
     * This means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.
     */
    StatusCodes[StatusCodes["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.1
     *
     * This response means that server could not understand the request due to invalid syntax.
     */
    StatusCodes[StatusCodes["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7235#section-3.1
     *
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    StatusCodes[StatusCodes["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.2
     *
     * This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems however this is not used currently.
     */
    StatusCodes[StatusCodes["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.3
     *
     * The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike 401, the client's identity is known to the server.
     */
    StatusCodes[StatusCodes["FORBIDDEN"] = 403] = "FORBIDDEN";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.4
     *
     * The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
     */
    StatusCodes[StatusCodes["NOT_FOUND"] = 404] = "NOT_FOUND";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.5
     *
     * The request method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code.
     */
    StatusCodes[StatusCodes["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.6
     *
     * This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content following the criteria given by the user agent.
     */
    StatusCodes[StatusCodes["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7235#section-3.2
     *
     * This is similar to 401 but authentication is needed to be done by a proxy.
     */
    StatusCodes[StatusCodes["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.7
     *
     * This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message.
     */
    StatusCodes[StatusCodes["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.8
     *
     * This response is sent when a request conflicts with the current state of the server.
     */
    StatusCodes[StatusCodes["CONFLICT"] = 409] = "CONFLICT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.9
     *
     * This response would be sent when the requested content has been permenantly deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for "limited-time, promotional services". APIs should not feel compelled to indicate resources that have been deleted with this status code.
     */
    StatusCodes[StatusCodes["GONE"] = 410] = "GONE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.10
     *
     * The server rejected the request because the Content-Length header field is not defined and the server requires it.
     */
    StatusCodes[StatusCodes["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7232#section-4.2
     *
     * The client has indicated preconditions in its headers which the server does not meet.
     */
    StatusCodes[StatusCodes["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.11
     *
     * Request entity is larger than limits defined by server; the server might close the connection or return an Retry-After header field.
     */
    StatusCodes[StatusCodes["REQUEST_TOO_LONG"] = 413] = "REQUEST_TOO_LONG";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.12
     *
     * The URI requested by the client is longer than the server is willing to interpret.
     */
    StatusCodes[StatusCodes["REQUEST_URI_TOO_LONG"] = 414] = "REQUEST_URI_TOO_LONG";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.13
     *
     * The media format of the requested data is not supported by the server, so the server is rejecting the request.
     */
    StatusCodes[StatusCodes["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7233#section-4.4
     *
     * The range specified by the Range header field in the request can't be fulfilled; it's possible that the range is outside the size of the target URI's data.
     */
    StatusCodes[StatusCodes["REQUESTED_RANGE_NOT_SATISFIABLE"] = 416] = "REQUESTED_RANGE_NOT_SATISFIABLE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.14
     *
     * This response code means the expectation indicated by the Expect request header field can't be met by the server.
     */
    StatusCodes[StatusCodes["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2324#section-2.3.2
     *
     * Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout.
     */
    StatusCodes[StatusCodes["IM_A_TEAPOT"] = 418] = "IM_A_TEAPOT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.6
     *
     * The 507 (Insufficient Storage) status code means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. This condition is considered to be temporary. If the request which received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.
     */
    StatusCodes[StatusCodes["INSUFFICIENT_SPACE_ON_RESOURCE"] = 419] = "INSUFFICIENT_SPACE_ON_RESOURCE";
    /**
     * @deprecated
     * Official Documentation @ https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt
     *
     * A deprecated response used by the Spring Framework when a method has failed.
     */
    StatusCodes[StatusCodes["METHOD_FAILURE"] = 420] = "METHOD_FAILURE";
    /**
     * Official Documentation @ https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.2
     *
     * Defined in the specification of HTTP/2 to indicate that a server is not able to produce a response for the combination of scheme and authority that are included in the request URI.
     */
    StatusCodes[StatusCodes["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.3
     *
     * The request was well-formed but was unable to be followed due to semantic errors.
     */
    StatusCodes[StatusCodes["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.4
     *
     * The resource that is being accessed is locked.
     */
    StatusCodes[StatusCodes["LOCKED"] = 423] = "LOCKED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.5
     *
     * The request failed due to failure of a previous request.
     */
    StatusCodes[StatusCodes["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
    /**
     * Official Documentation @ https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.15
     *
     * The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol.
     */
    StatusCodes[StatusCodes["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-3
     *
     * The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.
     */
    StatusCodes[StatusCodes["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-4
     *
     * The user has sent too many requests in a given amount of time ("rate limiting").
     */
    StatusCodes[StatusCodes["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-5
     *
     * The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.
     */
    StatusCodes[StatusCodes["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7725
     *
     * The user-agent requested a resource that cannot legally be provided, such as a web page censored by a government.
     */
    StatusCodes[StatusCodes["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.1
     *
     * The server encountered an unexpected condition that prevented it from fulfilling the request.
     */
    StatusCodes[StatusCodes["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.2
     *
     * The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.
     */
    StatusCodes[StatusCodes["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.3
     *
     * This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.
     */
    StatusCodes[StatusCodes["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.4
     *
     * The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached.
     */
    StatusCodes[StatusCodes["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.5
     *
     * This error response is given when the server is acting as a gateway and cannot get a response in time.
     */
    StatusCodes[StatusCodes["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.6
     *
     * The HTTP version used in the request is not supported by the server.
     */
    StatusCodes[StatusCodes["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.6
     *
     * The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.
     */
    StatusCodes[StatusCodes["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-6
     *
     * The 511 status code indicates that the client needs to authenticate to gain network access.
     */
    StatusCodes[StatusCodes["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(StatusCodes || (StatusCodes = {}));


/***/ }),

/***/ "./node_modules/imurmurhash/imurmurhash.js":
/*!*************************************************!*\
  !*** ./node_modules/imurmurhash/imurmurhash.js ***!
  \*************************************************/
/***/ ((module) => {

/**
 * @preserve
 * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
 *
 * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
 * @see http://github.com/homebrewing/brauhaus-diff
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 */
(function(){
    var cache;

    // Call this function without `new` to use the cached object (good for
    // single-threaded environments), or with `new` to create a new object.
    //
    // @param {string} key A UTF-16 or ASCII string
    // @param {number} seed An optional positive integer
    // @return {object} A MurmurHash3 object for incremental hashing
    function MurmurHash3(key, seed) {
        var m = this instanceof MurmurHash3 ? this : cache;
        m.reset(seed)
        if (typeof key === 'string' && key.length > 0) {
            m.hash(key);
        }

        if (m !== this) {
            return m;
        }
    };

    // Incrementally add a string to this hash
    //
    // @param {string} key A UTF-16 or ASCII string
    // @return {object} this
    MurmurHash3.prototype.hash = function(key) {
        var h1, k1, i, top, len;

        len = key.length;
        this.len += len;

        k1 = this.k1;
        i = 0;
        switch (this.rem) {
            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;
            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;
            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;
            case 3:
                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;
                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;
        }

        this.rem = (len + this.rem) & 3; // & 3 is same as % 4
        len -= this.rem;
        if (len > 0) {
            h1 = this.h1;
            while (1) {
                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;
                k1 = (k1 << 15) | (k1 >>> 17);
                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;

                h1 ^= k1;
                h1 = (h1 << 13) | (h1 >>> 19);
                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;

                if (i >= len) {
                    break;
                }

                k1 = ((key.charCodeAt(i++) & 0xffff)) ^
                     ((key.charCodeAt(i++) & 0xffff) << 8) ^
                     ((key.charCodeAt(i++) & 0xffff) << 16);
                top = key.charCodeAt(i++);
                k1 ^= ((top & 0xff) << 24) ^
                      ((top & 0xff00) >> 8);
            }

            k1 = 0;
            switch (this.rem) {
                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;
                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;
                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);
            }

            this.h1 = h1;
        }

        this.k1 = k1;
        return this;
    };

    // Get the result of this hash
    //
    // @return {number} The 32-bit hash
    MurmurHash3.prototype.result = function() {
        var k1, h1;
        
        k1 = this.k1;
        h1 = this.h1;

        if (k1 > 0) {
            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;
            h1 ^= k1;
        }

        h1 ^= this.len;

        h1 ^= h1 >>> 16;
        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;
        h1 ^= h1 >>> 13;
        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;
        h1 ^= h1 >>> 16;

        return h1 >>> 0;
    };

    // Reset the hash object for reuse
    //
    // @param {number} seed An optional positive integer
    MurmurHash3.prototype.reset = function(seed) {
        this.h1 = typeof seed === 'number' ? seed : 0;
        this.rem = this.k1 = this.len = 0;
        return this;
    };

    // A cached object to use. This can be safely used if you're in a single-
    // threaded environment, otherwise you need to create new hashes to use.
    cache = new MurmurHash3();

    if (true) {
        module.exports = MurmurHash3;
    } else {}
}());


/***/ }),

/***/ "./node_modules/json-rpc-2.0/dist/client.js":
/*!**************************************************!*\
  !*** ./node_modules/json-rpc-2.0/dist/client.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONRPCClient = void 0;
var models_1 = __webpack_require__(/*! ./models */ "./node_modules/json-rpc-2.0/dist/models.js");
var internal_1 = __webpack_require__(/*! ./internal */ "./node_modules/json-rpc-2.0/dist/internal.js");
var JSONRPCClient = /** @class */ (function () {
    function JSONRPCClient(_send, createID) {
        this._send = _send;
        this.createID = createID;
        this.idToResolveMap = new Map();
        this.id = 0;
    }
    JSONRPCClient.prototype._createID = function () {
        if (this.createID) {
            return this.createID();
        }
        else {
            return ++this.id;
        }
    };
    JSONRPCClient.prototype.timeout = function (delay, overrideCreateJSONRPCErrorResponse) {
        var _this = this;
        if (overrideCreateJSONRPCErrorResponse === void 0) { overrideCreateJSONRPCErrorResponse = function (id) {
            return (0, models_1.createJSONRPCErrorResponse)(id, internal_1.DefaultErrorCode, "Request timeout");
        }; }
        var timeoutRequest = function (ids, request) {
            var timeoutID = setTimeout(function () {
                ids.forEach(function (id) {
                    var resolve = _this.idToResolveMap.get(id);
                    if (resolve) {
                        _this.idToResolveMap.delete(id);
                        resolve(overrideCreateJSONRPCErrorResponse(id));
                    }
                });
            }, delay);
            return request().then(function (result) {
                clearTimeout(timeoutID);
                return result;
            }, function (error) {
                clearTimeout(timeoutID);
                return Promise.reject(error);
            });
        };
        var requestAdvanced = function (request, clientParams) {
            var ids = (!Array.isArray(request) ? [request] : request)
                .map(function (request) { return request.id; })
                .filter(isDefinedAndNonNull);
            return timeoutRequest(ids, function () {
                return _this.requestAdvanced(request, clientParams);
            });
        };
        return {
            request: function (method, params, clientParams) {
                var id = _this._createID();
                return timeoutRequest([id], function () {
                    return _this.requestWithID(method, params, clientParams, id);
                });
            },
            requestAdvanced: function (request, clientParams) { return requestAdvanced(request, clientParams); },
        };
    };
    JSONRPCClient.prototype.request = function (method, params, clientParams) {
        return this.requestWithID(method, params, clientParams, this._createID());
    };
    JSONRPCClient.prototype.requestWithID = function (method, params, clientParams, id) {
        return __awaiter(this, void 0, void 0, function () {
            var request, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = (0, models_1.createJSONRPCRequest)(id, method, params);
                        return [4 /*yield*/, this.requestAdvanced(request, clientParams)];
                    case 1:
                        response = _a.sent();
                        if (response.result !== undefined && !response.error) {
                            return [2 /*return*/, response.result];
                        }
                        else if (response.result === undefined && response.error) {
                            return [2 /*return*/, Promise.reject(new models_1.JSONRPCErrorException(response.error.message, response.error.code, response.error.data))];
                        }
                        else {
                            return [2 /*return*/, Promise.reject(new Error("An unexpected error occurred"))];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    JSONRPCClient.prototype.requestAdvanced = function (requests, clientParams) {
        var _this = this;
        var areRequestsOriginallyArray = Array.isArray(requests);
        if (!Array.isArray(requests)) {
            requests = [requests];
        }
        var requestsWithID = requests.filter(function (request) {
            return isDefinedAndNonNull(request.id);
        });
        var promises = requestsWithID.map(function (request) {
            return new Promise(function (resolve) { return _this.idToResolveMap.set(request.id, resolve); });
        });
        var promise = Promise.all(promises).then(function (responses) {
            if (areRequestsOriginallyArray || !responses.length) {
                return responses;
            }
            else {
                return responses[0];
            }
        });
        return this.send(areRequestsOriginallyArray ? requests : requests[0], clientParams).then(function () { return promise; }, function (error) {
            requestsWithID.forEach(function (request) {
                _this.receive((0, models_1.createJSONRPCErrorResponse)(request.id, internal_1.DefaultErrorCode, (error && error.message) || "Failed to send a request"));
            });
            return promise;
        });
    };
    JSONRPCClient.prototype.notify = function (method, params, clientParams) {
        var request = (0, models_1.createJSONRPCNotification)(method, params);
        this.send(request, clientParams).then(undefined, function () { return undefined; });
    };
    JSONRPCClient.prototype.send = function (payload, clientParams) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._send(payload, clientParams)];
            });
        });
    };
    JSONRPCClient.prototype.rejectAllPendingRequests = function (message) {
        this.idToResolveMap.forEach(function (resolve, id) {
            return resolve((0, models_1.createJSONRPCErrorResponse)(id, internal_1.DefaultErrorCode, message));
        });
        this.idToResolveMap.clear();
    };
    JSONRPCClient.prototype.receive = function (responses) {
        var _this = this;
        if (!Array.isArray(responses)) {
            responses = [responses];
        }
        responses.forEach(function (response) {
            var resolve = _this.idToResolveMap.get(response.id);
            if (resolve) {
                _this.idToResolveMap.delete(response.id);
                resolve(response);
            }
        });
    };
    return JSONRPCClient;
}());
exports.JSONRPCClient = JSONRPCClient;
var isDefinedAndNonNull = function (value) {
    return value !== undefined && value !== null;
};


/***/ }),

/***/ "./node_modules/json-rpc-2.0/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/json-rpc-2.0/dist/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./client */ "./node_modules/json-rpc-2.0/dist/client.js"), exports);
__exportStar(__webpack_require__(/*! ./interfaces */ "./node_modules/json-rpc-2.0/dist/interfaces.js"), exports);
__exportStar(__webpack_require__(/*! ./models */ "./node_modules/json-rpc-2.0/dist/models.js"), exports);
__exportStar(__webpack_require__(/*! ./server */ "./node_modules/json-rpc-2.0/dist/server.js"), exports);
__exportStar(__webpack_require__(/*! ./server-and-client */ "./node_modules/json-rpc-2.0/dist/server-and-client.js"), exports);


/***/ }),

/***/ "./node_modules/json-rpc-2.0/dist/interfaces.js":
/*!******************************************************!*\
  !*** ./node_modules/json-rpc-2.0/dist/interfaces.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./node_modules/json-rpc-2.0/dist/internal.js":
/*!****************************************************!*\
  !*** ./node_modules/json-rpc-2.0/dist/internal.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultErrorCode = void 0;
exports.DefaultErrorCode = 0;


/***/ }),

/***/ "./node_modules/json-rpc-2.0/dist/models.js":
/*!**************************************************!*\
  !*** ./node_modules/json-rpc-2.0/dist/models.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createJSONRPCNotification = exports.createJSONRPCRequest = exports.createJSONRPCSuccessResponse = exports.createJSONRPCErrorResponse = exports.JSONRPCErrorCode = exports.JSONRPCErrorException = exports.isJSONRPCResponses = exports.isJSONRPCResponse = exports.isJSONRPCRequests = exports.isJSONRPCRequest = exports.isJSONRPCID = exports.JSONRPC = void 0;
exports.JSONRPC = "2.0";
var isJSONRPCID = function (id) {
    return typeof id === "string" || typeof id === "number" || id === null;
};
exports.isJSONRPCID = isJSONRPCID;
var isJSONRPCRequest = function (payload) {
    return (payload.jsonrpc === exports.JSONRPC &&
        payload.method !== undefined &&
        payload.result === undefined &&
        payload.error === undefined);
};
exports.isJSONRPCRequest = isJSONRPCRequest;
var isJSONRPCRequests = function (payload) {
    return Array.isArray(payload) && payload.every(exports.isJSONRPCRequest);
};
exports.isJSONRPCRequests = isJSONRPCRequests;
var isJSONRPCResponse = function (payload) {
    return (payload.jsonrpc === exports.JSONRPC &&
        payload.id !== undefined &&
        (payload.result !== undefined || payload.error !== undefined));
};
exports.isJSONRPCResponse = isJSONRPCResponse;
var isJSONRPCResponses = function (payload) {
    return Array.isArray(payload) && payload.every(exports.isJSONRPCResponse);
};
exports.isJSONRPCResponses = isJSONRPCResponses;
var createJSONRPCError = function (code, message, data) {
    var error = { code: code, message: message };
    if (data != null) {
        error.data = data;
    }
    return error;
};
var JSONRPCErrorException = /** @class */ (function (_super) {
    __extends(JSONRPCErrorException, _super);
    function JSONRPCErrorException(message, code, data) {
        var _this = _super.call(this, message) || this;
        // Manually set the prototype to fix TypeScript issue:
        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, JSONRPCErrorException.prototype);
        _this.code = code;
        _this.data = data;
        return _this;
    }
    JSONRPCErrorException.prototype.toObject = function () {
        return createJSONRPCError(this.code, this.message, this.data);
    };
    return JSONRPCErrorException;
}(Error));
exports.JSONRPCErrorException = JSONRPCErrorException;
var JSONRPCErrorCode;
(function (JSONRPCErrorCode) {
    JSONRPCErrorCode[JSONRPCErrorCode["ParseError"] = -32700] = "ParseError";
    JSONRPCErrorCode[JSONRPCErrorCode["InvalidRequest"] = -32600] = "InvalidRequest";
    JSONRPCErrorCode[JSONRPCErrorCode["MethodNotFound"] = -32601] = "MethodNotFound";
    JSONRPCErrorCode[JSONRPCErrorCode["InvalidParams"] = -32602] = "InvalidParams";
    JSONRPCErrorCode[JSONRPCErrorCode["InternalError"] = -32603] = "InternalError";
})(JSONRPCErrorCode = exports.JSONRPCErrorCode || (exports.JSONRPCErrorCode = {}));
var createJSONRPCErrorResponse = function (id, code, message, data) {
    return {
        jsonrpc: exports.JSONRPC,
        id: id,
        error: createJSONRPCError(code, message, data),
    };
};
exports.createJSONRPCErrorResponse = createJSONRPCErrorResponse;
var createJSONRPCSuccessResponse = function (id, result) {
    return {
        jsonrpc: exports.JSONRPC,
        id: id,
        result: result !== null && result !== void 0 ? result : null,
    };
};
exports.createJSONRPCSuccessResponse = createJSONRPCSuccessResponse;
var createJSONRPCRequest = function (id, method, params) {
    return {
        jsonrpc: exports.JSONRPC,
        id: id,
        method: method,
        params: params,
    };
};
exports.createJSONRPCRequest = createJSONRPCRequest;
var createJSONRPCNotification = function (method, params) {
    return {
        jsonrpc: exports.JSONRPC,
        method: method,
        params: params,
    };
};
exports.createJSONRPCNotification = createJSONRPCNotification;


/***/ }),

/***/ "./node_modules/json-rpc-2.0/dist/server-and-client.js":
/*!*************************************************************!*\
  !*** ./node_modules/json-rpc-2.0/dist/server-and-client.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONRPCServerAndClient = void 0;
var models_1 = __webpack_require__(/*! ./models */ "./node_modules/json-rpc-2.0/dist/models.js");
var JSONRPCServerAndClient = /** @class */ (function () {
    function JSONRPCServerAndClient(server, client, options) {
        if (options === void 0) { options = {}; }
        var _a;
        this.server = server;
        this.client = client;
        this.errorListener = (_a = options.errorListener) !== null && _a !== void 0 ? _a : console.warn;
    }
    JSONRPCServerAndClient.prototype.applyServerMiddleware = function () {
        var _a;
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        (_a = this.server).applyMiddleware.apply(_a, middlewares);
    };
    JSONRPCServerAndClient.prototype.hasMethod = function (name) {
        return this.server.hasMethod(name);
    };
    JSONRPCServerAndClient.prototype.addMethod = function (name, method) {
        this.server.addMethod(name, method);
    };
    JSONRPCServerAndClient.prototype.addMethodAdvanced = function (name, method) {
        this.server.addMethodAdvanced(name, method);
    };
    JSONRPCServerAndClient.prototype.removeMethod = function (name) {
        this.server.removeMethod(name);
    };
    JSONRPCServerAndClient.prototype.timeout = function (delay) {
        return this.client.timeout(delay);
    };
    JSONRPCServerAndClient.prototype.request = function (method, params, clientParams) {
        return this.client.request(method, params, clientParams);
    };
    JSONRPCServerAndClient.prototype.requestAdvanced = function (jsonRPCRequest, clientParams) {
        return this.client.requestAdvanced(jsonRPCRequest, clientParams);
    };
    JSONRPCServerAndClient.prototype.notify = function (method, params, clientParams) {
        this.client.notify(method, params, clientParams);
    };
    JSONRPCServerAndClient.prototype.rejectAllPendingRequests = function (message) {
        this.client.rejectAllPendingRequests(message);
    };
    JSONRPCServerAndClient.prototype.receiveAndSend = function (payload, serverParams, clientParams) {
        return __awaiter(this, void 0, void 0, function () {
            var response, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!((0, models_1.isJSONRPCResponse)(payload) || (0, models_1.isJSONRPCResponses)(payload))) return [3 /*break*/, 1];
                        this.client.receive(payload);
                        return [3 /*break*/, 4];
                    case 1:
                        if (!((0, models_1.isJSONRPCRequest)(payload) || (0, models_1.isJSONRPCRequests)(payload))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.server.receive(payload, serverParams)];
                    case 2:
                        response = _a.sent();
                        if (response) {
                            return [2 /*return*/, this.client.send(response, clientParams)];
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        message = "Received an invalid JSON-RPC message";
                        this.errorListener(message, payload);
                        return [2 /*return*/, Promise.reject(new Error(message))];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return JSONRPCServerAndClient;
}());
exports.JSONRPCServerAndClient = JSONRPCServerAndClient;


/***/ }),

/***/ "./node_modules/json-rpc-2.0/dist/server.js":
/*!**************************************************!*\
  !*** ./node_modules/json-rpc-2.0/dist/server.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONRPCServer = void 0;
var models_1 = __webpack_require__(/*! ./models */ "./node_modules/json-rpc-2.0/dist/models.js");
var internal_1 = __webpack_require__(/*! ./internal */ "./node_modules/json-rpc-2.0/dist/internal.js");
var createParseErrorResponse = function () {
    return (0, models_1.createJSONRPCErrorResponse)(null, models_1.JSONRPCErrorCode.ParseError, "Parse error");
};
var createInvalidRequestResponse = function (request) {
    return (0, models_1.createJSONRPCErrorResponse)((0, models_1.isJSONRPCID)(request.id) ? request.id : null, models_1.JSONRPCErrorCode.InvalidRequest, "Invalid Request");
};
var createMethodNotFoundResponse = function (id) {
    return (0, models_1.createJSONRPCErrorResponse)(id, models_1.JSONRPCErrorCode.MethodNotFound, "Method not found");
};
var JSONRPCServer = /** @class */ (function () {
    function JSONRPCServer(options) {
        if (options === void 0) { options = {}; }
        var _a;
        this.mapErrorToJSONRPCErrorResponse = defaultMapErrorToJSONRPCErrorResponse;
        this.nameToMethodDictionary = {};
        this.middleware = null;
        this.errorListener = (_a = options.errorListener) !== null && _a !== void 0 ? _a : console.warn;
    }
    JSONRPCServer.prototype.hasMethod = function (name) {
        return !!this.nameToMethodDictionary[name];
    };
    JSONRPCServer.prototype.addMethod = function (name, method) {
        this.addMethodAdvanced(name, this.toJSONRPCMethod(method));
    };
    JSONRPCServer.prototype.removeMethod = function (name) {
        delete this.nameToMethodDictionary[name];
    };
    JSONRPCServer.prototype.toJSONRPCMethod = function (method) {
        return function (request, serverParams) {
            var response = method(request.params, serverParams);
            return Promise.resolve(response).then(function (result) {
                return mapResultToJSONRPCResponse(request.id, result);
            });
        };
    };
    JSONRPCServer.prototype.addMethodAdvanced = function (name, method) {
        var _a;
        this.nameToMethodDictionary = __assign(__assign({}, this.nameToMethodDictionary), (_a = {}, _a[name] = method, _a));
    };
    JSONRPCServer.prototype.receiveJSON = function (json, serverParams) {
        var request = this.tryParseRequestJSON(json);
        if (request) {
            return this.receive(request, serverParams);
        }
        else {
            return Promise.resolve(createParseErrorResponse());
        }
    };
    JSONRPCServer.prototype.tryParseRequestJSON = function (json) {
        try {
            return JSON.parse(json);
        }
        catch (_a) {
            return null;
        }
    };
    JSONRPCServer.prototype.receive = function (request, serverParams) {
        if (Array.isArray(request)) {
            return this.receiveMultiple(request, serverParams);
        }
        else {
            return this.receiveSingle(request, serverParams);
        }
    };
    JSONRPCServer.prototype.receiveMultiple = function (requests, serverParams) {
        return __awaiter(this, void 0, void 0, function () {
            var responses;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(requests.map(function (request) { return _this.receiveSingle(request, serverParams); }))];
                    case 1:
                        responses = (_a.sent()).filter(isNonNull);
                        if (responses.length === 1) {
                            return [2 /*return*/, responses[0]];
                        }
                        else if (responses.length) {
                            return [2 /*return*/, responses];
                        }
                        else {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    JSONRPCServer.prototype.receiveSingle = function (request, serverParams) {
        return __awaiter(this, void 0, void 0, function () {
            var method, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = this.nameToMethodDictionary[request.method];
                        if (!!(0, models_1.isJSONRPCRequest)(request)) return [3 /*break*/, 1];
                        return [2 /*return*/, createInvalidRequestResponse(request)];
                    case 1: return [4 /*yield*/, this.callMethod(method, request, serverParams)];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, mapResponse(request, response)];
                }
            });
        });
    };
    JSONRPCServer.prototype.applyMiddleware = function () {
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        if (this.middleware) {
            this.middleware = this.combineMiddlewares(__spreadArray([
                this.middleware
            ], middlewares, true));
        }
        else {
            this.middleware = this.combineMiddlewares(middlewares);
        }
    };
    JSONRPCServer.prototype.combineMiddlewares = function (middlewares) {
        if (!middlewares.length) {
            return null;
        }
        else {
            return middlewares.reduce(this.middlewareReducer);
        }
    };
    JSONRPCServer.prototype.middlewareReducer = function (prevMiddleware, nextMiddleware) {
        return function (next, request, serverParams) {
            return prevMiddleware(function (request, serverParams) { return nextMiddleware(next, request, serverParams); }, request, serverParams);
        };
    };
    JSONRPCServer.prototype.callMethod = function (method, request, serverParams) {
        var _this = this;
        var callMethod = function (request, serverParams) {
            if (method) {
                return method(request, serverParams);
            }
            else if (request.id !== undefined) {
                return Promise.resolve(createMethodNotFoundResponse(request.id));
            }
            else {
                return Promise.resolve(null);
            }
        };
        var onError = function (error) {
            _this.errorListener("An unexpected error occurred while executing \"".concat(request.method, "\" JSON-RPC method:"), error);
            return Promise.resolve(_this.mapErrorToJSONRPCErrorResponseIfNecessary(request.id, error));
        };
        try {
            return (this.middleware || noopMiddleware)(callMethod, request, serverParams).then(undefined, onError);
        }
        catch (error) {
            return onError(error);
        }
    };
    JSONRPCServer.prototype.mapErrorToJSONRPCErrorResponseIfNecessary = function (id, error) {
        if (id !== undefined) {
            return this.mapErrorToJSONRPCErrorResponse(id, error);
        }
        else {
            return null;
        }
    };
    return JSONRPCServer;
}());
exports.JSONRPCServer = JSONRPCServer;
var isNonNull = function (value) { return value !== null; };
var noopMiddleware = function (next, request, serverParams) { return next(request, serverParams); };
var mapResultToJSONRPCResponse = function (id, result) {
    if (id !== undefined) {
        return (0, models_1.createJSONRPCSuccessResponse)(id, result);
    }
    else {
        return null;
    }
};
var defaultMapErrorToJSONRPCErrorResponse = function (id, error) {
    var _a;
    var message = (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : "An unexpected error occurred";
    var code = internal_1.DefaultErrorCode;
    var data;
    if (error instanceof models_1.JSONRPCErrorException) {
        code = error.code;
        data = error.data;
    }
    return (0, models_1.createJSONRPCErrorResponse)(id, code, message, data);
};
var mapResponse = function (request, response) {
    if (response) {
        return response;
    }
    else if (request.id !== undefined) {
        return (0, models_1.createJSONRPCErrorResponse)(request.id, models_1.JSONRPCErrorCode.InternalError, "Internal error");
    }
    else {
        return null;
    }
};


/***/ }),

/***/ "./node_modules/jsonfile/index.js":
/*!****************************************!*\
  !*** ./node_modules/jsonfile/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _fs
try {
  _fs = __webpack_require__(/*! graceful-fs */ "./node_modules/graceful-fs/graceful-fs.js")
} catch (_) {
  _fs = __webpack_require__(/*! fs */ "fs")
}

function readFile (file, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }

  if (typeof options === 'string') {
    options = {encoding: options}
  }

  options = options || {}
  var fs = options.fs || _fs

  var shouldThrow = true
  if ('throws' in options) {
    shouldThrow = options.throws
  }

  fs.readFile(file, options, function (err, data) {
    if (err) return callback(err)

    data = stripBom(data)

    var obj
    try {
      obj = JSON.parse(data, options ? options.reviver : null)
    } catch (err2) {
      if (shouldThrow) {
        err2.message = file + ': ' + err2.message
        return callback(err2)
      } else {
        return callback(null, null)
      }
    }

    callback(null, obj)
  })
}

function readFileSync (file, options) {
  options = options || {}
  if (typeof options === 'string') {
    options = {encoding: options}
  }

  var fs = options.fs || _fs

  var shouldThrow = true
  if ('throws' in options) {
    shouldThrow = options.throws
  }

  try {
    var content = fs.readFileSync(file, options)
    content = stripBom(content)
    return JSON.parse(content, options.reviver)
  } catch (err) {
    if (shouldThrow) {
      err.message = file + ': ' + err.message
      throw err
    } else {
      return null
    }
  }
}

function stringify (obj, options) {
  var spaces
  var EOL = '\n'
  if (typeof options === 'object' && options !== null) {
    if (options.spaces) {
      spaces = options.spaces
    }
    if (options.EOL) {
      EOL = options.EOL
    }
  }

  var str = JSON.stringify(obj, options ? options.replacer : null, spaces)

  return str.replace(/\n/g, EOL) + EOL
}

function writeFile (file, obj, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }
  options = options || {}
  var fs = options.fs || _fs

  var str = ''
  try {
    str = stringify(obj, options)
  } catch (err) {
    // Need to return whether a callback was passed or not
    if (callback) callback(err, null)
    return
  }

  fs.writeFile(file, str, options, callback)
}

function writeFileSync (file, obj, options) {
  options = options || {}
  var fs = options.fs || _fs

  var str = stringify(obj, options)
  // not sure if fs.writeFileSync returns anything, but just in case
  return fs.writeFileSync(file, str, options)
}

function stripBom (content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8')
  content = content.replace(/^\uFEFF/, '')
  return content
}

var jsonfile = {
  readFile: readFile,
  readFileSync: readFileSync,
  writeFile: writeFile,
  writeFileSync: writeFileSync
}

module.exports = jsonfile


/***/ }),

/***/ "./node_modules/memoize-one/dist/memoize-one.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/memoize-one/dist/memoize-one.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ memoizeOne)
/* harmony export */ });
var safeIsNaN = Number.isNaN ||
    function ponyfill(value) {
        return typeof value === 'number' && value !== value;
    };
function isEqual(first, second) {
    if (first === second) {
        return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
    }
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
        }
    }
    return true;
}

function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) { isEqual = areInputsEqual; }
    var cache = null;
    function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
        }
        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {
            return cache.lastResult;
        }
        var lastResult = resultFn.apply(this, newArgs);
        cache = {
            lastResult: lastResult,
            lastArgs: newArgs,
            lastThis: this,
        };
        return lastResult;
    }
    memoized.clear = function clear() {
        cache = null;
    };
    return memoized;
}




/***/ }),

/***/ "./node_modules/mkdirp/index.js":
/*!**************************************!*\
  !*** ./node_modules/mkdirp/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var path = __webpack_require__(/*! path */ "path");
var fs = __webpack_require__(/*! fs */ "fs");
var _0777 = parseInt('0777', 8);

module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

function mkdirP (p, opts, f, made) {
    if (typeof opts === 'function') {
        f = opts;
        opts = {};
    }
    else if (!opts || typeof opts !== 'object') {
        opts = { mode: opts };
    }
    
    var mode = opts.mode;
    var xfs = opts.fs || fs;
    
    if (mode === undefined) {
        mode = _0777
    }
    if (!made) made = null;
    
    var cb = f || /* istanbul ignore next */ function () {};
    p = path.resolve(p);
    
    xfs.mkdir(p, mode, function (er) {
        if (!er) {
            made = made || p;
            return cb(null, made);
        }
        switch (er.code) {
            case 'ENOENT':
                /* istanbul ignore if */
                if (path.dirname(p) === p) return cb(er);
                mkdirP(path.dirname(p), opts, function (er, made) {
                    /* istanbul ignore if */
                    if (er) cb(er, made);
                    else mkdirP(p, opts, cb, made);
                });
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                xfs.stat(p, function (er2, stat) {
                    // if the stat fails, then that's super weird.
                    // let the original error be the failure reason.
                    if (er2 || !stat.isDirectory()) cb(er, made)
                    else cb(null, made);
                });
                break;
        }
    });
}

mkdirP.sync = function sync (p, opts, made) {
    if (!opts || typeof opts !== 'object') {
        opts = { mode: opts };
    }
    
    var mode = opts.mode;
    var xfs = opts.fs || fs;
    
    if (mode === undefined) {
        mode = _0777
    }
    if (!made) made = null;

    p = path.resolve(p);

    try {
        xfs.mkdirSync(p, mode);
        made = made || p;
    }
    catch (err0) {
        switch (err0.code) {
            case 'ENOENT' :
                made = sync(path.dirname(p), opts, made);
                sync(p, opts, made);
                break;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
                var stat;
                try {
                    stat = xfs.statSync(p);
                }
                catch (err1) /* istanbul ignore next */ {
                    throw err0;
                }
                /* istanbul ignore if */
                if (!stat.isDirectory()) throw err0;
                break;
        }
    }

    return made;
};


/***/ }),

/***/ "./node_modules/node-localstorage/LocalStorage.js":
/*!********************************************************!*\
  !*** ./node_modules/node-localstorage/LocalStorage.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

// Generated by CoffeeScript 2.7.0
(function() {
  var JSONStorage, KEY_FOR_EMPTY_STRING, LocalStorage, MetaKey, QUOTA_EXCEEDED_ERR, StorageEvent, _emptyDirectory, _escapeKey, _rm, createMap, events, fs, path, writeSync;

  path = __webpack_require__(/*! path */ "path");

  fs = __webpack_require__(/*! fs */ "fs");

  events = __webpack_require__(/*! events */ "events");

  writeSync = (__webpack_require__(/*! write-file-atomic */ "./node_modules/write-file-atomic/lib/index.js").sync);

  KEY_FOR_EMPTY_STRING = '---.EMPTY_STRING.---'; // Chose something that no one is likely to ever use

  _emptyDirectory = function(target) {
    var i, len, p, ref, results;
    ref = fs.readdirSync(target);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      results.push(_rm(path.join(target, p)));
    }
    return results;
  };

  _rm = function(target) {
    if (fs.statSync(target).isDirectory()) {
      _emptyDirectory(target);
      return fs.rmdirSync(target);
    } else {
      return fs.unlinkSync(target);
    }
  };

  _escapeKey = function(key) {
    var newKey;
    if (key === '') {
      newKey = KEY_FOR_EMPTY_STRING;
    } else {
      newKey = `${key}`;
    }
    return newKey;
  };

  QUOTA_EXCEEDED_ERR = class QUOTA_EXCEEDED_ERR extends Error {
    constructor(message = 'Unknown error.') {
      super();
      this.message = message;
      if (Error.captureStackTrace != null) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
    }

    toString() {
      return `${this.name}: ${this.message}`;
    }

  };

  StorageEvent = class StorageEvent {
    constructor(key1, oldValue1, newValue1, url, storageArea = 'localStorage') {
      this.key = key1;
      this.oldValue = oldValue1;
      this.newValue = newValue1;
      this.url = url;
      this.storageArea = storageArea;
    }

  };

  MetaKey = class MetaKey { // MetaKey contains key and size
    constructor(key1, index1) {
      this.key = key1;
      this.index = index1;
      if (!(this instanceof MetaKey)) {
        return new MetaKey(this.key, this.index);
      }
    }

  };

  createMap = function() { // createMap contains Metakeys as properties
    var Map;
    Map = function() {};
    Map.prototype = Object.create(null);
    return new Map();
  };

  LocalStorage = (function() {
    var instanceMap;

    class LocalStorage extends events.EventEmitter {
      constructor(_location, quota = 5 * 1024 * 1024) {
        var handler;
        super();
        this._location = _location;
        this.quota = quota;
        // super(_location, quota)
        // @_location = _location
        // @quota = quota
        if (!(this instanceof LocalStorage)) {
          return new LocalStorage(this._location, this.quota);
        }
        this._location = path.resolve(this._location);
        if (instanceMap[this._location] != null) {
          return instanceMap[this._location];
        }
        this.length = 0; // !TODO: Maybe change this to a property with __defineProperty__
        this._bytesInUse = 0;
        this._keys = [];
        this._metaKeyMap = createMap();
        this._eventUrl = "pid:" + process.pid;
        this._init();
        this._QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;
        if (typeof Proxy !== "undefined" && Proxy !== null) {
          handler = {
            set: (receiver, key, value) => {
              if (this[key] != null) {
                this[key] = value;
              } else {
                this.setItem(key, value);
              }
              return true;
            },
            get: (receiver, key) => {
              if (this[key] != null) {
                return this[key];
              } else {
                return this.getItem(key);
              }
            },
            ownKeys: (target) => {
              return this._keys.map(function(k) {
                if (k === KEY_FOR_EMPTY_STRING) {
                  return '';
                } else {
                  return k;
                }
              });
            },
            getOwnPropertyDescriptor: (target, key) => {
              return {
                value: this[key],
                enumerable: true,
                configurable: true
              };
            }
          };
          instanceMap[this._location] = new Proxy(this, handler);
          return instanceMap[this._location];
        }
        // else it'll return this
        instanceMap[this._location] = this;
        return instanceMap[this._location];
      }

      _init() {
        var e, stat;
        try {
          stat = fs.statSync(this._location);
          if ((stat != null) && !stat.isDirectory()) {
            throw new Error(`A file exists at the location '${this._location}' when trying to create/open localStorage`);
          }
          // At this point, it exists and is definitely a directory. So read it.
          this._sync();
        } catch (error) {
          e = error;
          // If it errors, that might mean it didn't exist, so try to create it
          if (e.code !== "ENOENT") {
            throw e;
          }
          try {
            fs.mkdirSync(this._location, {
              recursive: true
            });
          } catch (error) {
            e = error;
            if (e.code !== "EEXIST") {
              throw e;
            }
          }
        }
      }

      _sync() {
        var _MetaKey, _decodedKey, _keys, i, index, k, len, stat;
        this._bytesInUse = 0;
        this.length = 0;
        _keys = fs.readdirSync(this._location);
        for (index = i = 0, len = _keys.length; i < len; index = ++i) {
          k = _keys[index];
          _decodedKey = decodeURIComponent(k);
          this._keys.push(_decodedKey);
          _MetaKey = new MetaKey(k, index);
          this._metaKeyMap[_decodedKey] = _MetaKey;
          stat = this._getStat(k);
          if ((stat != null ? stat.size : void 0) != null) {
            _MetaKey.size = stat.size;
            this._bytesInUse += stat.size;
          }
        }
        return this.length = _keys.length;
      }

      setItem(key, value) {
        var encodedKey, evnt, existsBeforeSet, filename, hasListeners, metaKey, oldLength, oldValue, valueString, valueStringLength;
        hasListeners = this.listenerCount('storage');
        oldValue = null;
        if (hasListeners) {
          oldValue = this.getItem(key);
        }
        key = _escapeKey(key);
        encodedKey = encodeURIComponent(key).replace(/[!'()]/g, escape).replace(/\*/g, "%2A");
        filename = path.join(this._location, encodedKey);
        valueString = `${value}`;
        valueStringLength = valueString.length;
        metaKey = this._metaKeyMap[key];
        existsBeforeSet = !!metaKey;
        if (existsBeforeSet) {
          oldLength = metaKey.size;
        } else {
          oldLength = 0;
        }
        if (this._bytesInUse - oldLength + valueStringLength > this.quota) {
          throw new QUOTA_EXCEEDED_ERR();
        }
        writeSync(filename, valueString, {
          encoding: 'utf8'
        });
        if (!existsBeforeSet) {
          metaKey = new MetaKey(encodedKey, (this._keys.push(key)) - 1);
          metaKey.size = valueStringLength;
          this._metaKeyMap[key] = metaKey;
          this.length += 1;
          this._bytesInUse += valueStringLength;
        }
        if (hasListeners) {
          evnt = new StorageEvent(key, oldValue, value, this._eventUrl);
          return this.emit('storage', evnt);
        }
      }

      getItem(key) {
        var filename, metaKey;
        key = _escapeKey(key);
        metaKey = this._metaKeyMap[key];
        if (!!metaKey) {
          filename = path.join(this._location, metaKey.key);
          return fs.readFileSync(filename, 'utf8');
        } else {
          return null;
        }
      }

      _getStat(key) {
        var filename;
        key = _escapeKey(key);
        filename = path.join(this._location, encodeURIComponent(key));
        try {
          return fs.statSync(filename);
        } catch (error) {
          return null;
        }
      }

      removeItem(key) {
        var evnt, filename, hasListeners, k, meta, metaKey, oldValue, ref, v;
        key = _escapeKey(key);
        metaKey = this._metaKeyMap[key];
        if (!!metaKey) {
          hasListeners = this.listenerCount('storage');
          oldValue = null;
          if (hasListeners) {
            oldValue = this.getItem(key);
          }
          delete this._metaKeyMap[key];
          this.length -= 1;
          this._bytesInUse -= metaKey.size;
          filename = path.join(this._location, metaKey.key);
          this._keys.splice(metaKey.index, 1);
          ref = this._metaKeyMap;
          for (k in ref) {
            v = ref[k];
            meta = this._metaKeyMap[k];
            if (meta.index > metaKey.index) {
              meta.index -= 1;
            }
          }
          _rm(filename);
          if (hasListeners) {
            evnt = new StorageEvent(key, oldValue, null, this._eventUrl);
            return this.emit('storage', evnt);
          }
        }
      }

      key(n) {
        var rawKey;
        rawKey = this._keys[n];
        if (rawKey === KEY_FOR_EMPTY_STRING) {
          return '';
        } else {
          return rawKey;
        }
      }

      clear() {
        var evnt;
        _emptyDirectory(this._location);
        this._metaKeyMap = createMap();
        this._keys = [];
        this.length = 0;
        this._bytesInUse = 0;
        if (this.listenerCount('storage')) {
          evnt = new StorageEvent(null, null, null, this._eventUrl);
          return this.emit('storage', evnt);
        }
      }

      _getBytesInUse() {
        return this._bytesInUse;
      }

      _deleteLocation() {
        delete instanceMap[this._location];
        _rm(this._location);
        this._metaKeyMap = {};
        this._keys = [];
        this.length = 0;
        return this._bytesInUse = 0;
      }

    };

    instanceMap = {};

    return LocalStorage;

  }).call(this);

  JSONStorage = class JSONStorage extends LocalStorage {
    setItem(key, value) {
      var newValue;
      newValue = JSON.stringify(value);
      return super.setItem(key, newValue);
    }

    getItem(key) {
      return JSON.parse(super.getItem(key));
    }

  };

  exports.LocalStorage = LocalStorage;

  exports.JSONStorage = JSONStorage;

  exports.QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;

}).call(this);


/***/ }),

/***/ "./node_modules/supports-color/index.js":
/*!**********************************************!*\
  !*** ./node_modules/supports-color/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const os = __webpack_require__(/*! os */ "os");
const tty = __webpack_require__(/*! tty */ "tty");
const hasFlag = __webpack_require__(/*! has-flag */ "./node_modules/has-flag/index.js");

const {env} = process;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false') ||
	hasFlag('color=never')) {
	forceColor = 0;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = 1;
}

if ('FORCE_COLOR' in env) {
	if (env.FORCE_COLOR === 'true') {
		forceColor = 1;
	} else if (env.FORCE_COLOR === 'false') {
		forceColor = 0;
	} else {
		forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(haveStream, streamIsTTY) {
	if (forceColor === 0) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (haveStream && !streamIsTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (process.platform === 'win32') {
		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
		const osRelease = os.release().split('.');
		if (
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream, stream && stream.isTTY);
	return translateLevel(level);
}

module.exports = {
	supportsColor: getSupportLevel,
	stdout: translateLevel(supportsColor(true, tty.isatty(1))),
	stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};


/***/ }),

/***/ "./src/main/global-this.model.ts":
/*!***************************************!*\
  !*** ./src/main/global-this.model.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_polyfills_local_storage_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @node/polyfills/local-storage.polyfill */ "./src/node/polyfills/local-storage.polyfill.ts");
/* harmony import */ var _shared_global_this_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/global-this.model */ "./src/shared/global-this.model.ts");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @node/utils/command-line.util */ "./src/node/utils/command-line.util.ts");
/* harmony import */ var _node_utils_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @node/utils/util */ "./src/node/utils/util.ts");
/**
 * Module to set up globalThis and polyfills in main
 *
 * TODO: consider making this a normal exporting module so it's not using globalThis and using
 * NormalModuleReplacementPlugin to make sure the right one gets imported per process. Idea from
 * Bergi at https://stackoverflow.com/a/69982121 See
 * https://webpack.js.org/plugins/normal-module-replacement-plugin/
 */






// #region globalThis setup
globalThis.processType = _shared_global_this_model__WEBPACK_IMPORTED_MODULE_2__.ProcessType.Main;
globalThis.isPackaged = electron__WEBPACK_IMPORTED_MODULE_3__.app.isPackaged;
globalThis.resourcesPath = electron__WEBPACK_IMPORTED_MODULE_3__.app.isPackaged ? process.resourcesPath : path__WEBPACK_IMPORTED_MODULE_0___default().join(__dirname, '../../');
globalThis.logLevel =
    // Assert the extracted type.
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    (0,_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_4__.getCommandLineArgument)(_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_4__.COMMAND_LINE_ARGS.LogLevel) ??
        (globalThis.isPackaged ? 'info' : 'debug');
globalThis.isNoisyDevModeEnabled = (0,_node_utils_util__WEBPACK_IMPORTED_MODULE_5__.isNoisyDevModeEnvVariableSet)();
// #endregion
// #region polyfills
(0,_node_polyfills_local_storage_polyfill__WEBPACK_IMPORTED_MODULE_1__.polyfillLocalStorage)();
// #endregion


/***/ }),

/***/ "./src/main/main.ts":
/*!**************************!*\
  !*** ./src/main/main.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ "os");
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var electron_window_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! electron-window-state */ "./node_modules/electron-window-state/index.js");
/* harmony import */ var electron_window_state__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(electron_window_state__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _main_global_this_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @main/global-this.model */ "./src/main/global-this.model.ts");
/* harmony import */ var _main_services_dotnet_data_provider_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @main/services/dotnet-data-provider.service */ "./src/main/services/dotnet-data-provider.service.ts");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var _shared_services_network_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @shared/services/network.service */ "./src/shared/services/network.service.ts");
/* harmony import */ var _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @shared/services/command.service */ "./src/shared/services/command.service.ts");
/* harmony import */ var _node_utils_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @node/utils/util */ "./src/node/utils/util.ts");
/* harmony import */ var _main_services_extension_host_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @main/services/extension-host.service */ "./src/main/services/extension-host.service.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var _main_services_extension_asset_protocol_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @main/services/extension-asset-protocol.service */ "./src/main/services/extension-asset-protocol.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_services_project_data_provider_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @shared/services/project-data-provider.service */ "./src/shared/services/project-data-provider.service.ts");
/* harmony import */ var _main_services_network_object_status_service_host__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @main/services/network-object-status.service-host */ "./src/main/services/network-object-status.service-host.ts");
/* harmony import */ var _shared_data_platform_data__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @shared/data/platform.data */ "./src/shared/data/platform.data.ts");
/* harmony import */ var _main_services_project_lookup_service_host__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @main/services/project-lookup.service-host */ "./src/main/services/project-lookup.service-host.ts");
/* harmony import */ var _shared_models_project_data_provider_model__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @shared/models/project-data-provider.model */ "./src/shared/models/project-data-provider.model.ts");
/* harmony import */ var _shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @shared/data/rpc.model */ "./src/shared/data/rpc.model.ts");
/* harmony import */ var _node_services_extension_service_model__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @node/services/extension.service-model */ "./src/node/services/extension.service-model.ts");
/* harmony import */ var _main_services_data_protection_service_host__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @main/services/data-protection.service-host */ "./src/main/services/data-protection.service-host.ts");
/* harmony import */ var _main_platform_macos_menubar_util__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @main/platform-macos-menubar.util */ "./src/main/platform-macos-menubar.util.ts");
/* harmony import */ var _main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @main/services/app.service-host */ "./src/main/services/app.service-host.ts");
/* harmony import */ var _shared_services_settings_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @shared/services/settings.service */ "./src/shared/services/settings.service.ts");
/**
 * This module executes inside of electron's main process. You can start electron renderer process
 * from here and communicate with the other processes through IPC.
 *
 * When running `npm run build` or `npm run build:main`, this file is compiled to `./src/main.js`
 * using webpack. This gives us some performance wins.
 */



// Removed until we have a release. See https://github.com/paranext/paranext-core/issues/83
/* import { autoUpdater } from 'electron-updater'; */






















// #region Prevent multiple instances of the app. This needs to stay at the top of the app!
// Prevent multiple instances because an instance launched after the first is likely a URL redirect
// to our protocol client. We handle URI redirects below in `second-instance`
/** Whether this is the first instance of this application. */
const isFirstInstance = electron__WEBPACK_IMPORTED_MODULE_2__.app.requestSingleInstanceLock();
if (!isFirstInstance) {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info(`Application launched but not first instance. Exiting. This probably means the application just handled a URL. process.argv: ${process.argv}`);
    electron__WEBPACK_IMPORTED_MODULE_2__.app.exit();
}
// #endregion
const PROCESS_CLOSE_TIME_OUT = 2000;
/**
 * If this is `true`, we will restart soon. Not just using `isClosing` because we need to make sure
 * we only run `relaunch` once which has a slightly different use case than `isClosing`
 */
let willRestart = false;
// Add unhandled exception and rejection handlers
process.on('uncaughtException', (error) => {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.error(`Unhandled exception in main process: ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__.getErrorMessage)(error)}`);
});
process.on('unhandledRejection', (reason) => {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.error(`Unhandled promise rejection in main process, reason: ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__.getErrorMessage)(reason)}`);
});
/**
 * Open a link in the browser following the restrictions we put in place in Platform.Bible
 *
 * Make sure not to allow just any link. See
 * https://benjamin-altpeter.de/shell-openexternal-dangers/
 */
async function openExternal(url) {
    if (!url.startsWith('https://') && !url.startsWith(`${_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.APP_URI_SCHEME}://`))
        throw new Error(`External URL must start with 'https://' or '${_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.APP_URI_SCHEME}://: ${url}`);
    try {
        await electron__WEBPACK_IMPORTED_MODULE_2__.shell.openExternal(url);
    }
    catch (e) {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__.getErrorMessage)(e));
        throw e;
    }
    return true;
}
async function main() {
    // The network service relies on nothing else, and other things rely on it, so start it first
    await _shared_services_network_service__WEBPACK_IMPORTED_MODULE_7__.initialize();
    // The network object status service relies on seeing everything else start up later
    await (0,_main_services_network_object_status_service_host__WEBPACK_IMPORTED_MODULE_15__.startNetworkObjectStatusService)();
    // The project lookup service relies on the network object status service
    await (0,_main_services_project_lookup_service_host__WEBPACK_IMPORTED_MODULE_17__.startProjectLookupService)();
    // The .NET data provider relies on the network service and nothing else
    _main_services_dotnet_data_provider_service__WEBPACK_IMPORTED_MODULE_5__.dotnetDataProvider.start();
    // TODO (maybe): Wait for signal from the .NET data provider process that it is ready
    // Need to start the data protection service before starting the extension host because extensions
    // use it
    await (0,_main_services_data_protection_service_host__WEBPACK_IMPORTED_MODULE_21__.startDataProtectionService)();
    // Need to start the app service before starting the extension host because extensions use it
    await (0,_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.startAppService)();
    // The extension host service relies on the network service.
    // Extensions inside the extension host might rely on the .NET data provider and each other
    // Some extensions inside the extension host rely on the renderer to accept 'getWebView' commands.
    // The renderer relies on the extension host, so something has to break the dependency loop.
    // For now, the dependency loop is broken by retrying 'getWebView' in a loop for a while.
    await _main_services_extension_host_service__WEBPACK_IMPORTED_MODULE_10__.extensionHostService.start();
    // TODO (maybe): Wait for signal from the extension host process that it is ready (except 'getWebView')
    // We could then wait for the renderer to be ready and signal the extension host
    // Keep a global reference of the window object. If you don't, the window will
    // be closed automatically when the JavaScript object is garbage collected.
    let mainWindow;
    // #region Set up the protocol client to receive navigation to this app's URI scheme
    // Launch the portable app if we're in it; otherwise use the normal path
    const launchPath = process.env.PORTABLE_EXECUTABLE_FILE || process.execPath;
    const args = process.argv.slice(1);
    function handleUri(uri) {
        if (mainWindow) {
            if (mainWindow.isMinimized())
                mainWindow.restore();
            mainWindow.focus();
        }
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`Main is handling uri ${uri}`);
        // need to use `new URL` instead of `URL.parse` because Node<22.1.0 doesn't have it. Can change
        // when we get there
        let url;
        try {
            url = new URL(uri);
        }
        catch (e) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`Main received uri ${uri} but could not parse it. If this does not look like a uri, that probably means the user tried to open the application again. This is likely not a problem. ${e}`);
            return;
        }
        if (url.protocol !== `${_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.APP_URI_SCHEME}:`) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn(`Main received uri ${uri} but protocol does not match ${_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.APP_URI_SCHEME}`);
            return;
        }
        (async () => {
            try {
                await _shared_services_network_service__WEBPACK_IMPORTED_MODULE_7__.request(_node_services_extension_service_model__WEBPACK_IMPORTED_MODULE_20__.HANDLE_URI_REQUEST_TYPE, uri);
            }
            catch (e) {
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn(`Main sent request for extension service to handle uri ${uri}, but it threw. ${e}`);
            }
        })();
    }
    // Resolve the path to this file if we're running the electron app itself and passing in this file
    // Note that this condition (`process.defaultApp`) is not quite the same as whether we're
    // packaged, so we're not using `globalThis.isPackaged` here.
    if (process.defaultApp && args.length > 2)
        args[2] = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(args[2]);
    electron__WEBPACK_IMPORTED_MODULE_2__.app.setAsDefaultProtocolClient(_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.APP_URI_SCHEME, launchPath, args);
    if (process.platform === 'darwin') {
        // Use OSX's event to handle navigation
        electron__WEBPACK_IMPORTED_MODULE_2__.app.on('open-url', (_event, url) => handleUri(url));
    }
    else {
        // Non-OSX attempts to launch a second instance to handle navigation; detect and handle
        // accordingly
        electron__WEBPACK_IMPORTED_MODULE_2__.app.on('second-instance', (_event, commandLine) => {
            // Handle the URL
            const uri = commandLine[commandLine.length - 1];
            handleUri(uri);
        });
    }
    // #endregion
    // #region Start the renderer
    // Removed until we have a release. See https://github.com/paranext/paranext-core/issues/83
    /* class AppUpdater {
    constructor() {
      autoUpdater.logger = logger;
      autoUpdater.checkForUpdatesAndNotify();
    }
  } */
    if (false) {}
    const isDebug =  true || 0;
    if (isDebug) {
        const electronDebug = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_electron-debug_index_js"), __webpack_require__.e("node_modules_electron-debug_sync_recursive")]).then(__webpack_require__.t.bind(__webpack_require__, /*! electron-debug */ "./node_modules/electron-debug/index.js", 23));
        electronDebug.default();
    }
    /** Install extensions into the Chromium renderer process */
    async function installExtensions() {
        const installer = await __webpack_require__.e(/*! import() */ "vendors-node_modules_electron-devtools-installer_dist_index_js").then(__webpack_require__.bind(__webpack_require__, /*! electron-devtools-installer */ "./node_modules/electron-devtools-installer/dist/index.js"));
        const forceDownload = !!process.env.UPGRADE_EXTENSIONS;
        const extensions = [installer.REACT_DEVELOPER_TOOLS];
        return installer.default(extensions, forceDownload).catch(_shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info);
    }
    function getAssetPath(...paths) {
        return path__WEBPACK_IMPORTED_MODULE_1___default().join(globalThis.resourcesPath, 'assets', ...paths);
    }
    /** Sets up the electron BrowserWindow renderer process */
    const createWindow = async () => {
        if (isDebug) {
            await installExtensions();
        }
        // Load the previous state with fallback to defaults
        const mainWindowState = electron_window_state__WEBPACK_IMPORTED_MODULE_3___default()({
            defaultWidth: 1024,
            defaultHeight: 728,
        });
        mainWindow = new electron__WEBPACK_IMPORTED_MODULE_2__.BrowserWindow({
            show: true,
            x: mainWindowState.x,
            y: mainWindowState.y,
            width: mainWindowState.width,
            height: mainWindowState.height,
            minWidth: 800, // TODO: Remove this temporary enforcement when https://paratextstudio.atlassian.net/browse/PT-2333 is implemented
            icon: getAssetPath('icon.png'),
            // TODO: Re-check linux support with Electron 34, see https://discord.com/channels/1064938364597436416/1344329166786527232
            ...(process.platform !== 'linux' ? { titleBarStyle: 'hidden' } : {}),
            // re-add window controls
            // TODO: Re-check linux support with Electron 34, see https://discord.com/channels/1064938364597436416/1344329166786527232
            ...(process.platform !== 'darwin' && process.platform !== 'linux'
                ? {
                    titleBarOverlay: {
                        height: 47,
                        color: 'hsla(0, 0%, 100%, 0)', // transparent button background until hovered
                    },
                }
                : {}),
            webPreferences: {
                preload: electron__WEBPACK_IMPORTED_MODULE_2__.app.isPackaged
                    ? path__WEBPACK_IMPORTED_MODULE_1___default().join(__dirname, 'preload.js')
                    : path__WEBPACK_IMPORTED_MODULE_1___default().join(__dirname, '../../.erb/dll/preload.js'),
            },
        });
        // Set our custom protocol handler to load assets from extensions
        _main_services_extension_asset_protocol_service__WEBPACK_IMPORTED_MODULE_12__.extensionAssetProtocolService.initialize();
        // Register listeners on the window, so the state is updated automatically
        // (the listeners will be removed when the window is closed)
        // and restore the maximized or full screen state
        mainWindowState.manage(mainWindow);
        // Add several listeners to the main window to log events
        mainWindow.webContents.on('unresponsive', () => _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn('mainWindow unresponsive'));
        mainWindow.webContents.on('responsive', () => _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn('mainWindow responsive'));
        mainWindow.webContents.on('render-process-gone', (_, details) => _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn(`mainWindow render process gone: ${JSON.stringify(details)}`));
        mainWindow.webContents.on(
        // @ts-expect-error - TS seems confused, as this matches the d.ts file and the docs
        'did-fail-load', (_event, errorCode, errorDescription, validatedURL, isMainFrame) => {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn(`mainWindow failed to load "${validatedURL}" with error "${errorDescription}" (${errorCode}). isMainFrame: ${isMainFrame}`);
        });
        mainWindow.on('ready-to-show', () => {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info('mainWindow is ready to show');
            if (!mainWindow)
                throw new Error('"mainWindow" is not defined');
            if (process.env.START_MINIMIZED) {
                mainWindow.minimize();
            }
            else {
                mainWindow.show();
            }
        });
        mainWindow.on('closed', () => {
            mainWindow = undefined;
        });
        if (process.platform === 'darwin') {
            (async () => {
                try {
                    await (0,_main_platform_macos_menubar_util__WEBPACK_IMPORTED_MODULE_22__.subscribeCurrentMacosMenubar)();
                }
                catch (error) {
                    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info(`Failed to build the macOS menubar ${error}`);
                }
            })();
        }
        // This sets the menu on Windows and Linux
        // 'null' to interact with external API
        // eslint-disable-next-line no-null/no-null
        mainWindow.setMenu(null);
        // Open urls in the user's browser
        // Note that webviews can get to this handler with window.open and anchor tags with
        // target="_blank". Please revise web-view.service-host.ts as necessary if you make changes here
        mainWindow.webContents.setWindowOpenHandler((handlerDetails) => {
            // Only allow https urls
            (async () => {
                try {
                    openExternal(handlerDetails.url);
                }
                catch (e) {
                    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn(`mainWindow could not open external url "${handlerDetails.url}" from windowOpenHandler. ${e}`);
                }
            })();
            return { action: 'deny' };
        });
        // If the URL doesn't load, we might need to show something to the user
        const urlToLoad = `${(0,_node_utils_util__WEBPACK_IMPORTED_MODULE_9__.resolveHtmlPath)('index.html')}${globalThis.isNoisyDevModeEnabled ? _shared_data_platform_data__WEBPACK_IMPORTED_MODULE_16__.DEV_MODE_RENDERER_INDICATOR : ''}`;
        mainWindow.loadURL(urlToLoad).catch((e) => {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.error(`mainWindow could not load URL "${urlToLoad}". ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__.getErrorMessage)(e)}`);
        });
        // Remove this if your app does not use auto updates
        // eslint-disable-next-line
        // Removed until we have a release. See https://github.com/paranext/paranext-core/issues/83
        // new AppUpdater();
    };
    electron__WEBPACK_IMPORTED_MODULE_2__.app.on('window-all-closed', () => {
        // Respect the OSX convention of having the application in memory even
        // after all windows have been closed
        if (process.platform !== 'darwin') {
            electron__WEBPACK_IMPORTED_MODULE_2__.app.quit();
        }
    });
    let isClosing = false;
    electron__WEBPACK_IMPORTED_MODULE_2__.app.on('will-quit', async (e) => {
        if (!isClosing) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info('Main process is quitting');
            // Prevent closing before graceful shutdown is complete.
            // Also, in the future, this should allow a "are you sure?" dialog to display.
            e.preventDefault();
            isClosing = true;
            _shared_services_network_service__WEBPACK_IMPORTED_MODULE_7__.shutdown();
            await Promise.all([
                _main_services_dotnet_data_provider_service__WEBPACK_IMPORTED_MODULE_5__.dotnetDataProvider.waitForClose(PROCESS_CLOSE_TIME_OUT),
                _main_services_extension_host_service__WEBPACK_IMPORTED_MODULE_10__.extensionHostService.waitForClose(PROCESS_CLOSE_TIME_OUT),
            ]);
            // In development, the dotnet watcher was killed so we have to wait here.
            if (true)
                await (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__.wait)(500);
            electron__WEBPACK_IMPORTED_MODULE_2__.app.quit();
        }
        else {
            _main_services_dotnet_data_provider_service__WEBPACK_IMPORTED_MODULE_5__.dotnetDataProvider.kill();
            _main_services_extension_host_service__WEBPACK_IMPORTED_MODULE_10__.extensionHostService.kill();
        }
    });
    electron__WEBPACK_IMPORTED_MODULE_2__.app
        .whenReady()
        // eslint-disable-next-line promise/always-return
        .then(() => {
        // Set up ipc handlers
        electron__WEBPACK_IMPORTED_MODULE_2__.ipcMain.handle('electronAPI:env.test', (_event, message) => `From main.ts: test ${message}`);
        createWindow();
        electron__WEBPACK_IMPORTED_MODULE_2__.app.on('activate', () => {
            // On macOS it's common to re-create a window in the app when the
            // dock icon is clicked and there are no other windows open.
            if (!mainWindow)
                createWindow();
        });
        return undefined;
    })
        .catch((e) => _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.error(`Error in app.whenReady: ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__.getErrorMessage)(e)}`));
    // #endregion
    // #region Ensure the request timeout has been set
    // settingsService updates the request timeout during initialization, so using the service in any
    // way ensures the timeout is set
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`Request timeout is ${await _shared_services_settings_service__WEBPACK_IMPORTED_MODULE_24__.settingsService.get('platform.requestTimeout')} sec`);
    // #endregion
    // #region Register commands
    // `main.ts`'s command handler declarations are in `papi-shared-types.ts` so papi-dts sees them
    _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand('platform.restartExtensionHost', restartExtensionHost, {
        method: {
            summary: 'Restart the extension host which reloads and reinitializes TS/JS extensions',
            params: [],
            result: {
                name: 'return value',
                schema: { type: 'null' },
            },
        },
    });
    _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand('platform.quit', async () => {
        electron__WEBPACK_IMPORTED_MODULE_2__.app.quit();
    }, {
        method: {
            summary: 'Close the platform, including all processes started by it',
            params: [],
            result: {
                name: 'return value',
                schema: { type: 'null' },
            },
        },
    });
    _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand('platform.restart', async () => {
        // Only set up to restart once. This could accidentally be called twice if `app.quit` is
        // canceled or if someone requested to restart multiple times in the few seconds it takes
        // `app.quit` to run because of the `will-quit` event
        if (!willRestart) {
            willRestart = true;
            electron__WEBPACK_IMPORTED_MODULE_2__.app.relaunch({
                // If in portable app, relaunch properly. If not, take default action. Thanks to Araxeus at
                // https://github.com/electron-userland/electron-builder/issues/4110#issuecomment-1050149429
                execPath: process.env.PORTABLE_EXECUTABLE_FILE,
            });
        }
        electron__WEBPACK_IMPORTED_MODULE_2__.app.quit();
    }, {
        method: {
            summary: 'Restart the platform, including all processes started by it',
            params: [],
            result: {
                name: 'return value',
                schema: { type: 'null' },
            },
        },
    });
    _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand('platform.getOSPlatform', async () => {
        return os__WEBPACK_IMPORTED_MODULE_0___default().platform();
    }, {
        method: {
            summary: 'Get the os platform ("win32", "darwin", "linux")',
            params: [],
            result: {
                name: 'return value',
                schema: { type: 'null' },
            },
        },
    });
    _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand('platform.isFullScreen', async () => {
        return false; // TODO implement;
    }, {
        method: {
            summary: 'If platform runs in full screen mode',
            params: [],
            result: {
                name: 'return value',
                schema: { type: 'null' },
            },
        },
    });
    const liveDocsUrl = 'https://playground.open-rpc.org/?transport=websocket&schemaUrl=ws%3A%2F%2Flocalhost%3A8876%0A&uiSchema[appBar][ui:splitView]=false&uiSchema[appBar][ui:input]=false&uiSchema[appBar][ui:examplesDropdown]=false&uiSchema[appBar][ui:transports]=false&uiSchema[appBar][ui:darkMode]=true&uiSchema[appBar][ui:title]=PAPI';
    _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand('platform.openDeveloperDocumentationUrl', async () => {
        await openExternal(liveDocsUrl);
    }, {
        method: {
            summary: 'Open the OpenRPC documentation in a browser',
            params: [],
            result: {
                name: 'return value',
                schema: { type: 'null' },
            },
        },
    });
    _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand('platform.openWindow', async (url) => {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`Main opening window with url from command: ${url}`);
        await openExternal(url);
    }, {
        method: {
            summary: "Open a link in the user's default browser",
            params: [
                {
                    name: 'url',
                    required: true,
                    summary: 'The url to open',
                    schema: { type: 'string' },
                },
            ],
            result: {
                name: 'return value',
                schema: { type: 'null' },
            },
        },
    });
    // #endregion
    // #region Noisy dev tests
    if (globalThis.isNoisyDevModeEnabled) {
        // Register commands only for testing purposes
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const testCommandHandlers = {
            'test.echo': async (message) => {
                return message;
            },
            'test.echoExtensionHost': async (message) => {
                await _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.sendCommand('test.addMany', 3, 5, 7, 1, 4);
                return message;
            },
            'test.throwError': async (message) => {
                throw new Error(`Test Error thrown in throwError command: ${message}`);
            },
        };
        Object.entries(testCommandHandlers).forEach(([commandName, handler]) => {
            // Re-assert type after passing through `forEach`.
            // eslint-disable-next-line no-type-assertion/no-type-assertion
            _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.registerCommand(commandName, handler);
        });
        // Call a test command registered elsewhere
        setTimeout(async () => {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`Add Many (from EH): ${await _shared_services_command_service__WEBPACK_IMPORTED_MODULE_8__.sendCommand('test.addMany', 2, 5, 9, 7)}`);
        }, 20000);
        // Register a test network object
        const testMain = {
            doStuff: (stuff) => {
                const result = `testMain did stuff: ${stuff}!`;
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug(result);
                return result;
            },
            dispose: () => {
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug('testMain.dispose() ran in testMain');
                return Promise.resolve(true);
            },
        };
        const testMainDisposer = await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_11__.networkObjectService.set('testMain', testMain);
        testMain.doStuff('main things');
        testMainDisposer.onDidDispose(() => {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug('testMain disposed in main message #1');
        });
        testMainDisposer.onDidDispose(() => {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug('testMain disposed in main message #2');
        });
        setTimeout(testMainDisposer.dispose, 20000);
        // Create a test network object registered elsewhere
        setTimeout(async () => {
            let testExtensionHost = await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_11__.networkObjectService.get('testExtensionHost');
            if (testExtensionHost) {
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug(`get verse: ${await testExtensionHost.getVerse()}`);
                testExtensionHost.onDidDispose(() => {
                    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.debug('testExtensionHost disposed in main');
                    testExtensionHost = undefined;
                });
            }
            else
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.error('Could not get testExtensionHost from main');
        }, 5000);
        // Dump all the network objects after things have settled a bit
        setTimeout(async () => {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info(`Available network request types after 30 seconds: ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_13__.serialize)(
            // eslint-disable-next-line no-type-assertion/no-type-assertion
            await _shared_services_network_service__WEBPACK_IMPORTED_MODULE_7__.request(_shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_19__.GET_METHODS, {}))}`);
        }, 30000);
        // Get a data provider and do something with it
        setTimeout(async () => {
            const usxPdp = await (0,_shared_services_project_data_provider_service__WEBPACK_IMPORTED_MODULE_14__.get)('platformScripture.USX_Chapter', '32664dc3288a28df2e2bb75ded887fc8f17a15fb');
            const verse = await usxPdp.getChapterUSX({ book: 'JHN', chapterNum: 1, verseNum: 1 });
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info(`Got PDP data: ${verse}`);
            if (verse !== undefined)
                await usxPdp.setChapterUSX({ book: 'JHN', chapterNum: 1, verseNum: 1 }, verse);
            const basePdp = await (0,_shared_services_project_data_provider_service__WEBPACK_IMPORTED_MODULE_14__.get)(_shared_models_project_data_provider_model__WEBPACK_IMPORTED_MODULE_18__.PROJECT_INTERFACE_PLATFORM_BASE, '32664dc3288a28df2e2bb75ded887fc8f17a15fb');
            basePdp.setExtensionData({ extensionName: 'foo', dataQualifier: 'fooData' }, 'This is the data from extension foo');
        }, 20000);
    }
    // #endregion
}
async function restartExtensionHost() {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info('Restarting extension host');
    await _main_services_extension_host_service__WEBPACK_IMPORTED_MODULE_10__.extensionHostService.restart(PROCESS_CLOSE_TIME_OUT);
}
(async () => {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info(`Starting ${_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.APP_NAME} version ${_main_services_app_service_host__WEBPACK_IMPORTED_MODULE_23__.APP_VERSION}`);
    await main();
})().catch(_shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.error);


/***/ }),

/***/ "./src/main/platform-macos-menubar.data.ts":
/*!*************************************************!*\
  !*** ./src/main/platform-macos-menubar.data.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   macosMenubarObject: () => (/* binding */ macosMenubarObject)
/* harmony export */ });
// Cannot contribute this as is in main.ts, need to convert labels and tooltips to localized strings and remove order property
const macosMenubarObject = [
    {
        role: 'appMenu',
        id: 'macosMenubar.appMenu',
        submenu: [
            {
                label: '%mainMenu_hideProductName%',
                role: 'hide',
                id: 'hide',
                order: 3,
                isLabelFormatString: true,
            },
            { role: 'hideOthers', id: 'hideOthers', order: 4 },
            {
                label: '%mainMenu_quitProductName%',
                role: 'quit',
                id: 'quit',
                order: 5,
                isLabelFormatString: true,
            },
        ],
    },
    {
        label: '%mainMenu_file%',
        role: 'fileMenu',
        id: 'macosMenubar.fileMenu',
        submenu: [{ role: 'close', id: 'close', order: 8 }],
    },
    {
        label: '%mainMenu_edit%',
        role: 'editMenu',
        id: 'macosMenubar.editMenu',
    },
    {
        label: '%mainMenu_view%',
        role: 'viewMenu',
        id: 'macosMenubar.viewMenu',
    },
    {
        label: '%mainMenu_tab%',
        id: 'macosMenubar.tabMenu',
    },
    {
        label: '%mainMenu_text%',
        id: 'macosMenubar.textMenu',
    },
    {
        label: '%mainMenu_layout%',
        id: 'macosMenubar.layoutMenu',
    },
    {
        label: '%mainMenu_window%',
        role: 'windowMenu',
        id: 'macosMenubar.windowMenu',
    },
    {
        label: '%mainMenu_help%',
        role: 'help',
        id: 'macosMenubar.helpMenu',
        submenu: [],
    },
];


/***/ }),

/***/ "./src/main/platform-macos-menubar.util.ts":
/*!*************************************************!*\
  !*** ./src/main/platform-macos-menubar.util.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   subscribeCurrentMacosMenubar: () => (/* binding */ subscribeCurrentMacosMenubar)
/* harmony export */ });
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _main_platform_macos_menubar_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @main/platform-macos-menubar.data */ "./src/main/platform-macos-menubar.data.ts");
/* harmony import */ var _shared_services_menu_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/menu-data.service */ "./src/shared/services/menu-data.service.ts");
/* harmony import */ var _shared_services_localization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/services/localization.service */ "./src/shared/services/localization.service.ts");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var _shared_data_platform_bible_menu_commands__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @shared/data/platform-bible-menu.commands */ "./src/shared/data/platform-bible-menu.commands.ts");







/**
 * Subscribe to changes in the main menu data and update the macOS menubar accordingly.
 *
 * After subscribing, whenever the main menu data changes, this function will be called with the new
 * menu data. The new menu data will be translated and combined correctly into the structure
 * expected by the Electron Menu API, and then the macOS menubar will be updated with the new menu
 * structure.
 *
 * If there is an error during the translation and combination process, the default macOS menubar
 * will be used instead.
 */
async function subscribeCurrentMacosMenubar() {
    await _shared_services_menu_data_service__WEBPACK_IMPORTED_MODULE_2__.menuDataService.subscribeUnlocalizedMainMenu(undefined, async (menuContent) => {
        let currentMacosMenubarTemplate;
        try {
            currentMacosMenubarTemplate = await translatePlatformMenuItemsAndCombine(menuContent);
        }
        catch (error) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_5__.logger.error('Failed to get current platform menus. Falling back to default macOS menubar.', error);
            currentMacosMenubarTemplate = await fallbackToDefaultMacosMenubar();
        }
        try {
            const coreMacosMenubar = electron__WEBPACK_IMPORTED_MODULE_4__.Menu.buildFromTemplate(currentMacosMenubarTemplate);
            electron__WEBPACK_IMPORTED_MODULE_4__.Menu.setApplicationMenu(coreMacosMenubar);
        }
        catch (error) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_5__.logger.error('Failed to build current macOS menubar', error);
        }
    });
}
function sortMenuAndRemoveAddedProps(localizedMacosMenubar) {
    localizedMacosMenubar.sort((a, b) => (a.order ?? 0) - (b.order ?? 0));
    localizedMacosMenubar.forEach((menu) => {
        if (Array.isArray(menu.submenu)) {
            menu.submenu.sort((a, b) => (a.order ?? 0) - (b.order ?? 0));
            // Remove the `order` property from submenu items
            menu.submenu.forEach((item) => {
                delete item.order;
                delete item.isLabelFormatString;
                // If the submenu item has its own submenu, sort it recursively
                if (Array.isArray(item.submenu)) {
                    item.submenu.sort((a, b) => (a.order ?? 0) - (b.order ?? 0));
                    item.submenu.forEach((subItem) => delete subItem.order);
                }
            });
        }
        // Remove the `order` property from the top-level menu
        delete menu.order;
    });
    // The only difference between MenuItemConstructorOptions[] and LocalizedMacosMenubar is the `order` property
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    return localizedMacosMenubar;
}
/** Returns the default macOS menubar after localizing and formatting it correctly. */
async function fallbackToDefaultMacosMenubar() {
    return sortMenuAndRemoveAddedProps(await localizeMacosMenubar(_main_platform_macos_menubar_data__WEBPACK_IMPORTED_MODULE_1__.macosMenubarObject));
}
async function localizeMacosMenubar(macosMenubar) {
    const localizeKeys = ['%product_name%'];
    macosMenubar.forEach((menu) => {
        if (menu.label)
            localizeKeys.push(menu.label);
        if (menu.toolTip)
            localizeKeys.push(menu.toolTip);
        menu.submenu?.forEach((item) => {
            if (item.label)
                localizeKeys.push(item.label);
            if (item.toolTip)
                localizeKeys.push(item.toolTip);
        });
    });
    const newStrings = await _shared_services_localization_service__WEBPACK_IMPORTED_MODULE_3__.localizationService.getLocalizedStrings({ localizeKeys });
    return macosMenubar.map((menu) => ({
        ...menu,
        label: menu.label ? newStrings[menu.label] : menu.label,
        toolTip: menu.toolTip ? newStrings[menu.toolTip] : menu.toolTip,
        submenu: menu.submenu?.map((item) => ({
            ...item,
            label: (() => {
                if (!item.label)
                    return item.label;
                if (item.isLabelFormatString) {
                    return (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__.formatReplacementString)(newStrings[item.label], newStrings);
                }
                return newStrings[item.label];
            })(),
            toolTip: item.toolTip ? newStrings[item.toolTip] : item.toolTip,
        })),
    }));
}
const getSubMenuKeyForId = (groups, id) => {
    return Object.entries(groups).find(([, value]) => 'menuItem' in value && value.menuItem === id)?.[0];
};
function getMenubarColumnContent(groups, items, columnOrSubMenuKey) {
    if (!columnOrSubMenuKey)
        return [];
    // Object.entries() turns groups into an array of key value pairs. After we filter and map the items, it is a LocalizedMacosMenubar object.
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    return Object.entries(groups)
        .filter(([key, group]) => ('column' in group && group.column === columnOrSubMenuKey) || key === columnOrSubMenuKey)
        .flatMap(([groupKey]) => items
        .filter((item) => item.group === groupKey)
        .map((item) => 'command' in item
        ? {
            label: item.label,
            click: () => (0,_shared_data_platform_bible_menu_commands__WEBPACK_IMPORTED_MODULE_6__.handleMenuCommand)({ label: item.label, command: item.command }),
            order: item.order,
        }
        : {
            label: item.label,
            submenu: getMenubarColumnContent(groups, items, getSubMenuKeyForId(groups, item.id)),
        }));
}
async function translatePlatformMenuItemsAndCombine(currentPlatformMainMenu) {
    // Convert the platform-specific main menu into the correct format
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    const platformMainMenuContent = Object.entries(currentPlatformMainMenu.columns)
        .filter(([, column]) => typeof column === 'object')
        .map(([columnKey, columnData]) => ({
        label: typeof columnData === 'object' ? columnData.label : '',
        order: typeof columnData === 'object' ? columnData.order : 0,
        submenu: getMenubarColumnContent(currentPlatformMainMenu.groups, currentPlatformMainMenu.items, columnKey).filter((menuItem) => menuItem.label !== '%mainMenu_exit%'), // Remove duplicate 'Exit' here
    }));
    const combinedMenubar = [..._main_platform_macos_menubar_data__WEBPACK_IMPORTED_MODULE_1__.macosMenubarObject];
    platformMainMenuContent.forEach((column) => {
        if (!column.submenu || !Array.isArray(column.submenu))
            return;
        const appMenu = combinedMenubar.find((menu) => menu.id === 'macosMenubar.appMenu');
        // Move 'Platform' menu items to macOS generated app menu and remove duplicate app menu
        if (column.label === '%product_shortName%' && appMenu) {
            appMenu.submenu?.push(...column.submenu);
            column.submenu = [];
            column.label = '%%'; // If there is no label, this menu item won't show up
            return;
        }
        const existingMenu = combinedMenubar.find((menu) => menu.label?.toLowerCase() === column.label?.toLowerCase() ||
            menu.role?.toLowerCase() === column.label?.toLowerCase());
        if (existingMenu) {
            existingMenu.submenu = column.submenu;
        }
        else {
            combinedMenubar.push(column);
        }
    });
    const localizedMenu = await localizeMacosMenubar(combinedMenubar);
    return sortMenuAndRemoveAddedProps(localizedMenu);
}


/***/ }),

/***/ "./src/main/services/app.service-host.ts":
/*!***********************************************!*\
  !*** ./src/main/services/app.service-host.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   APP_NAME: () => (/* binding */ APP_NAME),
/* harmony export */   APP_URI_SCHEME: () => (/* binding */ APP_URI_SCHEME),
/* harmony export */   APP_VERSION: () => (/* binding */ APP_VERSION),
/* harmony export */   startAppService: () => (/* binding */ startAppService)
/* harmony export */ });
/* harmony import */ var _shared_services_app_service_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/app.service-model */ "./src/shared/services/app.service-model.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var _release_app_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../release/app/package.json */ "./release/app/package.json");
/* harmony import */ var _release_app_buildInfo_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../release/app/buildInfo.json */ "./release/app/buildInfo.json");




/** Same as {@link AppInfo.name} */
const APP_NAME = _release_app_package_json__WEBPACK_IMPORTED_MODULE_2__.name;
// Construct the app version according to the SemVer specification (pre-release ID already included)
const { build } = _release_app_buildInfo_json__WEBPACK_IMPORTED_MODULE_3__;
/** Same as {@link AppInfo.version} */
const APP_VERSION = `${_release_app_package_json__WEBPACK_IMPORTED_MODULE_2__.version}${build ? `+${build}` : ''}`;
/** Same as {@link AppInfo.uriScheme} */
const APP_URI_SCHEME = APP_NAME;
const APP_INFO = Object.freeze({
    name: APP_NAME,
    version: APP_VERSION,
    uriScheme: APP_URI_SCHEME,
});
async function getAppInfo() {
    return APP_INFO;
}
const appService = {
    getAppInfo,
};
/**
 * Register the network object that backs this service
 *
 * To use this service, you should use `app.service.ts`
 */
async function startAppService() {
    await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__.networkObjectService.set(_shared_services_app_service_model__WEBPACK_IMPORTED_MODULE_0__.appServiceNetworkObjectName, appService);
}


/***/ }),

/***/ "./src/main/services/data-protection.service-host.ts":
/*!***********************************************************!*\
  !*** ./src/main/services/data-protection.service-host.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   startDataProtectionService: () => (/* binding */ startDataProtectionService)
/* harmony export */ });
/* harmony import */ var _shared_models_data_protection_service_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/models/data-protection.service-model */ "./src/shared/models/data-protection.service-model.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_2__);



/** If encryption is not available, return reason why. If encryption is available, return `undefined` */
function getReasonEncryptionIsNotAvailable() {
    if (process.platform === 'linux' && electron__WEBPACK_IMPORTED_MODULE_2__.safeStorage.getSelectedStorageBackend() === 'basic_text')
        return 'safeStorage did not find a keyring service it could use for encryption. Please install a supported service. See https://github.com/paranext/paranext/wiki/How-to-set-up-Platform.Bible-on-Linux#install-a-keyring-service for more information';
    if (!electron__WEBPACK_IMPORTED_MODULE_2__.safeStorage.isEncryptionAvailable()) {
        return 'safeStorage.isEncryptionAvailable returned false';
    }
    return undefined;
}
/** If encryption is not available, throw */
function validateEncryptionAvailable() {
    const reason = getReasonEncryptionIsNotAvailable();
    if (reason) {
        throw new Error(reason);
    }
}
async function isEncryptionAvailable() {
    return getReasonEncryptionIsNotAvailable() === undefined;
}
async function encryptString(text) {
    validateEncryptionAvailable();
    const buffer = electron__WEBPACK_IMPORTED_MODULE_2__.safeStorage.encryptString(text);
    return buffer.toString('base64');
}
async function decryptString(encryptedText) {
    validateEncryptionAvailable();
    const buffer = Buffer.from(encryptedText, 'base64');
    return electron__WEBPACK_IMPORTED_MODULE_2__.safeStorage.decryptString(buffer);
}
const dataProtectionService = {
    isEncryptionAvailable,
    encryptString,
    decryptString,
};
/** Register the network object that backs this service */
async function startDataProtectionService() {
    await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__.networkObjectService.set(_shared_models_data_protection_service_model__WEBPACK_IMPORTED_MODULE_0__.dataProtectionServiceNetworkObjectName, dataProtectionService);
}


/***/ }),

/***/ "./src/main/services/dotnet-data-provider.service.ts":
/*!***********************************************************!*\
  !*** ./src/main/services/dotnet-data-provider.service.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   dotnetDataProvider: () => (/* binding */ dotnetDataProvider)
/* harmony export */ });
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ "child_process");
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");




/** Pretty name for the process this service manages. Used in logs */
const DOTNET_DATA_PROVIDER_NAME = 'dotnet data provider';
let dotnet;
let resolveClose;
const closePromise = new Promise((resolve) => {
    resolveClose = resolve;
});
// log functions for inside the data provider process
function logProcessError(message) {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.error((0,_shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.formatLog)(message?.toString() || '', DOTNET_DATA_PROVIDER_NAME, 'error'));
}
function logProcessInfo(message) {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.info((0,_shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.formatLog)(message?.toString() || '', DOTNET_DATA_PROVIDER_NAME));
}
/** Hard kills the Dotnet Data Provider. */
// TODO: add a more elegant shutdown to avoid this if we possibly can
function killDotnetDataProvider() {
    if (!dotnet)
        return;
    if (dotnet.kill()) {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.info('killed dotnet data provider');
    }
    else {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.error('dotnet data provider was not stopped! Investigate other .kill() options');
    }
    dotnet?.stderr?.removeListener('data', logProcessError);
    dotnet?.stdout?.removeListener('data', logProcessInfo);
    dotnet = undefined;
}
async function waitForDotnetDataProvider(maxWaitTimeInMS) {
    const didClose = await (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.waitForDuration)(async () => {
        await closePromise;
        return true;
    }, maxWaitTimeInMS);
    if (!didClose)
        killDotnetDataProvider();
}
/** Starts the Dotnet Data Provider if it isn't already running. */
function startDotnetDataProvider() {
    if (dotnet)
        return;
    // default values for development
    let command = 'dotnet';
    let args = ['watch', '--project', 'c-sharp/ParanextDataProvider.csproj'];
    let options;
    if (globalThis.isPackaged) {
        const dotnetPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.resourcesPath, 'dotnet');
        if (process.platform === 'win32') {
            command = path__WEBPACK_IMPORTED_MODULE_1___default().join(dotnetPath, 'ParanextDataProvider.exe');
            args = [];
        }
        else {
            command = path__WEBPACK_IMPORTED_MODULE_1___default().join(dotnetPath, 'ParanextDataProvider');
            args = [];
        }
        options = { cwd: dotnetPath };
    }
    dotnet = (0,child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)(command, args, options);
    dotnet.stdout.on('data', logProcessInfo);
    dotnet.stderr.on('data', logProcessError);
    dotnet.once('exit', (code, signal) => {
        if (signal) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.info(`'exit' event: dotnet data provider terminated with signal ${signal}`);
        }
        else {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.info(`'exit' event: dotnet data provider exited with code ${code}`);
        }
        dotnet?.stderr?.removeListener('data', logProcessError);
        dotnet?.stdout?.removeListener('data', logProcessInfo);
        dotnet = undefined;
        resolveClose();
    });
    dotnet.once('close', (code, signal) => {
        // In production, this handles the closing of the data provider. However, in development,
        // this is handling the closing of the dotnet watcher.
        if (signal) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.info(`'close' event: dotnet data provider terminated with signal ${signal}`);
        }
        else {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.info(`'close' event: dotnet data provider exited with code ${code}`);
        }
        dotnet?.stderr?.removeListener('data', logProcessError);
        dotnet?.stdout?.removeListener('data', logProcessInfo);
        dotnet = undefined;
        resolveClose();
    });
}
const dotnetDataProvider = {
    start: startDotnetDataProvider,
    kill: killDotnetDataProvider,
    waitForClose: waitForDotnetDataProvider,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dotnetDataProvider);


/***/ }),

/***/ "./src/main/services/extension-asset-protocol.service.ts":
/*!***************************************************************!*\
  !*** ./src/main/services/extension-asset-protocol.service.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   extensionAssetProtocolService: () => (/* binding */ extensionAssetProtocolService)
/* harmony export */ });
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! http-status-codes */ "./node_modules/http-status-codes/build/es/status-codes.js");
/* harmony import */ var _shared_services_extension_asset_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/extension-asset.service */ "./src/shared/services/extension-asset.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");




/** Here some of the most common MIME types that we expect to handle */
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
// An example of a more complete list: https://www.freeformatter.com/mime-types-list.html
const knownMimeTypes = {
    '.bmp': 'image/bmp',
    '.css': 'text/css',
    '.csv': 'text/csv',
    '.gif': 'image/gif',
    '.htm': 'text/html',
    '.html': 'text/html',
    '.ico': 'image/vnd.microsoft.icon',
    '.jpeg': 'image/jpeg',
    '.jpg': 'image/jpeg',
    '.js': 'text/javascript',
    '.json': 'application/json',
    '.mjs': 'text/javascript',
    '.mp3': 'audio/mpeg',
    '.mp4': 'video/mp4',
    '.mpeg': 'video/mpeg',
    '.png': 'image/png',
    '.svg': 'image/svg+xml',
    '.txt': 'text/plain',
    '.wav': 'audio/wav',
};
/** Lookup the MIME type to pass back to the renderer */
function getMimeTypeForFileName(fileName) {
    const dotIndex = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.lastIndexOf)(fileName, '.');
    if (dotIndex > 0) {
        const fileType = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.substring)(fileName, dotIndex);
        // Assert key type confirmed in check.
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        if (fileType in knownMimeTypes)
            return knownMimeTypes[fileType];
    }
    // Default if we don't find something else
    return 'application/octet-stream';
}
/** Create an HTTP response to pass back to the renderer */
function errorResponse(url, httpErrorNumber) {
    return new Response(`Failed to load resource: ${url}`, {
        status: httpErrorNumber,
        headers: {
            'Content-Type': 'text/plain',
        },
    });
}
const protocolName = 'papi-extension';
/** Promise that resolves when this service is finished initializing */
let initializePromise;
/** Register the protocol handler for extension asset loading */
const initialize = () => {
    if (initializePromise)
        return initializePromise;
    initializePromise = (async () => {
        electron__WEBPACK_IMPORTED_MODULE_0__.protocol.handle(protocolName, async (request) => {
            // Ideas to consider:
            // 1) Check the referer for localhost to block arbitrary internet content from getting extension assets.
            // 2) Use request headers to pass along the extension name so extension code doesn't have to embed its name in URLs.
            // Remove "papi-extension://" from the front of the URL
            const uri = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.substring)(request.url, (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.stringLength)(`${protocolName}://`));
            // There have to be at least 2 parts to the URI divided by a slash
            if (!(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.includes)(uri, '/')) {
                return errorResponse(request.url, http_status_codes__WEBPACK_IMPORTED_MODULE_3__.StatusCodes.BAD_REQUEST);
            }
            const slash = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.indexOf)(uri, '/');
            let extension = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.substring)(uri, 0, slash);
            let asset = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.substring)(uri, slash + 1);
            if (!extension || !asset) {
                return errorResponse(request.url, http_status_codes__WEBPACK_IMPORTED_MODULE_3__.StatusCodes.BAD_REQUEST);
            }
            // It's possible the extension and/or asset were encoded because they have characters not
            // allowed in URLs. So let's decode both of them before passing them to the extension host.
            extension = decodeURIComponent(extension);
            asset = decodeURIComponent(asset);
            if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.stringLength)(extension) > 100 || (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.stringLength)(asset) > 100) {
                return errorResponse(request.url, http_status_codes__WEBPACK_IMPORTED_MODULE_3__.StatusCodes.BAD_REQUEST);
            }
            // Actually get the data
            const base64Data = await _shared_services_extension_asset_service__WEBPACK_IMPORTED_MODULE_1__.extensionAssetService.getExtensionAsset(extension, asset);
            if (!base64Data) {
                return errorResponse(request.url, http_status_codes__WEBPACK_IMPORTED_MODULE_3__.StatusCodes.NOT_FOUND);
            }
            // Pass back the data to the renderer
            return new Response(Buffer.from(base64Data, 'base64'), {
                status: http_status_codes__WEBPACK_IMPORTED_MODULE_3__.StatusCodes.OK,
                headers: {
                    'Content-Type': getMimeTypeForFileName(asset),
                },
            });
        });
    })();
    return initializePromise;
};
/**
 * Initialize a handler for protocol strings like the following:
 *
 * - `papi-extension://extension-name/assets/asset.xyz` -> load "asset.xyz" from "assets" directory in
 *   "extension-name"
 * - `papi-extension://extension-name/assets/subdirectory/asset.xyz` -> load "asset.xyz" from
 *   "assets/subdirectory" directory in "extension-name"
 */
const extensionAssetProtocolService = {
    initialize,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extensionAssetProtocolService);


/***/ }),

/***/ "./src/main/services/extension-host.service.ts":
/*!*****************************************************!*\
  !*** ./src/main/services/extension-host.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   extensionHostService: () => (/* binding */ extensionHostService)
/* harmony export */ });
/* harmony import */ var _node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @node/utils/command-line.util */ "./src/node/utils/command-line.util.ts");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! child_process */ "child_process");
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! electron */ "electron");
/* harmony import */ var electron__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(electron__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fs/promises */ "fs/promises");
/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _node_models_interprocess_messages_model__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @node/models/interprocess-messages.model */ "./src/node/models/interprocess-messages.model.ts");
/** Service that runs the extension-host process from the main file */








/** Pretty name for the process this service manages. Used in logs */
const EXTENSION_HOST_NAME = 'extension host';
let processInstanceCounter = 0;
// Resolves to the current process instance counter value for debug logging purposes
let processLifetimeVariable;
let extensionHost;
function createNewProcessLifetimeVariable() {
    if (processLifetimeVariable)
        throw new Error('Previous instance of the extension host process was not cleaned up');
    processInstanceCounter += 1;
    processLifetimeVariable = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.AsyncVariable(`extension host shutting down #${processInstanceCounter.toString()}`, -1);
}
function resolveProcessLifetimeVariable() {
    if (!processLifetimeVariable)
        throw new Error('Extension host process tracking was not properly initialized');
    processLifetimeVariable.resolveToValue(processInstanceCounter);
    processLifetimeVariable = undefined;
}
// log functions for inside the extension host process
function logProcessError(message) {
    let msg = message?.toString() ?? '';
    if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.includes)(msg, _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.WARN_TAG)) {
        msg = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.split)(msg, _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.WARN_TAG).join('');
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.warn((0,_shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.formatLog)(msg, EXTENSION_HOST_NAME, 'warning'));
    }
    else
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.error((0,_shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.formatLog)(msg, EXTENSION_HOST_NAME, 'error'));
}
function logProcessInfo(message) {
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info((0,_shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.formatLog)(message?.toString() ?? '', EXTENSION_HOST_NAME));
}
async function waitForExtensionHost(maxWaitTimeInMS) {
    let didExit = await (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.waitForDuration)(async () => {
        if (!processLifetimeVariable) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.warn('Extension host process lifetime variable was not initialized');
            return false;
        }
        // This does nothing in development because nodemon is in the way, but the hard kill will work
        extensionHost?.send(_node_models_interprocess_messages_model__WEBPACK_IMPORTED_MODULE_7__.gracefulShutdownMessage, (error) => {
            if (error)
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Error sending graceful shutdown message: ${error}`);
        });
        await processLifetimeVariable.promise;
        return true;
    }, maxWaitTimeInMS / 2);
    if (!didExit)
        hardKillExtensionHost();
    // Give the hard "kill" time to complete before returning so we don't restart too soon
    didExit = await (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.waitForDuration)(async () => {
        if (processLifetimeVariable)
            await processLifetimeVariable.promise;
        return true;
    }, maxWaitTimeInMS / 2);
    if (!didExit)
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Extension host did not exit within ${maxWaitTimeInMS.toString()} ms`);
}
async function restartExtensionHost(maxWaitTimeInMS) {
    if (globalThis.isPackaged) {
        await waitForExtensionHost(maxWaitTimeInMS);
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.debug('Extension host closed, restarting now');
        return startExtensionHost();
    }
    // Tells nodemon to restart the process https://github.com/remy/nodemon/blob/HEAD/doc/events.md#using-nodemon-as-child-process
    extensionHost?.send('restart');
}
function hardKillExtensionHost() {
    if (!extensionHost)
        return;
    // On POSIX systems, SIGKILL should immediately terminate the process by the OS.
    // On Windows the signal is ignored. Node.js tries to hard kill the process in some other way.
    if (extensionHost.kill('SIGKILL')) {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info('signal sent to kill extension host process');
    }
    else {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.error('extension host process was not stopped! Investigate other .kill() options');
    }
    extensionHost?.stderr?.removeListener('data', logProcessError);
    extensionHost?.stdout?.removeListener('data', logProcessInfo);
    extensionHost = undefined;
}
/**
 * Returns an array of the command-line arguments to forward from main (when launching paranext) to
 * the extension host process.
 */
function getCommandLineArgumentsToForward() {
    // Pass through the relevant command-line arguments to the extension host
    return [
        ...(0,_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.getCommandLineArgumentsGroup)(_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.COMMAND_LINE_ARGS.Extensions, true),
        ...(0,_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.getCommandLineArgumentsGroup)(_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.COMMAND_LINE_ARGS.ExtensionsDir, true),
    ];
}
/**
 * Read the contents of a JSON file.
 *
 * @param filePath - A path to a file. If a URL is provided, it must use the file: protocol. If a
 *   FileHandle is provided, the underlying file will not be closed automatically.
 * @returns The JSON file contents.
 * @see https://stackoverflow.com/questions/70601733/dynamic-import-with-json-file-doesnt-work-typescript
 */
async function readJsonFile(filePath) {
    const file = await (0,fs_promises__WEBPACK_IMPORTED_MODULE_5__.readFile)(filePath, 'utf8');
    return JSON.parse(file);
}
/** Starts the extension host process if it isn't already running. */
async function startExtensionHost() {
    if (extensionHost)
        return;
    createNewProcessLifetimeVariable();
    // In production, fork a new process for the extension host
    // In development, spawn nodemon to watch the extension-host
    /** Arguments that will be passed to the extension host no matter how we start the process */
    const sharedArgs = [
        _node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.commandLineArgumentsAliases[_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.COMMAND_LINE_ARGS.ResourcesPath][0],
        globalThis.resourcesPath,
        _node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.commandLineArgumentsAliases[_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.COMMAND_LINE_ARGS.LogLevel][0],
        globalThis.logLevel,
        ...getCommandLineArgumentsToForward(),
    ];
    if (electron__WEBPACK_IMPORTED_MODULE_4__.app.isPackaged) {
        extensionHost = (0,child_process__WEBPACK_IMPORTED_MODULE_3__.fork)(path__WEBPACK_IMPORTED_MODULE_6___default().join(__dirname, '../extension-host/extension-host.js'), [
            _node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.commandLineArgumentsAliases[_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.COMMAND_LINE_ARGS.Packaged][0],
            ...(process.env.PORTABLE_EXECUTABLE_FILE
                ? [_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.commandLineArgumentsAliases[_node_utils_command_line_util__WEBPACK_IMPORTED_MODULE_0__.COMMAND_LINE_ARGS.Portable][0]]
                : []),
            ...sharedArgs,
        ], {
            stdio: ['ignore', 'pipe', 'pipe', 'ipc'],
        });
    }
    else {
        // If we are in development, get the nodemon watch config so we can pass it in along with the
        // external extension directories.
        // For this dev-only code, it is useful to be able to get the nodemon.json file.
        const nodemonConfig = await readJsonFile(path__WEBPACK_IMPORTED_MODULE_6___default().join(globalThis.resourcesPath, 'nodemon.json'));
        const nodemonWatchPaths = nodemonConfig?.watch ? nodemonConfig.watch : [];
        extensionHost = (0,child_process__WEBPACK_IMPORTED_MODULE_3__.spawn)('node', [
            'node_modules/nodemon/bin/nodemon.js',
            // Provide the nodemon config paths and command-line argument extension paths as watch
            // directories for nodemon
            ...nodemonWatchPaths.flatMap((watchPath) => ['--watch', watchPath]),
            '--transpile-only',
            './src/extension-host/extension-host.ts',
            '--',
            ...sharedArgs,
        ], {
            stdio: ['ignore', 'pipe', 'pipe', 'ipc'],
            env: { ...process.env, NODE_ENV: 'development' },
        });
    }
    if (!extensionHost.stderr || !extensionHost.stdout)
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.error("Could not connect to extension host's stderr or stdout! You will not see extension host console logs here.");
    else {
        extensionHost.stderr.on('data', logProcessError);
        extensionHost.stdout.on('data', logProcessInfo);
    }
    extensionHost.once('exit', (code, signal) => {
        if (signal) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info(`'exit' event: extension host process terminated with signal ${signal}`);
        }
        else {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info(`'exit' event: extension host process exited with code ${code}`);
        }
        extensionHost?.stderr?.removeListener('data', logProcessError);
        extensionHost?.stdout?.removeListener('data', logProcessInfo);
        extensionHost = undefined;
        resolveProcessLifetimeVariable();
    });
}
/** Service that runs the extension-host process from the main file */
const extensionHostService = {
    start: startExtensionHost,
    kill: hardKillExtensionHost,
    waitForClose: waitForExtensionHost,
    restart: restartExtensionHost,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extensionHostService);


/***/ }),

/***/ "./src/main/services/network-object-status.service-host.ts":
/*!*****************************************************************!*\
  !*** ./src/main/services/network-object-status.service-host.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   startNetworkObjectStatusService: () => (/* binding */ startNetworkObjectStatusService)
/* harmony export */ });
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var _shared_models_network_object_status_service_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/models/network-object-status.service-model */ "./src/shared/models/network-object-status.service-model.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");



// We are assuming these events get hooked up before any network objects get registered. That allows
// us to start from a clean map. If somehow network objects can be registered before we hook up
// the events, then we have to figure out a way to insert pre-existing objects into the map in a way
// that avoids race conditions with the events that fire around the same time.
const networkObjectIDsToDetails = new Map();
(0,_shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_2__.onDidCreateNetworkObject)((networkObjectDetails) => {
    if (networkObjectIDsToDetails.has(networkObjectDetails.id))
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`Re-saving network object details for ${networkObjectDetails.id}`);
    networkObjectIDsToDetails.set(networkObjectDetails.id, networkObjectDetails);
});
(0,_shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_2__.onDidDisposeNetworkObject)((networkObjectId) => {
    if (!networkObjectIDsToDetails.delete(networkObjectId))
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_0__.logger.warn(`Notification of disposed object ${networkObjectId} that was previously unknown`);
});
// Making this async to align with the service model even though it could really be synchronous
async function getAllNetworkObjectDetails() {
    const allNetworkObjectDetails = {};
    networkObjectIDsToDetails.forEach((value, key) => {
        allNetworkObjectDetails[key] = value;
    });
    return Promise.resolve(allNetworkObjectDetails);
}
const networkObjectStatusService = {
    getAllNetworkObjectDetails,
};
/** Register the network object that backs the network object status service */
async function startNetworkObjectStatusService() {
    await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_2__.networkObjectService.set(_shared_models_network_object_status_service_model__WEBPACK_IMPORTED_MODULE_1__.networkObjectStatusServiceNetworkObjectName, networkObjectStatusService);
}


/***/ }),

/***/ "./src/main/services/project-lookup.service-host.ts":
/*!**********************************************************!*\
  !*** ./src/main/services/project-lookup.service-host.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   startProjectLookupService: () => (/* binding */ startProjectLookupService)
/* harmony export */ });
/* harmony import */ var _shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/models/project-lookup.service-model */ "./src/shared/models/project-lookup.service-model.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");


const projectLookupService = _shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_0__.projectLookupServiceBase;
/**
 * Register the network object that mirrors the locally-run project lookup service exposed on the
 * PAPI websocket.
 *
 * This service runs fully locally from `project-lookup.service.ts`. This is here to provide
 * lookup-related services to other processes on the PAPI websocket
 */
// To use this service, you should use `project-lookup.service.ts`.
async function startProjectLookupService() {
    await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__.networkObjectService.set(_shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_0__.NETWORK_OBJECT_NAME_PROJECT_LOOKUP_SERVICE, projectLookupService, undefined, undefined, {
        summary: 'Provides metadata for projects known by the platform',
        methods: [
            {
                name: 'getMetadataForAllProjects',
                summary: 'Provide metadata for all projects that have PDP factories',
                description: 'Note: If there are multiple PDPs available whose metadata matches the conditions provided by the parameters, their project metadata will all be combined, so all available `projectInterface`s provided by the PDP Factory with the matching ID (or all PDP Factories if no ID is specified) for the project will be returned.',
                params: [
                    {
                        name: 'options',
                        required: false,
                        summary: 'Options for specifying filters for the project metadata retrieved. If a PDP Factory ID does not match the filter, it will not be contacted at all for this function call. As a result, a PDP factory that intends to layer over other PDP factories **must** specify its ID in `options.excludePdpFactoryIds` to avoid an infinite loop of calling this function.',
                        schema: {
                            $ref: '#/components/schemas/ProjectMetadataFilterOptions',
                        },
                    },
                ],
                result: {
                    name: 'return value',
                    schema: {
                        type: 'array',
                        items: {
                            $ref: '#/components/schemas/ProjectMetadata',
                        },
                    },
                },
            },
        ],
        components: {
            schemas: {
                ProjectMetadata: {
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            description: 'ID of the project (must be unique and case insensitive)',
                        },
                        projectInterfaces: {
                            type: 'array',
                            description: 'All `projectInterface`s (aka standardized sets of methods on a PDP) that Project Data Providers for this project support. Indicates what sort of project data should be available on this project.',
                            items: { type: 'string' },
                        },
                        pdpFactoryInfo: {
                            type: 'object',
                            description: 'Information about the PDP Factories associated with the project.',
                        },
                    },
                },
                ProjectMetadataFilterOptions: {
                    type: 'object',
                    properties: {
                        includePdpFactoryIds: {
                            type: 'array',
                            items: {
                                type: 'string',
                            },
                            description: 'List of PDP Factory Ids to include in the metadata retrieval.',
                        },
                        excludePdpFactoryIds: {
                            type: 'array',
                            items: {
                                type: 'string',
                            },
                            description: 'List of PDP Factory Ids to exclude from the metadata retrieval.',
                        },
                        projectIds: {
                            type: 'array',
                            items: {
                                type: 'string',
                            },
                            description: 'List of project Ids to filter the metadata retrieval.',
                        },
                    },
                    additionalProperties: false,
                    description: 'Options for specifying filters for the project metadata retrieved.',
                },
            },
        },
    });
}


/***/ }),

/***/ "./src/node/models/interprocess-messages.model.ts":
/*!********************************************************!*\
  !*** ./src/node/models/interprocess-messages.model.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   gracefulShutdownMessage: () => (/* binding */ gracefulShutdownMessage),
/* harmony export */   heartbeatMessage: () => (/* binding */ heartbeatMessage)
/* harmony export */ });
const gracefulShutdownMessage = 'gracefulShutdown';
const heartbeatMessage = 'heartbeat';


/***/ }),

/***/ "./src/node/polyfills/local-storage.polyfill.ts":
/*!******************************************************!*\
  !*** ./src/node/polyfills/local-storage.polyfill.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   polyfillLocalStorage: () => (/* binding */ polyfillLocalStorage)
/* harmony export */ });
/* harmony import */ var _node_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @node/utils/util */ "./src/node/utils/util.ts");
/* harmony import */ var node_localstorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-localstorage */ "./node_modules/node-localstorage/LocalStorage.js");
/* harmony import */ var node_localstorage__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_localstorage__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);



/** Polyfills LocalStorage into node so you can use localstorage just like in a browser */
const polyfillLocalStorage = () => {
    // Polyfill logic needs null
    // eslint-disable-next-line no-null/no-null
    if (typeof localStorage === 'undefined' || localStorage === null) {
        global.localStorage = new node_localstorage__WEBPACK_IMPORTED_MODULE_1__.LocalStorage(path__WEBPACK_IMPORTED_MODULE_2___default().join((0,_node_utils_util__WEBPACK_IMPORTED_MODULE_0__.getAppDir)(), `local-storage/${globalThis.processType}/`));
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (polyfillLocalStorage);


/***/ }),

/***/ "./src/node/services/extension.service-model.ts":
/*!******************************************************!*\
  !*** ./src/node/services/extension.service-model.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CATEGORY_EXTENSION_SERVICE: () => (/* binding */ CATEGORY_EXTENSION_SERVICE),
/* harmony export */   HANDLE_URI_REQUEST_TYPE: () => (/* binding */ HANDLE_URI_REQUEST_TYPE)
/* harmony export */ });
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");

/** Prefix on requests that indicates that the request is related to extension service operations */
const CATEGORY_EXTENSION_SERVICE = 'extensionService';
/** Serialized request type for request sent from main to extension service to handle a uri redirect */
const HANDLE_URI_REQUEST_TYPE = (0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_0__.serializeRequestType)(CATEGORY_EXTENSION_SERVICE, 'handleUri');


/***/ }),

/***/ "./src/node/utils/command-line.util.ts":
/*!*********************************************!*\
  !*** ./src/node/utils/command-line.util.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   COMMAND_LINE_ARGS: () => (/* binding */ COMMAND_LINE_ARGS),
/* harmony export */   commandLineArgumentsAliases: () => (/* binding */ commandLineArgumentsAliases),
/* harmony export */   findNextCommandLineArgumentIndex: () => (/* binding */ findNextCommandLineArgumentIndex),
/* harmony export */   getCommandLineArgument: () => (/* binding */ getCommandLineArgument),
/* harmony export */   getCommandLineArgumentsGroup: () => (/* binding */ getCommandLineArgumentsGroup),
/* harmony export */   getCommandLineSwitch: () => (/* binding */ getCommandLineSwitch)
/* harmony export */ });
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");

/**
 * Command Line Arguments
 *
 * - Extensions - Command-line argument that specifies extra individual extension folders
 * - ExtensionsDir - Command-line argument that specifies extra extension directories in which to
 *   check all contained folders for extensions
 * - LogLevel - Command-line argument that specifies log level to use Options: 'error' | 'warn' |
 *   'info' | 'verbose' | 'debug'
 * - ResourcesPath - Command-line argument that specifies the path to the resources folder
 * - Packaged - Command-line switch that specifies if the application is packaged. Only on
 *   extension-host
 * - Portable - Command-line switch that specifies if the application is a windows portable app. Only
 *   on extension-host
 */
var COMMAND_LINE_ARGS;
(function (COMMAND_LINE_ARGS) {
    COMMAND_LINE_ARGS["Extensions"] = "extensions";
    COMMAND_LINE_ARGS["ExtensionsDir"] = "extensions_dir";
    COMMAND_LINE_ARGS["LogLevel"] = "log_level";
    COMMAND_LINE_ARGS["ResourcesPath"] = "resources_path";
    COMMAND_LINE_ARGS["Packaged"] = "packaged";
    COMMAND_LINE_ARGS["Portable"] = "portable";
})(COMMAND_LINE_ARGS || (COMMAND_LINE_ARGS = {}));
/**
 * Aliases for each command line argument mapped from argument type to an array of aliases for that
 * argument type
 */
const commandLineArgumentsAliases = {
    [COMMAND_LINE_ARGS.Extensions]: ['--extensions', '--extension', '-e'],
    [COMMAND_LINE_ARGS.ExtensionsDir]: ['--extensionDirs', '--extensionDir', '-d'],
    [COMMAND_LINE_ARGS.LogLevel]: ['--logLevels', '--logLevel', '-l'],
    [COMMAND_LINE_ARGS.ResourcesPath]: ['--resourcesPath', '--resourcePath', '-r'],
    [COMMAND_LINE_ARGS.Packaged]: ['--packaged', '--isPackaged', '-p'],
    [COMMAND_LINE_ARGS.Portable]: ['--portable'],
};
/** Get the index of the next command-line argument after the startIndex */
function findNextCommandLineArgumentIndex(currentArgIndex) {
    let endOfExtensionsIndex = process.argv.length;
    for (let i = currentArgIndex + 1; i < process.argv.length; i++)
        if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__.startsWith)(process.argv[i], '-')) {
            endOfExtensionsIndex = i;
            break;
        }
    return endOfExtensionsIndex;
}
/**
 * Get a command-line argument's group of arguments. If no arguments are in its group, return
 * nothing
 *
 * @param argName Name(s) of the command-line argument to search for
 * @param shouldIncludeArgName Whether to include `argName` at the start of the returned array
 * @returns Array of strings of the command-line args in this command-line argument group
 *
 *   Ex: '--things ben chuck jerry'
 *
 *   - `getCommandLineArgumentsGroup('--things')` returns `['ben', 'chuck', 'jerry']`
 *   - `getCommandLineArgumentsGroup('--things', true)` returns `['--things', 'ben', 'chuck', 'jerry']`
 *
 *   Ex: '--things --stuff ben chuck jerry'
 *
 *   - `getCommandLineArgumentsGroup('--things')` returns `[]`
 *   - `getCommandLineArgumentsGroup('--things', true)` returns `['--things']`
 *
 *   Ex: '--stuff ben chuck jerry'
 *
 *   - `getCommandLineArgumentsGroup('--things')` returns `[]`
 *   - `getCommandLineArgumentsGroup('--things', true)` returns `[]`
 */
function getCommandLineArgumentsGroup(argName, shouldIncludeArgName = false) {
    const argNames = commandLineArgumentsAliases[argName];
    const argumentsGroup = [];
    argNames
        .filter((n) => process.argv.indexOf(n) >= 0)
        .forEach((arg) => {
        const argIndex = process.argv.indexOf(arg);
        const baseArray = shouldIncludeArgName ? [arg] : [];
        argumentsGroup.push(...(process.argv.length > argIndex + 1
            ? [
                ...baseArray,
                ...process.argv.slice(argIndex + 1, findNextCommandLineArgumentIndex(argIndex)),
            ]
            : baseArray));
    });
    return argumentsGroup;
}
/**
 * Get a command-line argument's argument. If the argument is not present, return `undefined`
 *
 * @param argName Name and aliases of the command-line argument to search for
 * @returns String of the command-line arg provided
 *
 *   Ex: '--thing ben'
 *
 *   - `getCommandLineArgument('--thing')` returns `'ben'`
 */
function getCommandLineArgument(argName) {
    // TODO: If argName has two hyphens, check for single hyphen and first char + capitals if
    // two-hyphen version does not exist. eg --extensionDirs -> -ed
    const argNames = commandLineArgumentsAliases[argName];
    const argIndices = argNames.map((name) => process.argv.indexOf(name));
    const argIndex = argIndices.find((index) => 
    // Will be negative if not found
    index >= 0 &&
        //  Ensuring it is not the last argument (the arg name was found, but there is no actual argument provided)
        index < process.argv.length - 1 &&
        // If the next word is also an arg name, there was no actual argument provided
        findNextCommandLineArgumentIndex(index) !== index + 1);
    if (argIndex === undefined)
        return undefined;
    return process.argv[argIndex + 1];
}
/**
 * Determine whether a command-line argument name is present
 *
 * (a switch is a command-line argument without a value - just a boolean)
 *
 * @param argName Name of the switch to look for
 * @returns True if present, false otherwise
 *
 *   Ex: '--thing --stuff bologna'
 *
 *   - `getCommandLineSwitch('--thing')` returns `true`
 */
function getCommandLineSwitch(argName) {
    const argNames = commandLineArgumentsAliases[argName];
    return argNames.some((alias) => process.argv.includes(alias));
}


/***/ }),

/***/ "./src/node/utils/util.ts":
/*!********************************!*\
  !*** ./src/node/utils/util.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FILE_PROTOCOL: () => (/* binding */ FILE_PROTOCOL),
/* harmony export */   RESOURCES_PROTOCOL: () => (/* binding */ RESOURCES_PROTOCOL),
/* harmony export */   getAppDir: () => (/* binding */ getAppDir),
/* harmony export */   getPathFromUri: () => (/* binding */ getPathFromUri),
/* harmony export */   isNoisyDevModeEnvVariableSet: () => (/* binding */ isNoisyDevModeEnvVariableSet),
/* harmony export */   joinUriPaths: () => (/* binding */ joinUriPaths),
/* harmony export */   resolveHtmlPath: () => (/* binding */ resolveHtmlPath)
/* harmony export */ });
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ "url");
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! os */ "os");
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! memoize-one */ "./node_modules/memoize-one/dist/memoize-one.esm.js");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/** Utilities useful for node processes */





// FOR SCHEME DOCUMENTATION, SEE Uri JSDOC
const APP_SCHEME = 'app';
const CACHE_SCHEME = 'cache';
const CACHE_DIR_NAME = CACHE_SCHEME;
const DATA_SCHEME = 'data';
const DATA_DIR_NAME = DATA_SCHEME;
const RESOURCES_SCHEME = 'resources';
const FILE_SCHEME = 'file';
const PROTOCOL_PART = '://';
const FILE_PROTOCOL = `${FILE_SCHEME}${PROTOCOL_PART}`;
const RESOURCES_PROTOCOL = `${RESOURCES_SCHEME}${PROTOCOL_PART}`;
function resolveHtmlPath(htmlFileName) {
    if (true) {
        const port = process.env.PORT || 1212;
        const url = new url__WEBPACK_IMPORTED_MODULE_0__.URL(`http://localhost:${port}`);
        url.pathname = htmlFileName;
        return url.href;
    }
    return `${FILE_PROTOCOL}${path__WEBPACK_IMPORTED_MODULE_1___default().resolve(__dirname, '../renderer/', htmlFileName)}`;
}
/**
 * Gets the platform-specific user Platform.Bible folder for this application
 *
 * When running in development: `<repo_directory>/dev-appdata`
 *
 * When packaged: `<user_home_directory>/.platform.bible`
 */
const getAppDir = (0,memoize_one__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    return globalThis.isPackaged
        ? path__WEBPACK_IMPORTED_MODULE_1___default().join(os__WEBPACK_IMPORTED_MODULE_2___default().homedir(), '/.platform.bible')
        : path__WEBPACK_IMPORTED_MODULE_1___default().join(__dirname, '../../../dev-appdata');
});
// FOR SCHEME DOCUMENTATION, SEE Uri JSDOC
/** Get a mapping from scheme to the absolute path to that scheme. */
// TODO: this is currently lazy-loaded because globalThis doesn't get populated until after this
// file is imported. Fix this to be a normal object after fixing globalThis import dependencies.
const getSchemePaths = (0,memoize_one__WEBPACK_IMPORTED_MODULE_4__["default"])(() => {
    const appDir = getAppDir();
    return {
        [APP_SCHEME]: appDir,
        [CACHE_SCHEME]: path__WEBPACK_IMPORTED_MODULE_1___default().join(appDir, CACHE_DIR_NAME),
        [DATA_SCHEME]: path__WEBPACK_IMPORTED_MODULE_1___default().join(appDir, DATA_DIR_NAME),
        [RESOURCES_SCHEME]: globalThis.resourcesPath,
        [FILE_SCHEME]: '',
    };
});
/** Parse a URI from a string into its original parts. */
// TODO: Make URI an actual class. Will be challenging when passing through WebSocket
function getPathInfoFromUri(uri) {
    // Add app scheme to the uri if it doesn't have one
    const fullUri = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.includes)(uri, PROTOCOL_PART) ? uri : `${APP_SCHEME}${PROTOCOL_PART}${uri}`;
    const [scheme, uriPath] = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.split)(fullUri, PROTOCOL_PART);
    return {
        scheme,
        uriPath,
    };
}
/**
 * Resolves the uri to a path
 *
 * @param uri The uri to resolve
 * @returns Real path to the uri supplied
 */
function getPathFromUri(uri) {
    const { scheme, uriPath } = getPathInfoFromUri(uri);
    return path__WEBPACK_IMPORTED_MODULE_1___default().join(getSchemePaths()[scheme], uriPath);
}
/**
 * Combines the uri passed in with the paths passed in to make one uri
 *
 * @param uri Uri to start from
 * @param paths Paths to combine into the uri
 * @returns One uri that combines the uri and the paths in left-to-right order
 */
function joinUriPaths(uri, ...paths) {
    const { scheme, uriPath } = getPathInfoFromUri(uri);
    return `${scheme}${PROTOCOL_PART}${path__WEBPACK_IMPORTED_MODULE_1___default().join(uriPath, ...paths)}`;
}
/**
 * Determines if running in noisy dev mode
 *
 * @returns True if the process is running in noisy dev mode, false otherwise
 */
const isNoisyDevModeEnvVariableSet = () => !!process.env.DEV_NOISY && process.env.DEV_NOISY === 'true';


/***/ }),

/***/ "./src/shared/data/platform-bible-menu.commands.ts":
/*!*********************************************************!*\
  !*** ./src/shared/data/platform-bible-menu.commands.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handleMenuCommand: () => (/* binding */ handleMenuCommand)
/* harmony export */ });
/* harmony import */ var _shared_services_command_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/command.service */ "./src/shared/services/command.service.ts");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");


/**
 * Run a command from a menu
 *
 * @param command Info about the command to run
 * @param tabId The id of the dock layout tab on which the menu command is being run (if the tab is
 *   a web view, this is the same as the web view id) or `undefined` if run from the top menu
 */
function handleMenuCommand(command, tabId) {
    switch (command.command) {
        case 'platform.openProjectDialog':
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info(`Open Project Dialog. tabId: ${tabId}`);
            break;
        case 'platform.openDownloadUpdateProjectDialog':
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info(`Download/Update Project Dialog. tabId: ${tabId}`);
            break;
        case 'platform.downloadAndInstallResources':
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info(`TODO: display UI to select resources. tabId: ${tabId}`);
            break;
        case 'platform.openTextCollection':
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info(`TODO: display text collection modal. tabId: ${tabId}`);
            break;
        case 'platform.visitSupportPage':
            (async () => {
                try {
                    // Assert the more specific type.
                    // eslint-disable-next-line no-type-assertion/no-type-assertion
                    await _shared_services_command_service__WEBPACK_IMPORTED_MODULE_0__.sendCommand('platform.openWindow', 'https://support.bible');
                }
                catch (e) {
                    throw new Error(`handleMenuCommand error: command: ${command.command}, tabId: ${tabId}. ${e}`);
                }
            })();
            break;
        case 'platform.about':
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.info(`TODO: display about. tabId: ${tabId}`);
            break;
        default:
            (async () => {
                try {
                    // Assert the more specific type.
                    // eslint-disable-next-line no-type-assertion/no-type-assertion
                    await _shared_services_command_service__WEBPACK_IMPORTED_MODULE_0__.sendCommand(command.command, tabId);
                }
                catch (e) {
                    throw new Error(`handleMenuCommand error: command: ${command.command}, tabId: ${tabId}. ${e}`);
                }
            })();
    }
}


/***/ }),

/***/ "./src/shared/data/platform.data.ts":
/*!******************************************!*\
  !*** ./src/shared/data/platform.data.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEV_MODE_RENDERER_INDICATOR: () => (/* binding */ DEV_MODE_RENDERER_INDICATOR),
/* harmony export */   PLATFORM_NAMESPACE: () => (/* binding */ PLATFORM_NAMESPACE)
/* harmony export */ });
/**
 * Namespace to use for features like commands, settings, etc. on the PAPI that are provided by
 * Platform.Bible core
 */
const PLATFORM_NAMESPACE = 'platform';
/** Query string passed to the renderer when starting if it should enable noisy dev mode */
const DEV_MODE_RENDERER_INDICATOR = '?noisyDevMode';


/***/ }),

/***/ "./src/shared/data/rpc.model.ts":
/*!**************************************!*\
  !*** ./src/shared/data/rpc.model.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CATEGORY_COMMAND: () => (/* binding */ CATEGORY_COMMAND),
/* harmony export */   ConnectionStatus: () => (/* binding */ ConnectionStatus),
/* harmony export */   GET_METHODS: () => (/* binding */ GET_METHODS),
/* harmony export */   REGISTER_METHOD: () => (/* binding */ REGISTER_METHOD),
/* harmony export */   UNREGISTER_METHOD: () => (/* binding */ UNREGISTER_METHOD),
/* harmony export */   WEBSOCKET_PORT: () => (/* binding */ WEBSOCKET_PORT),
/* harmony export */   createErrorResponse: () => (/* binding */ createErrorResponse),
/* harmony export */   createRequest: () => (/* binding */ createRequest),
/* harmony export */   createSuccessResponse: () => (/* binding */ createSuccessResponse),
/* harmony export */   deserializeMessage: () => (/* binding */ deserializeMessage),
/* harmony export */   fixupResponse: () => (/* binding */ fixupResponse),
/* harmony export */   requestWithRetry: () => (/* binding */ requestWithRetry),
/* harmony export */   sendPayloadToWebSocket: () => (/* binding */ sendPayloadToWebSocket)
/* harmony export */ });
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! json-rpc-2.0 */ "./node_modules/json-rpc-2.0/dist/index.js");
/* harmony import */ var json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");



/** Port to use for the WebSocket */
const WEBSOCKET_PORT = 8876;
/** How many times to try sending a request before giving up if the request is not yet registered */
const MAX_REQUEST_ATTEMPTS = 10;
/** How long in ms to wait between request attempts if the request is not yet registered */
const REQUEST_ATTEMPT_WAIT_TIME_MS = 1000;
/**
 * Whether an RPC object is setting up or has finished setting up its connection and is ready to
 * communicate on the network
 */
var ConnectionStatus;
(function (ConnectionStatus) {
    /** Not connected to the network */
    ConnectionStatus[ConnectionStatus["Disconnected"] = 0] = "Disconnected";
    /** Attempting to connect to the network */
    ConnectionStatus[ConnectionStatus["Connecting"] = 1] = "Connecting";
    /** Finished setting up its connection */
    ConnectionStatus[ConnectionStatus["Connected"] = 2] = "Connected";
})(ConnectionStatus || (ConnectionStatus = {}));
/**
 * Create a JSONRPCRequest message
 *
 * @param requestType Indicates what to do with the request
 * @param requestParams Parameters to pass along when the request is processed
 * @param requestId Unique ID for this connection of this request
 * @returns JSONRPCRequest message that can be serialized and sent over a connection
 */
function createRequest(requestType, requestParams, requestId) {
    return { jsonrpc: json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1__.JSONRPC, id: requestId, method: requestType, params: requestParams };
}
/**
 * Create a JSONRPCSuccessResponse message
 *
 * @param contents Data to return to the requester when the request succeeds
 * @param requestId ID of the request that this response is intended to address. If no ID was
 *   provided, don't pass a value to this parameter.
 * @returns JSONRPCSuccessResponse message that can be serialized and sent over a connection
 */
function createSuccessResponse(contents, requestId = 0) {
    return { jsonrpc: json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1__.JSONRPC, id: requestId, result: contents };
}
/**
 * Create a JSONRPCErrorResponse message
 *
 * @param errorMessage Text to provide to the requester about why this request failed
 * @param errorCode JSONRPCErrorCode value that best aligns with the purpose of the failure
 * @param requestId ID of the request that this response is intended to address. If no ID was
 *   provided, don't pass a value to this parameter.
 * @returns JSONRPCErrorResponse message that can be serialized and sent over a connection
 */
function createErrorResponse(errorMessage, errorCode = json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1__.JSONRPCErrorCode.InternalError, requestId = 0) {
    return { jsonrpc: json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1__.JSONRPC, id: requestId, error: { code: errorCode, message: errorMessage } };
}
/** Serialize a payload, if needed, and send it over the provided WebSocket */
function sendPayloadToWebSocket(ws, payload) {
    if (!ws)
        throw new Error(`Tried to send payload while not connected`);
    if (typeof payload === 'string' ||
        payload instanceof ArrayBuffer ||
        payload instanceof Blob ||
        ArrayBuffer.isView(payload)) {
        ws.send(payload);
    }
    else {
        ws.send((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.serialize)(payload));
    }
}
/**
 * Deserialize a payload from the network and return it as a JSONRPC message or array of messages.
 * Note that all `null` values from the payload will be converted into `undefined` values except for
 * `result` values in JSONRPCSuccessResponse messages. A `null` value as the response to a request
 * must not be converted to `undefined` per the JSONRPC protocol.
 *
 * After a request has been processed by the protocol stack, call `fixupResponse` to restore
 * `undefined` responses.
 */
function deserializeMessage(payload) {
    const message = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.deserialize)(payload);
    const messageType = typeof message;
    if (messageType !== 'object')
        return message;
    if (Array.isArray(message)) {
        message.forEach((msg) => {
            // Required by the protocol since we convert "undefined" to "null" in "deserialize"
            // eslint-disable-next-line no-null/no-null
            if (typeof msg === 'object' && 'result' in msg && msg.result === undefined)
                msg.result = null;
        });
    }
    else if ('result' in message && message.result === undefined)
        // Required by the protocol since we convert "undefined" to "null" in "deserialize"
        // eslint-disable-next-line no-null/no-null
        message.result = null;
    return message;
}
/**
 * Convert `null` results back to `undefined` once we're out of the protocol stack.
 *
 * This works in tandem with `deserializeMessage` to properly handle `null` values in JSONRPC
 * messages.
 */
function fixupResponse(response) {
    // Convert "null" back to "undefined" before it flows back out to callers
    // eslint-disable-next-line no-null/no-null
    if ('result' in response && response.result === null)
        response.result = undefined;
    return response;
}
/**
 * Runs the request callback and retries a number of times if `requestCallback` resolves to a method
 * not found error
 *
 * @param requestCallback Function to run to send a JSON-RPC request. Should return a JSONRPC error
 *   with code {@link JSONRPCErrorCode.MethodNotFound} if it fails to find the method
 * @param name Name of the handler running this request for logging purposes
 * @param requestType Type of request for logging purposes
 * @returns The response from the request including the method not found error if it times out
 */
async function requestWithRetry(requestCallback, name, requestType) {
    // https://github.com/paranext/paranext-core/issues/51
    // If the request type doesn't have a registered handler yet, retry a few times to help with race
    // conditions. This approach is hacky but works well enough for now.
    for (let attemptsRemaining = MAX_REQUEST_ATTEMPTS; attemptsRemaining > 0; attemptsRemaining--) {
        // Intentionally awaiting inside for loop so we attempt once at a time
        // eslint-disable-next-line no-await-in-loop
        const response = await requestCallback();
        if (!response.error || response.error.code !== json_rpc_2_0__WEBPACK_IMPORTED_MODULE_1__.JSONRPCErrorCode.MethodNotFound)
            return response;
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_0__.logger.debug(`RPC handler ${name} could not find a request handler for requestType ${requestType} on attempt ${MAX_REQUEST_ATTEMPTS - attemptsRemaining + 1} of ${MAX_REQUEST_ATTEMPTS}. ${attemptsRemaining === 1 ? 'Giving up.' : 'Retrying...'}`);
        // No need to wait again after the last attempt fails. Return the error response
        if (attemptsRemaining === 1)
            return response;
        // Intentionally awaiting inside for loop so we wait a bit before retrying
        // eslint-disable-next-line no-await-in-loop
        await (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.wait)(REQUEST_ATTEMPT_WAIT_TIME_MS);
    }
    throw new Error(`RPC handler ${name} did not return a response after retrying to find request handler for requestType ${requestType}. This should never happen. Please investigate`);
}
/**
 * Register a method on the network so that requests of the given type are routed to your request
 * handler.
 */
const REGISTER_METHOD = 'network:registerMethod';
/**
 * Unregister a method on the network so that requests of the given type are no longer routed to
 * your request handler.
 */
const UNREGISTER_METHOD = 'network:unregisterMethod';
/**
 * Get all methods that are currently registered on the network. Required to be 'rpc.discover' by
 * the OpenRPC specification.
 */
const GET_METHODS = 'rpc.discover';
/** Prefix on requests that indicates that the request is a command */
const CATEGORY_COMMAND = 'command';


/***/ }),

/***/ "./src/shared/global-this.model.ts":
/*!*****************************************!*\
  !*** ./src/shared/global-this.model.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProcessType: () => (/* binding */ ProcessType)
/* harmony export */ });
/* eslint-enable */
/** Type of Paranext process */
var ProcessType;
(function (ProcessType) {
    ProcessType["Main"] = "main";
    ProcessType["Renderer"] = "renderer";
    ProcessType["ExtensionHost"] = "extension-host";
})(ProcessType || (ProcessType = {}));


/***/ }),

/***/ "./src/shared/models/data-protection.service-model.ts":
/*!************************************************************!*\
  !*** ./src/shared/models/data-protection.service-model.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataProtectionServiceNetworkObjectName: () => (/* binding */ dataProtectionServiceNetworkObjectName)
/* harmony export */ });
const dataProtectionServiceNetworkObjectName = 'DataProtectionService';


/***/ }),

/***/ "./src/shared/models/data-provider-engine.model.ts":
/*!*********************************************************!*\
  !*** ./src/shared/models/data-provider-engine.model.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataProviderEngine: () => (/* binding */ DataProviderEngine)
/* harmony export */ });
/**
 * JSDOC SOURCE DataProviderEngine
 *
 * Abstract class that provides a placeholder `notifyUpdate` for data provider engine classes. If a
 * data provider engine class extends this class, it doesn't have to specify its own `notifyUpdate`
 * function in order to use `notifyUpdate`.
 *
 * @see {@link IDataProviderEngine} for more information on extending this class.
 */
class DataProviderEngine {
    // This is just a placeholder and will be layered over by papi. We don't need it to do anything
    // @ts-expect-error ts(6133) `updateInstructions` is not used in this method, but we don't care
    // because we want inheriting classes to be able to get this method with Intellisense without
    // an underscore that indicates to TypeScript that we aren't using the parameter
    // eslint-disable-next-line @typescript-eslint/class-methods-use-this, @typescript-eslint/no-unused-vars
    notifyUpdate(updateInstructions) { }
}


/***/ }),

/***/ "./src/shared/models/data-provider.model.ts":
/*!**************************************************!*\
  !*** ./src/shared/models/data-provider.model.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDataProviderDataTypeFromFunctionName: () => (/* binding */ getDataProviderDataTypeFromFunctionName)
/* harmony export */ });
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");

/** The functions that a data provider has for each data type */
const dataProviderFunctionPrefixes = ['set', 'get', 'subscribe'];
/**
 * Get the data type for a data provider function based on its name
 *
 * @param fnName Name of data provider function e.g. `getVerse`
 * @returns Data type for that data provider function e.g. `Verse`
 */
function getDataProviderDataTypeFromFunctionName(fnName) {
    const fnPrefix = dataProviderFunctionPrefixes.find((prefix) => (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__.startsWith)(fnName, prefix));
    if (!fnPrefix)
        throw new Error(`${fnName} is not a data provider data type function`);
    // Assert the expected return type.
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    return (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__.substring)(fnName, (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__.stringLength)(fnPrefix));
}


/***/ }),

/***/ "./src/shared/models/network-object-status.service-model.ts":
/*!******************************************************************!*\
  !*** ./src/shared/models/network-object-status.service-model.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   networkObjectStatusServiceNetworkObjectName: () => (/* binding */ networkObjectStatusServiceNetworkObjectName)
/* harmony export */ });
const networkObjectStatusServiceNetworkObjectName = 'NetworkObjectStatusService';


/***/ }),

/***/ "./src/shared/models/notification.service-model.ts":
/*!*********************************************************!*\
  !*** ./src/shared/models/notification.service-model.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NotificationServiceNetworkObjectName: () => (/* binding */ NotificationServiceNetworkObjectName)
/* harmony export */ });
const NotificationServiceNetworkObjectName = 'NotificationService';


/***/ }),

/***/ "./src/shared/models/openrpc.model.ts":
/*!********************************************!*\
  !*** ./src/shared/models/openrpc.model.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createEmptyOpenRpc: () => (/* binding */ createEmptyOpenRpc),
/* harmony export */   getEmptyMethodDocs: () => (/* binding */ getEmptyMethodDocs)
/* harmony export */ });
/* harmony import */ var _shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/data/rpc.model */ "./src/shared/data/rpc.model.ts");
/* eslint-disable @typescript-eslint/no-explicit-any */

/** Create an object of type {@link OpenRpc} to hold documentation for PAPI websocket methods */
function createEmptyOpenRpc(papiVersion) {
    return {
        openrpc: '1.2.6',
        info: {
            version: papiVersion,
            title: 'Live PAPI documentation',
            description: 'All methods currently registered with PAPI. They change dynamically as methods are registered and unregistered. This page does not automatically refresh to show any changes.\n\nSee additional helpful documentation for [extension developers](https://github.com/paranext/paranext-extension-template/wiki).',
            contact: {
                name: 'Platform.Bible Team',
                url: 'https://discord.gg/tzw22PUEAY',
            },
            license: {
                name: 'MIT',
                url: 'https://github.com/paranext/paranext-core/blob/main/LICENSE',
            },
        },
        servers: [
            {
                name: 'Platform.Bible and Paratext 10 Studio Wiki',
                url: 'https://github.com/paranext/paranext-core/wiki/Platform.Bible-and-Paratext-10-Studio',
            },
            {
                name: 'TypeScript docs for PAPI React components, general library components, and API calls',
                url: 'https://paranext.github.io/paranext-core/',
            },
            {
                name: 'PAPI websocket',
                url: `ws://localhost:${_shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_0__.WEBSOCKET_PORT}`,
            },
        ],
        methods: [],
        components: {},
    };
}
const emptyDocs = {
    summary: '',
    description: 'No documentation provided',
    params: [],
    result: {
        name: 'return value',
        schema: {},
    },
};
Object.freeze(emptyDocs);
Object.freeze(emptyDocs.params);
Object.freeze(emptyDocs.result);
// @ts-expect-error 2339 - TS doesn't understand that 'schema' is part of 'result'
Object.freeze(emptyDocs.result.schema);
/**
 * Get an empty {@link OpenRpc} method document object. Useful for populating documentation for
 * methods that didn't have their own documentation provided.
 */
function getEmptyMethodDocs() {
    return emptyDocs;
}


/***/ }),

/***/ "./src/shared/models/papi-network-event-emitter.model.ts":
/*!***************************************************************!*\
  !*** ./src/shared/models/papi-network-event-emitter.model.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PapiNetworkEventEmitter: () => (/* binding */ PapiNetworkEventEmitter),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");

/**
 * Networked version of EventEmitter - accepts subscriptions to an event and runs the subscription
 * callbacks when the event is emitted. Events on NetworkEventEmitters can be emitted across
 * processes. They are coordinated between processes by their type. Use eventEmitter.event(callback)
 * to subscribe to the event. Use eventEmitter.emit(event) to run the subscriptions. Generally, this
 * EventEmitter should be private, and its event should be public. That way, the emitter is not
 * publicized, but anyone can subscribe to the event.
 *
 * WARNING: Do not use this class directly outside of NetworkService, or it will not do what you
 * expect. Use NetworkService.createNetworkEventEmitter.
 *
 * WARNING: You cannot emit events with complex types on the network.
 */
class PapiNetworkEventEmitter extends platform_bible_utils__WEBPACK_IMPORTED_MODULE_0__.PlatformEventEmitter {
    networkSubscriber;
    networkDisposer;
    /**
     * Creates a NetworkEventEmitter
     *
     * @param networkSubscriber Callback that accepts the event and emits it to other processes
     * @param networkDisposer Callback that unlinks this emitter from the network
     */
    constructor(
    /** Callback that sends the event to other processes on the network when it is emitted */
    networkSubscriber, 
    /** Callback that runs when the emitter is disposed - should handle unlinking from the network */
    networkDisposer) {
        super();
        this.networkSubscriber = networkSubscriber;
        this.networkDisposer = networkDisposer;
    }
    emit = (event) => {
        this.assertNotDisposed();
        if (this.networkSubscriber)
            this.networkSubscriber(event);
        this.emitLocal(event);
    };
    /**
     * Runs only the subscriptions for the event that are on this process. Does not send over network
     *
     * @param event Event data to provide to subscribed callbacks
     */
    emitLocal(event) {
        this.assertNotDisposed();
        super.emitFn(event);
    }
    dispose = () => {
        const retVal = super.disposeFn();
        // TODO: Do we need to set networkSubscriber to undefined? Had to remove readonly from it to do this
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        this.networkSubscriber = undefined;
        this.networkDisposer();
        return retVal;
    };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PapiNetworkEventEmitter);


/***/ }),

/***/ "./src/shared/models/project-data-provider-factory.interface.ts":
/*!**********************************************************************!*\
  !*** ./src/shared/models/project-data-provider-factory.interface.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PDP_FACTORY_OBJECT_TYPE: () => (/* binding */ PDP_FACTORY_OBJECT_TYPE)
/* harmony export */ });
const PDP_FACTORY_OBJECT_TYPE = 'pdpFactory';


/***/ }),

/***/ "./src/shared/models/project-data-provider.model.ts":
/*!**********************************************************!*\
  !*** ./src/shared/models/project-data-provider.model.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PROJECT_INTERFACE_PLATFORM_BASE: () => (/* binding */ PROJECT_INTERFACE_PLATFORM_BASE)
/* harmony export */ });
/**
 * The name of the `projectInterface` representing the essential methods every Base Project Data
 * Provider must implement
 */
const PROJECT_INTERFACE_PLATFORM_BASE = 'platform.base';


/***/ }),

/***/ "./src/shared/models/project-lookup.service-model.ts":
/*!***********************************************************!*\
  !*** ./src/shared/models/project-lookup.service-model.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NETWORK_OBJECT_NAME_PROJECT_LOOKUP_SERVICE: () => (/* binding */ NETWORK_OBJECT_NAME_PROJECT_LOOKUP_SERVICE),
/* harmony export */   areProjectInterfacesIncluded: () => (/* binding */ areProjectInterfacesIncluded),
/* harmony export */   getPDPFactoryIdFromNetworkObjectName: () => (/* binding */ getPDPFactoryIdFromNetworkObjectName),
/* harmony export */   getPDPFactoryNetworkObjectNameFromId: () => (/* binding */ getPDPFactoryNetworkObjectNameFromId),
/* harmony export */   projectLookupServiceBase: () => (/* binding */ projectLookupServiceBase),
/* harmony export */   testingProjectLookupService: () => (/* binding */ testingProjectLookupService)
/* harmony export */ });
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var _shared_services_network_object_status_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/network-object-status.service */ "./src/shared/services/network-object-status.service.ts");
/* harmony import */ var _shared_models_project_data_provider_factory_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/models/project-data-provider-factory.interface */ "./src/shared/models/project-data-provider-factory.interface.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");





const NETWORK_OBJECT_NAME_PROJECT_LOOKUP_SERVICE = 'ProjectLookupService';
// #region Project data provider factory utilities
/**
 * Suffix on network objects that indicates that the network object is a project data provider
 * factory
 */
const PDP_FACTORY_LABEL = '-pdpf';
/**
 * Transform the well-known pdp factory id into an id for its network object to use
 *
 * @param pdpFactoryId Id extensions use to identify this pdp factory
 * @returns Id for then network object for this pdp factory
 */
function getPDPFactoryNetworkObjectNameFromId(pdpFactoryId) {
    return (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.endsWith)(pdpFactoryId, PDP_FACTORY_LABEL)
        ? pdpFactoryId
        : `${pdpFactoryId}${PDP_FACTORY_LABEL}`;
}
/**
 * Transform a network object id for a pdp factory into its well-known pdp factory id
 *
 * @param pdpFactoryNetworkObjectName Id for then network object for this pdp factory
 * @returns Id extensions use to identify this pdp factory
 */
function getPDPFactoryIdFromNetworkObjectName(pdpFactoryNetworkObjectName) {
    return (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.endsWith)(pdpFactoryNetworkObjectName, PDP_FACTORY_LABEL)
        ? (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.slice)(pdpFactoryNetworkObjectName, 0, -PDP_FACTORY_LABEL.length)
        : pdpFactoryNetworkObjectName;
}
/** Local object of functions to run locally on each process as part of the project lookup service */
const projectLookupServiceBase = {
    async getMetadataForAllProjects(options = {}) {
        return internalGetMetadataWithRetries(options);
    },
    async getMetadataForProject(projectId, projectInterface, pdpFactoryId) {
        // Wait for an appropriate PDP factory to be registered
        const timeoutInMS = 20 * 1000;
        if (pdpFactoryId) {
            try {
                await _shared_services_network_object_status_service__WEBPACK_IMPORTED_MODULE_2__.networkObjectStatusService.waitForNetworkObject({
                    objectType: _shared_models_project_data_provider_factory_interface__WEBPACK_IMPORTED_MODULE_3__.PDP_FACTORY_OBJECT_TYPE,
                    id: getPDPFactoryNetworkObjectNameFromId(pdpFactoryId),
                }, timeoutInMS);
            }
            catch (e) {
                throw new Error(`getMetadataForProject wait for PDPF ${pdpFactoryId} threw! ${e}`);
            }
        }
        else if (projectInterface) {
            try {
                await _shared_services_network_object_status_service__WEBPACK_IMPORTED_MODULE_2__.networkObjectStatusService.waitForNetworkObject({
                    objectType: _shared_models_project_data_provider_factory_interface__WEBPACK_IMPORTED_MODULE_3__.PDP_FACTORY_OBJECT_TYPE,
                    attributes: { projectInterfaces: [projectInterface] },
                }, timeoutInMS);
            }
            catch (e) {
                throw new Error(`getMetadataForProject wait for PDPF with ${projectInterface} threw! ${e}`);
            }
        }
        else {
            try {
                await _shared_services_network_object_status_service__WEBPACK_IMPORTED_MODULE_2__.networkObjectStatusService.waitForNetworkObject({ objectType: _shared_models_project_data_provider_factory_interface__WEBPACK_IMPORTED_MODULE_3__.PDP_FACTORY_OBJECT_TYPE }, timeoutInMS);
            }
            catch (e) {
                throw new Error(`getMetadataForProject wait for any PDPF threw! ${e}`);
            }
        }
        const metadata = await internalGetMetadataWithRetries(transformGetMetadataForProjectParametersToFilter(projectId, projectInterface, pdpFactoryId));
        // Get the most minimal match to the projectInterface in question. Hopefully this will give us the
        // PDP that most closely matches the projectInterfaces to avoid unnecessary redirects through
        // layered PDPs
        if (metadata && metadata.length > 0)
            return metadata[0];
        throw new Error(`No project found with ID ${projectId}${projectInterface ? ` and project interface ${projectInterface}` : ''}${pdpFactoryId ? ` from ${pdpFactoryId}` : ''}`);
    },
    areProjectIdsEqual,
    filterProjectsMetadata(projectsMetadata, options) {
        if (!options)
            return [...projectsMetadata];
        if (!options.excludeProjectIds &&
            !options.includeProjectIds &&
            !options.includeProjectInterfaces &&
            !options.excludeProjectInterfaces &&
            !options.includePdpFactoryIds &&
            !options.excludePdpFactoryIds)
            return [...projectsMetadata];
        const { excludeProjectIds, includeProjectIds, includeProjectInterfaces, excludeProjectInterfaces, includePdpFactoryIds, excludePdpFactoryIds, } = ensurePopulatedMetadataFilter(options);
        return projectsMetadata.filter((projectMetadata) => {
            // If the project ID isn't in the filters, it's out
            if (!isProjectIdIncluded(projectMetadata.id, includeProjectIds, excludeProjectIds))
                return false;
            // If the `projectInterface`s don't match the filters, it's out
            if (!areProjectInterfacesIncluded(projectMetadata.projectInterfaces, includeProjectInterfaces, excludeProjectInterfaces))
                return false;
            // If the pdp factory info doesn't match the filters, it's out
            const pdpFactoryIds = Object.keys(projectMetadata.pdpFactoryInfo);
            if (!arePdpFactoryIdsIncluded(pdpFactoryIds, includePdpFactoryIds, excludePdpFactoryIds))
                return false;
            return true;
        });
    },
    mergeMetadataFilters(metadataFilter1, metadataFilter2) {
        const mergedFilter = {};
        if (metadataFilter1?.includeProjectIds || metadataFilter2?.includeProjectIds)
            mergedFilter.includeProjectIds = [
                ...new Set([
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter1?.includeProjectIds),
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter2?.includeProjectIds),
                ]),
            ];
        if (metadataFilter1?.excludeProjectIds || metadataFilter2?.excludeProjectIds)
            mergedFilter.excludeProjectIds = [
                ...new Set([
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter1?.excludeProjectIds),
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter2?.excludeProjectIds),
                ]),
            ];
        if (metadataFilter1?.includeProjectInterfaces || metadataFilter2?.includeProjectInterfaces)
            mergedFilter.includeProjectInterfaces = [
                ...new Set([
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter1?.includeProjectInterfaces),
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter2?.includeProjectInterfaces),
                ]),
            ];
        if (metadataFilter1?.excludeProjectInterfaces || metadataFilter2?.excludeProjectInterfaces)
            mergedFilter.excludeProjectInterfaces = [
                ...new Set([
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter1?.excludeProjectInterfaces),
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter2?.excludeProjectInterfaces),
                ]),
            ];
        if (metadataFilter1?.includePdpFactoryIds || metadataFilter2?.includePdpFactoryIds)
            mergedFilter.includePdpFactoryIds = [
                ...new Set([
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter1?.includePdpFactoryIds),
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter2?.includePdpFactoryIds),
                ]),
            ];
        if (metadataFilter1?.excludePdpFactoryIds || metadataFilter2?.excludePdpFactoryIds)
            mergedFilter.excludePdpFactoryIds = [
                ...new Set([
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter1?.excludePdpFactoryIds),
                    ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(metadataFilter2?.excludePdpFactoryIds),
                ]),
            ];
        return mergedFilter;
    },
    getMinimalMatchPdpFactoryId(projectMetadata, projectInterface) {
        const minimalMatch = Object.entries(projectMetadata.pdpFactoryInfo).reduce((previousPdpfInfoEntry, nextPdpfInfoEntry) => nextPdpfInfoEntry[1]?.projectInterfaces.includes(projectInterface) &&
            compareProjectDataProviderFactoryMetadataInfoMinimalMatch(previousPdpfInfoEntry[1], nextPdpfInfoEntry[1]) > 0
            ? nextPdpfInfoEntry
            : previousPdpfInfoEntry, ['', undefined]);
        return minimalMatch[0] && minimalMatch[1] ? minimalMatch[0] : undefined;
    },
};
// #endregion
// #region Project Lookup Service utility functions
/**
 * How long since start of the current process to count as time that the PDPFs possibly still
 * haven't all started up
 */
const LOAD_TIME_GRACE_PERIOD_MS = 30 * 1000;
/**
 * How long to wait in-between attempts to get project metadata during the time since the current
 * process started
 */
const GRACE_PERIOD_WAIT_TIME_MS = 1 * 1000;
/**
 * Gets project metadata from PDPFs filtered down by various filtering options
 *
 * Note: If there are multiple PDPs available whose metadata matches the conditions provided by the
 * parameters, their project metadata will all be combined, so all available `projectInterface`s
 * provided by the PDP Factory with the matching id (or all PDP Factories if no id is specified) for
 * the project will be returned. If you need `projectInterface`s supported by specific PDP
 * Factories, you can access it at {@link ProjectMetadata.pdpFactoryInfo}.
 */
async function internalGetMetadata(options = {}) {
    const { excludeProjectIds, includeProjectIds, includeProjectInterfaces, excludeProjectInterfaces, includePdpFactoryIds, excludePdpFactoryIds, } = ensurePopulatedMetadataFilter(options);
    // Get all registered PDP factories and filter down to just the included ones
    const networkObjects = await _shared_services_network_object_status_service__WEBPACK_IMPORTED_MODULE_2__.networkObjectStatusService.getAllNetworkObjectDetails();
    const pdpFactoryIds = Object.keys(networkObjects)
        .filter((pdpfNetworkObjectName) => {
        const details = networkObjects[pdpfNetworkObjectName];
        if (details.objectType === _shared_models_project_data_provider_factory_interface__WEBPACK_IMPORTED_MODULE_3__.PDP_FACTORY_OBJECT_TYPE &&
            // If a pdp factory id was specified, only get metadata from that pdp factory id.
            // This means the ProjectMetadata could be partial in some sense because not all projectInterfaces
            // available for that project will be in the ProjectMetadata
            arePdpFactoryIdsIncluded([getPDPFactoryIdFromNetworkObjectName(pdpfNetworkObjectName)], includePdpFactoryIds, excludePdpFactoryIds))
            return true;
        return false;
    })
        .map(getPDPFactoryIdFromNetworkObjectName);
    // For each PDP factory, get all available projects
    const allProjectsMetadata = new Map();
    await Promise.all(pdpFactoryIds.map(async (pdpFactoryId) => {
        const pdpFactory = await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_0__.networkObjectService.get(getPDPFactoryNetworkObjectNameFromId(pdpFactoryId));
        // Get all projects from the PDP factory, and pass in the include/exclude PDP factory ids to
        // make sure two layering PDPFs don't get into an infinite loop together. Each layering PDP
        // factory should call all other pdp factories matching this filter merged with its own
        // filter. We need to pass these but not the other filter properties because we can filter the
        // other properties later in this function (and doing so gives us the full metadata for each
        // project), but we cannot filter these properties for any layering PDP factory we're calling
        const projectsMetadata = await pdpFactory?.getAvailableProjects({
            includePdpFactoryIds: options.includePdpFactoryIds,
            // Add this pdp factory id onto the excluded PDP factory IDs to be sure the Layering PDPF
            // doesn't get into an infinite loop with itself. Then it should pass these back into this
            // function to pass to other layering PDPFs so they don't call each other infinitely
            excludePdpFactoryIds: [
                ...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(options.excludePdpFactoryIds),
                (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.escapeStringRegexp)(pdpFactoryId),
            ],
        });
        if (projectsMetadata) {
            const clonedProjectsMetadata = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.deepClone)(projectsMetadata);
            clonedProjectsMetadata.forEach((md) => {
                // The metadata that comes in from PDPs could have extra pdpFactoryInfo on it, but we
                // want to build it ourselves. So we want to delete it when it comes in
                // eslint-disable-next-line no-type-assertion/no-type-assertion
                delete md
                    .pdpFactoryInfo;
                // Type assert to add the factory info to the object
                // eslint-disable-next-line no-type-assertion/no-type-assertion
                const enrichedMd = allProjectsMetadata.get(md.id) ?? md;
                if (!enrichedMd.pdpFactoryInfo)
                    enrichedMd.pdpFactoryInfo = {};
                if (pdpFactoryId in enrichedMd.pdpFactoryInfo) {
                    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Project ${md.id} already has metadata from pdp factory ${pdpFactoryId}. Skipping additional metadata: ${JSON.stringify(md)}`);
                    return;
                }
                // Filter out metadata with the wrong project id
                if (!isProjectIdIncluded(md.id, includeProjectIds, excludeProjectIds))
                    return;
                // Wait to filter metadata by `projectInterface` because we want to return ProjectMetadata
                // for a project including all available `projectInterface`s, not just `projectInterface`s
                // provided by PDPFs that provide that `projectInterface`
                // This project metadata passes project id and pdpf id! Merge it into the existing metadata
                // Put the factory info on
                enrichedMd.pdpFactoryInfo[pdpFactoryId] = {
                    projectInterfaces: [...md.projectInterfaces],
                };
                // If there is metadata already in the map, add the new `projectInterface`s
                if (allProjectsMetadata.has(md.id)) {
                    md.projectInterfaces.forEach((newProjectInterface) => {
                        if (!enrichedMd.projectInterfaces.includes(newProjectInterface))
                            enrichedMd.projectInterfaces.push(newProjectInterface);
                    });
                }
                else
                    allProjectsMetadata.set(md.id, enrichedMd);
            });
        }
    }));
    let allProjectsMetadataArray = Array.from(allProjectsMetadata.values());
    // Filter out metadata without the right `projectInterface`
    if (includeProjectInterfaces.length > 0 || excludeProjectInterfaces.length > 0) {
        allProjectsMetadataArray = allProjectsMetadataArray.filter((projectMetadata) => areProjectInterfacesIncluded(projectMetadata.projectInterfaces, includeProjectInterfaces, excludeProjectInterfaces));
    }
    return allProjectsMetadataArray;
}
/**
 * Gets project metadata from PDPFs filtered down by various filtering options. If this process
 * started recently and this finds no project metadata, waits a bit and tries again because it may
 * be that not all PDPFs have started yet.
 *
 * Note: If there are multiple PDPs available whose metadata matches the conditions provided by the
 * parameters, their project metadata will all be combined, so all available `projectInterface`s
 * provided by the PDP Factory with the matching id (or all PDP Factories if no id is specified) for
 * the project will be returned. If you need `projectInterface`s supported by specific PDP
 * Factories, you can access it at {@link ProjectMetadata.pdpFactoryInfo}.
 */
async function internalGetMetadataWithRetries(options = {}) {
    let allProjectsMetadataArray = await internalGetMetadata(options);
    // If we're in the first little while of the process, there's a chance not all the PDPFs have
    // loaded. Let's wait a bit and try again if we got no matching project metadata
    let retryTimes = 0;
    while (allProjectsMetadataArray.length === 0 && performance.now() < LOAD_TIME_GRACE_PERIOD_MS) {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.debug(`Did not find any project metadata around ${performance.now()} for ${JSON.stringify(options)}. Will retry`);
        // Intentionally stopping this method execution to wait some time
        // eslint-disable-next-line no-await-in-loop
        await (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.wait)(GRACE_PERIOD_WAIT_TIME_MS);
        // Intentionally stopping this method execution to try getting project metadata again
        // eslint-disable-next-line no-await-in-loop
        allProjectsMetadataArray = await internalGetMetadata(options);
        retryTimes += 1;
        if (allProjectsMetadataArray.length > 0)
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.debug(`Finally found project metadata on retry ${retryTimes} around ${performance.now()} for ${JSON.stringify(options)}! ${JSON.stringify(allProjectsMetadataArray)}`);
    }
    if (allProjectsMetadataArray.length === 0) {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Did not find any project metadata${retryTimes > 0 ? ` on retry ${retryTimes}` : ''} for ${JSON.stringify(options)} after the grace period. If you expected to find projects for these filters, this probably indicates a problem. Maybe not all PDPFs loaded in time.`);
    }
    return allProjectsMetadataArray;
}
function transformGetMetadataForProjectParametersToFilter(projectId, projectInterface, pdpFactoryId) {
    // Escape `projectInterface` and `pdpFactoryId` because we don't want regexp matching. These
    // fields should match exactly
    return {
        includeProjectIds: projectId,
        includeProjectInterfaces: projectInterface
            ? (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.escapeStringRegexp)(projectInterface)
            : projectInterface,
        includePdpFactoryIds: pdpFactoryId ? (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.escapeStringRegexp)(pdpFactoryId) : pdpFactoryId,
    };
}
// #endregion
// #region Smaller project utilities
function ensurePopulatedMetadataFilter(options) {
    const { excludeProjectIds, includeProjectIds, includeProjectInterfaces, excludeProjectInterfaces, includePdpFactoryIds, excludePdpFactoryIds, } = options;
    // Get array of excludeProjectIds
    const excludeProjectIdsArray = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(excludeProjectIds);
    // Get array of includeProjectIds
    const includeProjectIdsArray = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.ensureArray)(includeProjectIds);
    // Get array of excludeProjectInterfaces RegExps
    const excludeProjectInterfacesRegExps = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.transformAndEnsureRegExpRegExpArray)(excludeProjectInterfaces);
    // Get array of includeProjectInterfaces RegExps
    const includeProjectInterfacesRegExps = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.transformAndEnsureRegExpRegExpArray)(includeProjectInterfaces);
    // Get array of includePdpFactoryIds RegExps
    const includePdpFactoryIdsRegExps = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.transformAndEnsureRegExpArray)(includePdpFactoryIds);
    // Get array of excludePdpFactoryIds RegExps
    const excludePdpFactoryIdsRegExps = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_4__.transformAndEnsureRegExpArray)(excludePdpFactoryIds);
    return {
        excludeProjectIds: excludeProjectIdsArray,
        includeProjectIds: includeProjectIdsArray,
        includeProjectInterfaces: includeProjectInterfacesRegExps,
        excludeProjectInterfaces: excludeProjectInterfacesRegExps,
        includePdpFactoryIds: includePdpFactoryIdsRegExps,
        excludePdpFactoryIds: excludePdpFactoryIdsRegExps,
    };
}
function areProjectIdsEqual(projectIdA, projectIdB) {
    return projectIdA.localeCompare(projectIdB, undefined, { sensitivity: 'accent' }) === 0;
}
function isProjectIdIncluded(projectId, includeProjectIds, excludeProjectIds) {
    // If the project ID is excluded, it's out
    if (excludeProjectIds.length > 0 &&
        excludeProjectIds.some((excludeProjectId) => areProjectIdsEqual(excludeProjectId, projectId)))
        return false;
    // If the project ID is not included, it's out
    if (includeProjectIds.length > 0 &&
        !includeProjectIds.some((includeProjectId) => areProjectIdsEqual(includeProjectId, projectId)))
        return false;
    return true;
}
/**
 * Determines whether the given project interfaces are included based on specified inclusion and
 * exclusion rules.
 *
 * This function checks if a set of project interfaces meets the criteria defined by regular
 * expressions for inclusion and exclusion.
 *
 * - A project interface is excluded if it matches any of the provided exclusion patterns.
 * - A project interface is included only if it matches at least one of the provided inclusion
 *   patterns.
 *
 * @param projectInterfaces - An array of project interfaces to evaluate against the inclusion and
 *   exclusion patterns.
 * @param includeProjectInterfaces - An array of regular expressions or arrays of regular
 *   expressions defining which interfaces should be included.
 * @param excludeProjectInterfaces - An array of regular expressions or arrays of regular
 *   expressions defining which interfaces should be excluded.
 * @returns A boolean value indicating whether the project interfaces satisfy the inclusion and
 *   exclusion criteria.
 */
function areProjectInterfacesIncluded(projectInterfaces, includeProjectInterfaces, excludeProjectInterfaces) {
    // If the project interface is excluded, it's out
    if (excludeProjectInterfaces.length > 0 &&
        excludeProjectInterfaces.some((excludeRegExp) => Array.isArray(excludeRegExp)
            ? excludeRegExp.every((subExcludeRegExp) => projectInterfaces.some((projectInterface) => subExcludeRegExp.test(projectInterface)))
            : projectInterfaces.some((projectInterface) => excludeRegExp.test(projectInterface))))
        return false;
    // If the project interface isn't included, it's out
    if (includeProjectInterfaces.length > 0 &&
        !includeProjectInterfaces.some((includeRegExp) => Array.isArray(includeRegExp)
            ? includeRegExp.every((subIncludeRegExp) => projectInterfaces.some((projectInterface) => subIncludeRegExp.test(projectInterface)))
            : projectInterfaces.some((projectInterface) => includeRegExp.test(projectInterface))))
        return false;
    return true;
}
/** All works with the well-known PDP factory ids, not the network object names */
function arePdpFactoryIdsIncluded(pdpFactoryIds, includePdpFactoryIds, excludePdpFactoryIds) {
    // If any of the PDP Factory Id are excluded, it's out
    if (excludePdpFactoryIds.length > 0 &&
        excludePdpFactoryIds.some((excludeRegExp) => pdpFactoryIds.some((pdpFactoryId) => excludeRegExp.test(pdpFactoryId))))
        return false;
    // If none of the PDP Factory Ids are included, it's out
    if (includePdpFactoryIds.length > 0 &&
        (pdpFactoryIds.length === 0 ||
            !includePdpFactoryIds.some((includeRegExp) => pdpFactoryIds.some((pdpFactoryId) => includeRegExp.test(pdpFactoryId)))))
        return false;
    return true;
}
/**
 * Compare function (for array sorting and such) that compares two PDPF Metadata infos by most
 * minimal match to the `projectInterface` in question.
 *
 * Hopefully this will allow us to get the PDP that most closely matches the `projectInterface`s to
 * avoid unnecessary redirects through layered PDPs
 *
 * @param pdpFMetadataInfoA First ProjectDataProviderFactoryMetadataInfo to compare
 * @param pdpFMetadataInfoB Second ProjectDataProviderFactoryMetadataInfo to compare
 * @returns -1 if a is less than b, 0 if equal, and 1 otherwise
 */
function compareProjectDataProviderFactoryMetadataInfoMinimalMatch(pdpFMetadataInfoA, pdpFMetadataInfoB) {
    if (!pdpFMetadataInfoA) {
        if (!pdpFMetadataInfoB)
            return 0;
        return 1;
    }
    if (!pdpFMetadataInfoB) {
        return -1;
    }
    // Note: we could convert these arrays to sets first to ensure no duplicates to make sure
    // these comparisons are accurate, but let's just say extension developers should write them
    // with no duplicates until we have a reason to say something else
    const lengthA = pdpFMetadataInfoA.projectInterfaces.length;
    const lengthB = pdpFMetadataInfoB.projectInterfaces.length;
    // If one only has the original interface or is smaller than the other, it should be first
    if (lengthA === 1 || lengthA < lengthB)
        return -1;
    if (lengthB === 1 || lengthB < lengthA)
        return 1;
    // Otherwise they are pretty much the same as far as we can tell
    return 0;
}
// #endregion
// #region testing
/** This is an internal-only export for testing purposes and should not be used in development */
const testingProjectLookupService = {
    internalGetMetadata,
    compareProjectDataProviderFactoryMetadataInfoMinimalMatch,
    transformGetMetadataForProjectParametersToFilter,
    LOAD_TIME_GRACE_PERIOD_MS,
};
// #endregion


/***/ }),

/***/ "./src/shared/services/app.service-model.ts":
/*!**************************************************!*\
  !*** ./src/shared/services/app.service-model.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   appServiceNetworkObjectName: () => (/* binding */ appServiceNetworkObjectName)
/* harmony export */ });
const appServiceNetworkObjectName = 'AppService';


/***/ }),

/***/ "./src/shared/services/command.service.ts":
/*!************************************************!*\
  !*** ./src/shared/services/command.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSendCommandFunction: () => (/* binding */ createSendCommandFunction),
/* harmony export */   registerCommand: () => (/* binding */ registerCommand),
/* harmony export */   sendCommand: () => (/* binding */ sendCommand)
/* harmony export */ });
/* harmony import */ var _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/network.service */ "./src/shared/services/network.service.ts");
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");
/* harmony import */ var _shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/data/rpc.model */ "./src/shared/data/rpc.model.ts");
/**
 * Handles registering, sending, and receiving commands with the Paratext backend in a unified
 * format. Exposed on papi
 */



/**
 * Register a command on the papi to be handled here
 *
 * @param commandName Command name to register for handling here
 *
 *   - Note: Command names must consist of two string separated by at least one period. We recommend one
 *       period and lower camel case in case we expand the api in the future to allow dot notation.
 *
 * @param handler Function to run when the command is invoked
 * @returns Promise that resolves if the command successfully registered and unsubscriber function
 *   to run to stop the passed-in function from handling commands
 */
const registerCommand = (commandName, handler, commandDocs) => {
    return _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.registerRequestHandler((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_1__.serializeRequestType)(_shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_2__.CATEGORY_COMMAND, commandName), handler, commandDocs);
};
/** Send a command to the backend. */
const sendCommand = async (commandName, ...args) => {
    // This type assertion is needed when the return type is unknown or when it's not Awaited<...>.
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion, no-type-assertion/no-type-assertion
    return _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.request((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_1__.serializeRequestType)(_shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_2__.CATEGORY_COMMAND, commandName), ...args);
};
/**
 * Creates a function that is a command function with a baked commandName. This is also nice because
 * you get TypeScript type support using this function.
 *
 * @param commandName Command name for command function
 * @returns Function to call with arguments of command that sends the command and resolves with the
 *   result of the command
 */
const createSendCommandFunction = (commandName) => {
    return async (...args) => sendCommand(commandName, ...args);
};


/***/ }),

/***/ "./src/shared/services/data-provider.service.ts":
/*!******************************************************!*\
  !*** ./src/shared/services/data-provider.service.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataProviderService: () => (/* binding */ dataProviderService),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getByType: () => (/* binding */ getByType),
/* harmony export */   registerEngineByType: () => (/* binding */ registerEngineByType)
/* harmony export */ });
/* harmony import */ var _shared_models_data_provider_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/models/data-provider.model */ "./src/shared/models/data-provider.model.ts");
/* harmony import */ var _shared_models_data_provider_engine_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/models/data-provider-engine.model */ "./src/shared/models/data-provider-engine.model.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_services_network_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/services/network.service */ "./src/shared/services/network.service.ts");
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var _shared_services_notification_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @shared/services/notification.service */ "./src/shared/services/notification.service.ts");
/** Handles registering data providers and serving data around the papi. Exposed on the papi. */








/** Suffix on network objects that indicates that the network object is a data provider */
const DATA_PROVIDER_LABEL = 'data';
/** Event type for data provider update event */
const ON_DID_UPDATE = 'onDidUpdate';
/**
 * An object reference that is a placeholder for updates for data provider subscribers. We want to
 * make absolutely sure updates that come in are sent to subscribers, so we use this object
 * reference to tell if we have never had an update before.
 */
const SUBSCRIBE_PLACEHOLDER = {};
/**
 * Gets the id for the data provider network object with the given name Don't add the suffix to the
 * provider name if it's already there to avoid duplication
 */
const getDataProviderObjectId = (providerName) => {
    return (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.endsWith)(providerName, `-${DATA_PROVIDER_LABEL}`)
        ? providerName
        : `${providerName}-${DATA_PROVIDER_LABEL}`;
};
/** Whether this service has finished setting up */
let isInitialized = false;
/** Promise that resolves when this service is finished initializing */
let initializePromise;
/** Sets up the service. Only runs once and always returns the same promise after that */
const initialize = () => {
    if (initializePromise)
        return initializePromise;
    initializePromise = (async () => {
        if (isInitialized)
            return;
        await _shared_services_network_service__WEBPACK_IMPORTED_MODULE_3__.initialize();
        isInitialized = true;
    })();
    return initializePromise;
};
/**
 * JSDOC SOURCE DataProviderServiceHasKnown
 *
 * Indicate if we are aware of an existing data provider with the given name. If a data provider
 * with the given name is somewhere else on the network, this function won't tell you about it
 * unless something else in the existing process is subscribed to it.
 */
function hasKnown(providerName) {
    return _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_5__.networkObjectService.hasKnown(getDataProviderObjectId(providerName));
}
function constructErrorNotification(exception) {
    const retVal = {
        severity: 'error',
        message: '',
        clickCommandLabel: '%general_open%',
        // TS doesn't realize this is a valid command handler key since it is defined in an extension
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        clickCommand: 'paratextRegistration.showParatextRegistration',
    };
    if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isErrorMessageAboutParatextBlockingInternetAccess)(exception)) {
        retVal.message = '%data_loading_error_paratextData_internet_disabled%';
    }
    else if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isErrorMessageAboutRegistryAuthFailure)(exception)) {
        retVal.message = '%data_loading_error_paratextData_auth_failure%';
    }
    else {
        return undefined;
    }
    return retVal;
}
/**
 * Creates a subscribe function for a data provider to allow subscribing to updates on the data
 *
 * @param dataProviderPromise Promise to the data provider's network object
 * @param onDidUpdate The event to listen to for updates on the data
 * @param dataType The name of the functions to use (ex: `dataProvider.subscribeBook` ->
 *   `dataProvider.getBook`)
 * @returns Subscribe function for a data provider
 */
function createDataProviderSubscriber(dataProviderPromise, onDidUpdate, dataType) {
    return async (selector, callback, options) => {
        // We need an untyped version of the DP so we can use string-template-mapped-type properties
        // on it even though the strings that get templated are one of many possibilities. It seems
        // TypeScript is unable to distinguish that `DataTypeNames<DataProviderTypes[DataProviderName]>`
        // is one specific set of names of data types
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        const dataProviderUntyped = (await dataProviderPromise);
        // Default options
        const subscriberOptions = {
            retrieveDataImmediately: true,
            whichUpdates: 'deeply-equal',
            ...options,
        };
        const { retrieveDataImmediately, whichUpdates } = subscriberOptions;
        // Keep track of whether we should call the callback when we receive a result or if they have already unsubscribed
        // Important because a promise could resolve after they have unsubscribed
        let isSubscribed = true;
        /**
         * The most recent data before the newest update. Used for deep comparison checks to prevent
         * useless updates
         */
        // Start this out as a placeholder so updates definitely run the callback (including if the data is undefined or an empty object)
        // TODO: create a cache for the data provider that holds data returned per selector and shares that cache here
        let dataPrevious = SUBSCRIBE_PLACEHOLDER;
        // Create a layer over the provided callback that lets us know if we received an update so we don't run the callback with old data after updating
        /**
         * Whether we have already received an update event, meaning our initial `get` will return old
         * data
         */
        let receivedUpdate = false;
        const callbackWithUpdate = async (updateEventResult) => {
            // If we're already unsubscribed somehow, don't want to run this
            if (!isSubscribed)
                return;
            if (updateEventResult !== '*' &&
                (!Array.isArray(updateEventResult) || !updateEventResult.includes(dataType)))
                // The update does not apply to this data type. Ignore
                return;
            try {
                // The update is relevant to this data type, so continue with this subscription
                // Get the data at our selector when we receive notification that the data updated
                // TODO: Implement selector events so we can receive the new data with the update instead of reaching back out for it
                // TypeScript seems to be unable to figure out these `get${dataType}` types when we wrap
                // DataProviderInternal in NetworkObject to make IDataProvider, so we have to do all this work
                // to specify the specific types
                /* eslint-disable no-type-assertion/no-type-assertion */
                const data = await dataProviderUntyped[`get${dataType}`
                // Sadly DataProviderGetter<DataProviderTypes[DataProviderName][typeof dataType]> doesn't
                // work here. See comment in function signature for more info
                ](selector);
                /* eslint-enable */
                // Take note that we have received an update so we don't run the callback with the old data below in the `retrieveDataImmediately` code
                receivedUpdate = true;
                // If we unsubscribed while we were awaiting the promise to get data, don't do anything
                if (!isSubscribed)
                    return;
                // Only update if we should listen to all updates, if the old data is the default placeholder data, or the data is not deeply equal
                if (whichUpdates === '*' ||
                    dataPrevious === SUBSCRIBE_PLACEHOLDER ||
                    !(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(dataPrevious, data)) {
                    dataPrevious = data;
                    callback(data);
                }
            }
            catch (e) {
                const selectorDetails = JSON.stringify(selector) ?? '<undefined>';
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn(`Tried to retrieve data after an update event for ${dataType} with selector ${selectorDetails.substring(0, 120)}, but it threw. ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(e)}`);
                callback((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.newPlatformError)(e));
                const notification = constructErrorNotification(e);
                if (notification)
                    _shared_services_notification_service__WEBPACK_IMPORTED_MODULE_7__.notificationService.send(notification);
            }
        };
        const unsubscribe = onDidUpdate(callbackWithUpdate);
        // If the subscriber wants to get the data as soon as possible in addition to running the callback on updates, get the data
        if (retrieveDataImmediately) {
            (async () => {
                try {
                    // Get the data to run the callback immediately so it has the data
                    // TypeScript seems to be unable to figure out these `get${dataType}` types when we wrap
                    // DataProviderInternal in NetworkObject to make IDataProvider, so we have to do all this work
                    // to specify the specific types
                    /* eslint-disable no-type-assertion/no-type-assertion */
                    const data = await dataProviderUntyped[`get${dataType}`
                    // Sadly DataProviderGetter<DataProviderTypes[DataProviderName][typeof dataType]> doesn't
                    // work here. See comment in function signature for more info
                    ](selector);
                    /* eslint-enable */
                    // Only run the callback with this updated data if we have not already received an update so we don't accidentally overwrite the newly updated data with old data
                    // And don't run the callback if we have already unsubscribed
                    if (!receivedUpdate && isSubscribed) {
                        receivedUpdate = true;
                        dataPrevious = data;
                        callback(data);
                    }
                }
                catch (e) {
                    const selectorDetails = JSON.stringify(selector) ?? '<undefined>';
                    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.warn(`Tried to retrieve data immediately for ${dataType} with selector ${selectorDetails.substring(0, 120)}, but it threw. ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(e)}`);
                    callback((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.newPlatformError)(e));
                    const notification = constructErrorNotification(e);
                    if (notification)
                        _shared_services_notification_service__WEBPACK_IMPORTED_MODULE_7__.notificationService.send(notification);
                }
            })();
        }
        // Forcing the unsubscribe to be asynchronous to support selector events in the future
        return async () => {
            const didSuccessfullyUnsubscribe = unsubscribe();
            if (didSuccessfullyUnsubscribe)
                isSubscribed = false;
            return didSuccessfullyUnsubscribe;
        };
    };
}
/**
 * Creates a data provider proxy with `subscribe<data_type>` functions. Runs locally and remote
 *
 * @param dataProviderEngine Engine to make the data provider proxy over if local. `undefined` if
 *   remote
 * @param dataProviderPromise Promise to the data provider's network object
 * @param onDidUpdate The event to listen to for updates on the data
 * @returns Data provider proxy with `subscribe<data_type>` functions
 */
function createDataProviderProxy(dataProviderEngine, dataProviderPromise, onDidUpdate) {
    // Object whose methods to run first when the data provider's method is called if they exist here
    // before falling back to the dataProviderEngine's methods. Caches subscribe functions and bound
    // data provider engine methods.
    // TODO: update network objects so remote objects know when methods do not exist, then make IDataProvider.set optional
    const dataProviderInternal = {};
    // Create a proxy that runs the data provider method if it exists or runs the engine method
    // otherwise.
    // Type assert the data provider engine proxy because it is a DataProviderInternal.
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    const dataProvider = new Proxy(dataProviderEngine ??
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        dataProviderInternal, {
        get(obj, prop) {
            // Pass promises through. Assert type of `prop` to index `obj`.
            // eslint-disable-next-line no-type-assertion/no-type-assertion
            if (prop === 'then')
                return obj[prop];
            // Do not let anyone but the data provider engine send updates
            if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(prop) && prop === 'notifyUpdate')
                throw new Error('Cannot run notifyUpdate outside of data provider engine');
            // If the data provider already has the method, run it
            if (prop in dataProviderInternal)
                // Assert type of `prop` to index `dataProviderInternal`.
                // eslint-disable-next-line no-type-assertion/no-type-assertion
                return dataProviderInternal[prop];
            /** Figure out the method that will go on the data provider to run */
            // Any because we want this method to be any method on the data provider type
            let newDataProviderMethod;
            // If they want a subscriber, build a subscribe function specific to the data type used
            if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(prop) && (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(prop, 'subscribe')) {
                const dataType = (0,_shared_models_data_provider_model__WEBPACK_IMPORTED_MODULE_0__.getDataProviderDataTypeFromFunctionName)(prop);
                // Subscribe to run the callback when data changes. Also immediately calls callback with the current value
                newDataProviderMethod = createDataProviderSubscriber(dataProviderPromise, onDidUpdate, dataType);
            }
            // If it's not a subscribe and the data provider engine is provided (meaning this proxy is
            // being created for a local data provider), try to get the engine method
            else if (dataProviderEngine) {
                // Otherwise, get the engine method and bind it
                // There isn't indexing on IDataProviderEngine so normal objects could be used,
                // but now members can't be accessed by indexing in DataProviderService
                // TODO: fix it so it is indexable but can have specific members
                newDataProviderMethod =
                    /* eslint-disable @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion */
                    obj[prop]?.bind(dataProviderEngine);
                /* eslint-enable */
            }
            // Save the bound engine method on the data provider to be run later
            if (newDataProviderMethod) {
                // There isn't indexing on IDataProviderEngine so normal objects could be used,
                // but now members can't be accessed by indexing in DataProviderService
                // TODO: fix it so it is indexable but can have specific members
                // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion
                dataProviderInternal[prop] = newDataProviderMethod;
            }
            return newDataProviderMethod;
        },
        set(obj, prop, value) {
            // We create `subscribe<data_type>` and `notifyUpdate` for extensions, and
            // `subscribe<data_type>` uses `get<data_type>` internally, so those 3 properties can't
            // change after the data provider has been created or bad things will happen.
            // Locally the data provider engine has getters and the data provider service creates the
            // subscribers and notifyUpdate.
            // Remotely this proxy creates subscribers, there is no need for notifyUpdate, and the
            // network object service sets getters as network request functions through this proxy.
            // These request functions should not have to change after they're set for the first time.
            if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(prop) &&
                ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(prop, 'get') || (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(prop, 'subscribe') || prop === 'notifyUpdate') &&
                (prop in obj || prop in dataProviderInternal))
                return false;
            // If we cached a property previously, purge the cache for that property since it is changing.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion
            if (dataProviderInternal[prop])
                delete dataProviderInternal[prop];
            // Actually set the provided property
            Reflect.set(obj, prop, value);
            return true;
        },
        has(obj, prop) {
            if (prop in dataProviderInternal)
                return true;
            // This proxy provides subscribe methods, so make sure they seem to exist
            if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(prop) && (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(prop, 'subscribe'))
                return true;
            return prop in obj;
        },
    });
    return dataProvider;
}
/**
 * Maps from update instructions returned from `notifyUpdate` or a `set<data_type>` function to an
 * update event to send over the network to inform subscribers to update their data
 *
 * @param updateInstructions Update instructions to reformat into an update event
 * @param dataType The data type of the update instructions (e.g. 'Verse' if update instructions
 *   came from `setVerse`) or `undefined` if being mapped for `notifyUpdate`, which doesn't have a
 *   data type
 * @returns Update event information to send in the `onDidUpdate` event emitter to tell subscribers
 *   to update
 */
function mapUpdateInstructionsToUpdateEvent(updateInstructions, dataType) {
    // If they want to update all data types, let them do it
    if (updateInstructions === '*')
        return updateInstructions;
    // If the update instructions are a string other than '*' (hopefully one of the data types), send
    // an update specifically for that data type
    if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(updateInstructions))
        return [updateInstructions];
    if (Array.isArray(updateInstructions)) {
        // If the update instructions are a non-empty array, send it
        if (updateInstructions.length > 0)
            return updateInstructions;
        // If the update instructions are an empty array, don't update (count as falsy)
        return false;
    }
    // If the update instructions are truthy but neither an array or a string or '*', it means we should just send an update for its own data type
    // However, we don't have a data type if we're mapping for `notifyUpdate`, so just return '*' to update everything.
    if (updateInstructions)
        return dataType !== undefined ? [dataType] : '*';
    // If the update instructions are falsy, do not update
    return false;
}
// We don't care what type the decorated object is. Just want to set some function metadata
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function ignore(target, member) {
    if (typeof target === 'function') {
        target.isIgnored = true;
        return;
    }
    if (!member)
        return;
    target[member].isIgnored = true;
}
// We don't care what type the decorated object is. Just want to set some function metadata
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function doNotNotify(target, member) {
    if (typeof target === 'function') {
        target.doNotNotify = true;
        return;
    }
    if (!member)
        return;
    target[member].doNotNotify = true;
}
/**
 * JSDOC SOURCE DataProviderServiceDecorators
 *
 * A collection of decorators to be used with the data provider service
 *
 * @example To use the `ignore` a decorator on a class's method:
 *
 * ```typescript
 * class MyDataProviderEngine {
 * ＠papi.dataProviders.decorators.ignore
 * async getInternal() {}
 * }
 * ```
 *
 * WARNING: Do not copy and paste this example. The `@` symbol does not render correctly in JSDoc
 * code blocks, so a different unicode character was used. Please use a normal `@` when using a
 * decorator.
 */
const decorators = {
    /** JSDOC DESTINATION DataProviderServiceDecoratorsIgnore */
    ignore,
    /** JSDOC DESTINATION DataProviderServiceDecoratorsDoNotNotify */
    doNotNotify,
};
/**
 * Wrap a data provider engine to create a data provider that handles subscriptions for it.
 *
 * Note: This should only run locally when you have the data provider engine. The remote data
 * provider is pretty much just a network object
 *
 * WARNING: this function mutates the provided object. Its `notifyUpdate` and `set<data_type>`
 * methods are layered over to facilitate data provider subscriptions.
 *
 * @param dataProviderEngine Provider engine that handles setting and getting data as well as
 *   informing which listeners should get what updates
 * @param dataProviderPromise Promise to the data provider's network object
 * @param onDidUpdateEmitter Event emitter to use for informing subscribers of updates. The event
 *   just returns what set returns (should be true according to IDataProviderEngine)
 * @returns Data provider layering over the provided data provider engine
 */
function buildDataProvider(dataProviderEngine, dataProviderPromise, onDidUpdateEmitter) {
    // We need an untyped version of the DPE so we can get and set string-template-mapped-type
    // properties on it even though the strings that get templated are one of many possibilities.
    // It seems TypeScript is unable to distinguish that
    // `DataTypeNames<DataProviderTypes[DataProviderName]>` is one specific set of names of data types
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    const dataProviderEngineUntyped = dataProviderEngine;
    // Figure out the available get/set methods' data types
    const dataTypes = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.groupBy)([...(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.getAllObjectFunctionNames)(dataProviderEngine)], (fnName) => {
        // If the function was decorated with @ignore, do not consider it a special function
        if (dataProviderEngineUntyped[fnName].isIgnored)
            return 'other';
        if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(fnName, 'get'))
            return 'get';
        if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(fnName, 'set'))
            return 'set';
        return 'other';
    }, (fnName, fnType) => {
        // If it's not a get or a set, just return an empty string. We aren't planning to use this
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        if (fnType === 'other')
            return '';
        // Grab the data type out of the function names
        return (0,_shared_models_data_provider_model__WEBPACK_IMPORTED_MODULE_0__.getDataProviderDataTypeFromFunctionName)(fnName);
    });
    // Validate that the data provider engine has matching get and set functions
    if (dataTypes.get('get')?.length !== dataTypes.get('set')?.length ||
        dataTypes.get('get')?.some((getDataType) => !dataTypes.get('set')?.includes(getDataType)))
        throw new Error('Data provider engine does not have matching get and set functions!');
    // Layer over data provider engine methods to give it control over emitting updates
    // Layer over the data provider engine's notifyUpdate with one that actually emits an update
    // or if the dpe doesn't have notifyUpdate, give it one
    const dpeNotifyUpdate = dataProviderEngine.notifyUpdate
        ? dataProviderEngine.notifyUpdate.bind(dataProviderEngine)
        : undefined;
    dataProviderEngine.notifyUpdate = (updateInstructions = true, ...args) => {
        // emit an update if updateInstructions indicate to do so
        const updateEventResult = mapUpdateInstructionsToUpdateEvent(updateInstructions, undefined);
        // Run the data provider engine's original `notifyUpdate` with the update result before we send the update
        if (dpeNotifyUpdate)
            dpeNotifyUpdate(updateEventResult, ...args);
        if (updateEventResult)
            onDidUpdateEmitter.emit(updateEventResult);
    };
    // Layer over the data provider engine's set methods with set methods that actually emit an update
    // if they return true
    dataTypes.get('set')?.forEach((dataType) => {
        // If the function was decorated with @doNotNotify, do not overwrite it to automatically emit an update
        if (dataProviderEngineUntyped[`set${dataType}`] &&
            // We don't care about types. We just want to check the decorator
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion
            !dataProviderEngineUntyped[`set${dataType}`].doNotNotify) {
            /* eslint-disable no-type-assertion/no-type-assertion */
            /** Saved bound version of the data provider engine's set so we can call it from here */
            const dpeSet = dataProviderEngineUntyped[`set${dataType}`].bind(dataProviderEngine);
            /** Layered set that emits an update event after running the engine's set */
            dataProviderEngineUntyped[`set${dataType}`] =
                /* eslint-enable */
                async (...args) => {
                    const dpeSetResult = await dpeSet(...args);
                    const updateEventResult = mapUpdateInstructionsToUpdateEvent(dpeSetResult, dataType);
                    if (updateEventResult)
                        onDidUpdateEmitter.emit(updateEventResult);
                    return dpeSetResult;
                };
        }
    });
    // Layer over the data provider engine's dispose method to make sure its update emitter is
    // disposed when it is disposed.
    (0,_shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_5__.overrideDispose)(dataProviderEngine, async () => onDidUpdateEmitter.dispose());
    return createDataProviderProxy(dataProviderEngine, dataProviderPromise, onDidUpdateEmitter.event);
}
/**
 * JSDOC SOURCE DataProviderServiceRegisterEngine
 *
 * Creates a data provider to be shared on the network layering over the provided data provider
 * engine.
 *
 * @param providerName Name this data provider should be called on the network
 * @param dataProviderEngine The object to layer over with a new data provider object
 * @param dataProviderType String to send in a network event to clarify what type of data provider
 *   is represented by this engine. For generic data providers, the default value of `dataProvider`
 *   can be used. For data provider types that have multiple instances (e.g., project data
 *   providers), a unique type name should be used to distinguish from generic data providers.
 * @param dataProviderAttributes Optional object that will be sent in a network event to provide
 *   additional metadata about the data provider represented by this engine.
 *
 *   WARNING: registering a dataProviderEngine mutates the provided object. Its `notifyUpdate` and
 *   `set` methods are layered over to facilitate data provider subscriptions.
 * @returns The data provider including control over disposing of it. Note that this data provider
 *   is a new object distinct from the data provider engine passed in.
 */
async function registerEngine(providerName, dataProviderEngine, dataProviderType = 'dataProvider', dataProviderAttributes = undefined) {
    await initialize();
    if (hasKnown(providerName))
        throw new Error(`Data provider with name ${providerName} is already registered`);
    // We are good to go! Create the data provider
    // Get the object id for this data provider name
    const dataProviderObjectId = getDataProviderObjectId(providerName);
    /**
     * Variable to hold a promise to the final data provider's network object so the local object can
     * reference the network object in its functions
     */
    const dataProviderVariable = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.AsyncVariable(`DataProvider-${providerName}`);
    // Create a networked update event
    const onDidUpdateEmitter = _shared_services_network_service__WEBPACK_IMPORTED_MODULE_3__.createNetworkEventEmitter((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_4__.serializeRequestType)(dataProviderObjectId, ON_DID_UPDATE));
    // Build the data provider
    const dataProviderInternal = buildDataProvider(dataProviderEngine, dataProviderVariable.promise, onDidUpdateEmitter);
    // Set up the data provider to be a network object so other processes can use it
    // Now that we are using shared interface types for data providers, `networkObjectService.set` is
    // messing up all the string template types when it runs it through `DisposableNetworkObject`
    // which has `Omit`. So we need to pass through `unknown` to get to the correct type
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    const disposableDataProvider = (await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_5__.networkObjectService.set(dataProviderObjectId, dataProviderInternal, dataProviderType, dataProviderAttributes));
    // Get the local network object proxy for the data provider so the provider can't be disposed
    // outside the service that registered the provider engine. Assert type without NetworkObject.
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    const dataProvider = (await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_5__.networkObjectService.get(dataProviderObjectId));
    // Update the dataProviderVariable so the internal data provider (specifically its subscribe
    // function) can access the dataProvider appropriately
    if (dataProvider)
        dataProviderVariable.resolveToValue(dataProvider);
    else
        throw Error(`Unable to get network object for data provider: ${dataProviderObjectId}`);
    return disposableDataProvider;
}
/**
 * Creates a data provider to be shared on the network layering over the provided data provider
 * engine.
 *
 * @type `TDataTypes` - The data provider data types served by the data provider to create.
 *
 *   This is not exposed on the papi as it is a helper function to enable other services to layer over
 *   this service and create their own subsets of data providers with other types than
 *   `DataProviders` types using this function and {@link getByType}
 * @param providerName Name this data provider should be called on the network
 * @param dataProviderEngine The object to layer over with a new data provider object
 * @param dataProviderType String to send in a network event to clarify what type of data provider
 *   is represented by this engine. For generic data providers, the default value of `dataProvider`
 *   can be used. For data provider types that have multiple instances (e.g., project data
 *   providers), a unique type name should be used to distinguish from generic data providers.
 * @param dataProviderAttributes Optional object that will be sent in a network event to provide
 *   additional metadata about the data provider represented by this engine.
 *
 *   WARNING: registering a dataProviderEngine mutates the provided object. Its `notifyUpdate` and
 *   `set` methods are layered over to facilitate data provider subscriptions.
 * @returns The data provider including control over disposing of it. Note that this data provider
 *   is a new object distinct from the data provider engine passed in.
 */
// Seems TypeScript doesn't like using a generic string to index DataProviderDataTypes
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function registerEngineByType(providerName, dataProviderEngine, dataProviderType = 'dataProvider', dataProviderAttributes = undefined) {
    // All the types on this function and `registerEngine` are just TypeScript helpers. They do not
    // serve us well in this particular case, so we're ignoring the types and using our own since we
    // are making other kinds of data providers that are not in `DataProviders`
    /* eslint-disable no-type-assertion/no-type-assertion, @typescript-eslint/no-explicit-any */
    return registerEngine(providerName, dataProviderEngine, dataProviderType, dataProviderAttributes);
    /* eslint-enable no-type-assertion/no-type-assertion, @typescript-eslint/no-explicit-any */
}
/**
 * Create a mock local data provider object for connecting to the remote data provider. This object
 * has the properties on the local data provider object that are not strictly network object
 * functions that just send requests across the network. For example, this object has all the
 * `subscribe${dataType}` functions on it since those run code on the local process.
 *
 * @param dataProviderObjectId Network object id corresponding to this data provider
 * @param dataProviderContainer Container that holds a reference to the data provider so this
 *   subscribe function can reference the data provider
 * @returns Local data provider object that represents a remote data provider
 */
// This generic type should be DataProviderInternal because we are making part of a local/internal data provider
function createLocalDataProviderToProxy(dataProviderObjectId, dataProviderPromise) {
    // Create a networked update event
    const onDidUpdate = _shared_services_network_service__WEBPACK_IMPORTED_MODULE_3__.getNetworkEvent((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_4__.serializeRequestType)(dataProviderObjectId, ON_DID_UPDATE));
    return createDataProviderProxy(undefined, dataProviderPromise, onDidUpdate);
}
/**
 * JSDOC SOURCE DataProviderServiceGet
 *
 * Get a data provider that has previously been set up
 *
 * @param providerName Name of the desired data provider
 * @returns The data provider with the given name if one exists, undefined otherwise
 */
async function get(providerName) {
    await initialize();
    // Get the object id for this data provider name
    const dataProviderObjectId = getDataProviderObjectId(providerName);
    // Get the network object for this data provider. Assert to specified generic type.
    /* eslint-disable no-type-assertion/no-type-assertion */
    const dataProvider = (await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_5__.networkObjectService.get(dataProviderObjectId, createLocalDataProviderToProxy));
    /* eslint-enable */
    if (!dataProvider) {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_6__.logger.info(`No data provider found with name = ${providerName}`);
        return undefined;
    }
    return dataProvider;
}
/**
 * Get a data provider that has previously been set up
 *
 * @type `T` - The type of data provider to get. Use `IDataProvider<TDataProviderDataTypes>`,
 *   specifying your own types, or provide a custom data provider type
 *
 *   This is not exposed on the papi as it is a helper function to enable other services to layer over
 *   this service and create their own subsets of data providers with other types than
 *   `DataProviders` types using this function and {@link registerEngineByType}
 * @param providerName Name of the desired data provider
 * @returns The data provider with the given name if one exists, undefined otherwise
 */
// Seems TypeScript doesn't like using a generic string to index DataProviderDataTypes
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function getByType(providerName) {
    // All the types on this function and `get` are just TypeScript helpers. They do not serve us well
    // in this particular case, so we're ignoring the types and using our own since we are getting
    // other kinds of data providers that are not in `DataProviders`
    // eslint-disable-next-line no-type-assertion/no-type-assertion, @typescript-eslint/no-explicit-any
    return get(providerName);
}
/**
 * JSDOC SOURCE dataProviderService
 *
 * Service that allows extensions to send and receive data to/from other extensions
 */
const dataProviderService = {
    hasKnown,
    registerEngine,
    get,
    decorators,
    DataProviderEngine: _shared_models_data_provider_engine_model__WEBPACK_IMPORTED_MODULE_1__.DataProviderEngine,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dataProviderService);


/***/ }),

/***/ "./src/shared/services/extension-asset.service.ts":
/*!********************************************************!*\
  !*** ./src/shared/services/extension-asset.service.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CATEGORY_EXTENSION_ASSET: () => (/* binding */ CATEGORY_EXTENSION_ASSET),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   extensionAssetService: () => (/* binding */ extensionAssetService)
/* harmony export */ });
/* harmony import */ var _shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/utils/internal-util */ "./src/shared/utils/internal-util.ts");
/* harmony import */ var _shared_services_network_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/network.service */ "./src/shared/services/network.service.ts");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");




let getAsset;
let isInitialized = false;
let initializePromise;
/** Prefix on requests that indicates that the request is on the extension asset service */
const CATEGORY_EXTENSION_ASSET = 'extensionAsset';
/** Name for request to get an extension asset */
const GET_EXTENSION_ASSET_REQUEST = 'getExtensionAsset';
/**
 * Load an asset from the given extension's installation directory
 *
 * @param extensionName Name of the extension
 * @param assetName Name of the asset including any path information
 * @returns Base 64 encoded value of the asset if it exists, otherwise undefined
 */
const getExtensionAsset = async (extensionName, assetName) => {
    if ((0,_shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_0__.isExtensionHost)()) {
        try {
            return (await getAsset(extensionName, assetName)).toString('base64');
        }
        catch (error) {
            _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_2__.logger.error(`Could not get asset "${assetName}" from "${extensionName}": ${error}`);
            return undefined;
        }
    }
    else {
        return _shared_services_network_service__WEBPACK_IMPORTED_MODULE_1__.request((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_3__.serializeRequestType)(CATEGORY_EXTENSION_ASSET, GET_EXTENSION_ASSET_REQUEST), extensionName, assetName);
    }
};
/** This should only be called by the extension host. */
const initialize = async () => {
    if (initializePromise)
        return initializePromise;
    if (!(0,_shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_0__.isExtensionHost)())
        return undefined;
    initializePromise = (async () => {
        if (isInitialized)
            return;
        getAsset = (await Promise.resolve().then(function webpackMissingModule() { var e = new Error("Cannot find module '@extension-host/services/asset-retrieval.service'"); e.code = 'MODULE_NOT_FOUND'; throw e; })).default;
        const requestType = (0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_3__.serializeRequestType)(CATEGORY_EXTENSION_ASSET, GET_EXTENSION_ASSET_REQUEST);
        await _shared_services_network_service__WEBPACK_IMPORTED_MODULE_1__.registerRequestHandler(requestType, async (extensionName, assetName) => {
            return getExtensionAsset(extensionName, assetName);
        }, {
            method: {
                summary: 'Get an asset from an extension',
                params: [
                    {
                        name: 'extensionName',
                        required: true,
                        summary: 'Name of the extension to get the asset from',
                        schema: { type: 'string' },
                    },
                    {
                        name: 'assetName',
                        required: true,
                        summary: 'Name of the asset to get',
                        schema: { type: 'string' },
                    },
                ],
                result: {
                    name: 'return value',
                    summary: 'Base64 encoded asset if it exists',
                    schema: { oneOf: [{ type: 'string' }, { type: 'null' }] },
                },
            },
        });
        isInitialized = true;
    })();
    return initializePromise;
};
const extensionAssetService = {
    initialize,
    getExtensionAsset,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extensionAssetService);


/***/ }),

/***/ "./src/shared/services/localization.service-model.ts":
/*!***********************************************************!*\
  !*** ./src/shared/services/localization.service-model.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   localizationServiceObjectToProxy: () => (/* binding */ localizationServiceObjectToProxy),
/* harmony export */   localizationServiceProviderName: () => (/* binding */ localizationServiceProviderName)
/* harmony export */ });
/** JSDOC DESTINATION localizationServiceProviderName */
const localizationServiceProviderName = 'platform.localizationDataServiceDataProvider';
const localizationServiceObjectToProxy = Object.freeze({
    /**
     * JSDOC SOURCE localizationServiceProviderName
     *
     * This name is used to register the localization data provider on the papi. You can use this name
     * to find the data provider when accessing it using the useData hook
     */
    dataProviderName: localizationServiceProviderName,
});


/***/ }),

/***/ "./src/shared/services/localization.service.ts":
/*!*****************************************************!*\
  !*** ./src/shared/services/localization.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   localizationService: () => (/* binding */ localizationService)
/* harmony export */ });
/* harmony import */ var _shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/data-provider.service */ "./src/shared/services/data-provider.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_services_localization_service_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/localization.service-model */ "./src/shared/services/localization.service-model.ts");



let dataProvider;
let initializationPromise;
async function initialize() {
    if (!initializationPromise) {
        initializationPromise = new Promise((resolve, reject) => {
            const executor = async () => {
                try {
                    const provider = await _shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_0__.dataProviderService.get(_shared_services_localization_service_model__WEBPACK_IMPORTED_MODULE_2__.localizationServiceProviderName);
                    if (!provider)
                        throw new Error('Localization service undefined');
                    dataProvider = provider;
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            };
            executor();
        });
    }
    return initializationPromise;
}
const localizationService = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.createSyncProxyForAsyncObject)(async () => {
    await initialize();
    return dataProvider;
}, {
    ..._shared_services_localization_service_model__WEBPACK_IMPORTED_MODULE_2__.localizationServiceObjectToProxy,
    getLocalizedIdFromBookNumber(bookNum, localizationLanguage) {
        return (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.getLocalizedIdFromBookNumber)(bookNum, localizationLanguage, ({ localizeKey, ...options }) => localizationService.getLocalizedString({
            ...options,
            localizeKey: `%${localizeKey}%`,
        }));
    },
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (localizationService);


/***/ }),

/***/ "./src/shared/services/logger.service.ts":
/*!***********************************************!*\
  !*** ./src/shared/services/logger.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WARN_TAG: () => (/* binding */ WARN_TAG),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   formatLog: () => (/* binding */ formatLog),
/* harmony export */   logger: () => (/* binding */ logger)
/* harmony export */ });
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chalk */ "./node_modules/chalk/source/index.js");
/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(chalk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var electron_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! electron-log */ "./node_modules/electron-log/src/index.js");
/* harmony import */ var electron_log__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(electron_log__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/utils/internal-util */ "./src/shared/utils/internal-util.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");




const WARN_TAG = '<WARN>';
/**
 * Destructure a line from an Error object
 *
 * @param errorLine Single line from an Error object string
 * @returns Object containing the function name, file name, line number, and column number from the
 *   line of the Error object string. If the line couldn't be parsed, then undefined.
 */
function parseErrorLine(errorLine) {
    // A few example lines to parse:
    // "    at functionName (filename.js:15:27)"
    // "at /home/username/paranext-core/src/shared/services/logger.service.ts:119:22"
    // "     at Timeout.i [as _onTimeout] (/home/username/paranext-core/extensions/dist/evil/evil.js:1:591)"
    const regex = /at[\s+]?([\w .[\]<>]+)?\s+\(?(.*?):(\d+):(\d+)\)?$/;
    const matches = errorLine.match(regex);
    // This console log is helpful if you need to see why some Error line isn't parsing as expected
    // eslint-disable-next-line no-console
    // console.log(`**** LINE: ${errorLine}\nResulting filename: ${matches?.at(2)}`);
    if (matches && matches.length === 5) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const [_, functionName, fileName, lineNumber, columnNumber] = matches;
        return {
            functionName,
            fileName,
            lineNumber: parseInt(lineNumber, 10),
            columnNumber: parseInt(columnNumber, 10),
        };
    }
    if (matches && matches.length === 4) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const [_, fileName, lineNumber, columnNumber] = matches;
        return {
            functionName: '',
            fileName,
            lineNumber: parseInt(lineNumber, 10),
            columnNumber: parseInt(columnNumber, 10),
        };
    }
    return undefined;
}
/**
 * Examine the call stack and return a parsed string containing the function name, file name, line
 * number, and column number where the call to the logger was made.
 *
 * @returns String that is suitable to attach to log output to indicate who what code wants to log
 */
function identifyCaller() {
    const { stack } = new Error();
    if (!stack)
        return undefined;
    let details;
    const lines = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.split)(stack, '\n');
    // Start at 3 to skip the "Error" line, this function's stack frame, and this function's caller
    for (let lineNumber = 3; lineNumber < lines.length; lineNumber += 1) {
        // Skip over all logging library frames to get to the real call
        if (!(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.includes)(lines[lineNumber], 'node_modules') && !(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.includes)(lines[lineNumber], 'node:')) {
            details = parseErrorLine(lines[lineNumber]);
            if (details)
                break;
        }
    }
    if (!details)
        return '';
    const functionName = details.functionName ? `${details.functionName} ` : '';
    const filePath = process.platform === 'win32' ? details.fileName : `file://${details.fileName}`;
    return `[at ${functionName}${filePath}:${details.lineNumber}:${details.columnNumber}]`;
}
/**
 * Format a string of a service message
 *
 * @param message Message from the service
 * @param serviceName Name of the service to show in the log
 * @param tag Optional tag at the end of the service name
 * @returns Formatted string of a service message
 */
function formatLog(message, serviceName, tag = '') {
    // Remove the new line at the end of every message coming from stdout from other processes
    const messageTrimmed = message.trimEnd();
    const openTag = `[${serviceName}${tag ? ' ' : ''}${tag}]`;
    if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.includes)(messageTrimmed, '\n')) {
        const closeTag = `[/${serviceName}${tag ? ' ' : ''}${tag}]`;
        // Multi-line
        return `\n${openTag}\n${messageTrimmed}\n${closeTag}`;
    }
    return `${openTag} ${messageTrimmed}`;
}
/** Abstract and shim the logger */
if ((0,_shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_2__.isClient)()) {
    (electron_log__WEBPACK_IMPORTED_MODULE_1___default().transports).console.level = globalThis.logLevel;
    if ((0,_shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_2__.isRenderer)())
        // On the renderer, insert formatting before sending
        electron_log__WEBPACK_IMPORTED_MODULE_1___default().hooks.push((message) => {
            const caller = identifyCaller();
            return {
                ...message,
                data: message.data.map((logLine) => formatLog(caller ? `${logLine} ${caller}` : `${logLine}`, (0,_shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_2__.getProcessType)(), 
                // Renderer sends back with log level of log. Not sure why it's not in the type
                // eslint-disable-next-line no-type-assertion/no-type-assertion
                message.level === 'log' ? undefined : message.level)),
            };
        });
    else if ((0,_shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_2__.isExtensionHost)())
        // Add a tag for warnings so we can recognize them outside the process.
        electron_log__WEBPACK_IMPORTED_MODULE_1___default().hooks.push((message) => {
            const caller = identifyCaller();
            const lineEnd = caller ? ` ${caller}` : '';
            return {
                ...message,
                data: message.data.map((logLine) => message.level === 'warn' ? `${WARN_TAG}${logLine}${lineEnd}` : `${logLine}${lineEnd}`),
            };
        });
    else {
        // eslint-disable-next-line no-console
        console.warn(chalk__WEBPACK_IMPORTED_MODULE_0___default().yellow(`Unexpected process type: ${globalThis.processType}`));
    }
}
else {
    electron_log__WEBPACK_IMPORTED_MODULE_1___default().initialize();
    (electron_log__WEBPACK_IMPORTED_MODULE_1___default().transports).console.level = globalThis.logLevel;
    (electron_log__WEBPACK_IMPORTED_MODULE_1___default().transports).console.format = '{h}:{i}:{s} {text}';
    (electron_log__WEBPACK_IMPORTED_MODULE_1___default().transports).console.writeFn = ({ message: msg }) => {
        let message = `${msg.data}`;
        // If we're piping through a log message from another service, don't add another file path
        // Messages from other services all start with "[service name]"
        if (!/\[[\w ]+\]/.test(message)) {
            const caller = identifyCaller();
            message = caller ? `${message} ${caller}` : `${message}`;
        }
        /* eslint-disable no-console */
        switch (msg.level) {
            case 'info':
                console.log(message);
                break;
            case 'warn':
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0___default().yellow(message));
                break;
            case 'error':
                console.log(chalk__WEBPACK_IMPORTED_MODULE_0___default().red(message));
                break;
            default:
                console.log(message);
                break;
        }
        /* eslint-enable */
    };
    (electron_log__WEBPACK_IMPORTED_MODULE_1___default().transports).file.level = globalThis.logLevel;
}
/**
 * JSDOC SOURCE logger
 *
 * All extensions and services should use this logger to provide a unified output of logs
 */
const logger = (electron_log__WEBPACK_IMPORTED_MODULE_1___default());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);


/***/ }),

/***/ "./src/shared/services/menu-data.service-model.ts":
/*!********************************************************!*\
  !*** ./src/shared/services/menu-data.service-model.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   menuDataServiceObjectToProxy: () => (/* binding */ menuDataServiceObjectToProxy),
/* harmony export */   menuDataServiceProviderName: () => (/* binding */ menuDataServiceProviderName)
/* harmony export */ });
/** JSDOC DESTINATION menuDataServiceProviderName */
const menuDataServiceProviderName = 'platform.menuDataServiceDataProvider';
const menuDataServiceObjectToProxy = Object.freeze({
    /**
     * JSDOC SOURCE menuDataServiceProviderName
     *
     * This name is used to register the menu data data provider on the papi. You can use this name to
     * find the data provider when accessing it using the useData hook
     */
    dataProviderName: menuDataServiceProviderName,
});


/***/ }),

/***/ "./src/shared/services/menu-data.service.ts":
/*!**************************************************!*\
  !*** ./src/shared/services/menu-data.service.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   menuDataService: () => (/* binding */ menuDataService)
/* harmony export */ });
/* harmony import */ var _shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/data-provider.service */ "./src/shared/services/data-provider.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_services_menu_data_service_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/menu-data.service-model */ "./src/shared/services/menu-data.service-model.ts");



let dataProvider;
let initializationPromise;
async function initialize() {
    if (!initializationPromise) {
        initializationPromise = new Promise((resolve, reject) => {
            const executor = async () => {
                try {
                    const provider = await _shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_0__.dataProviderService.get(_shared_services_menu_data_service_model__WEBPACK_IMPORTED_MODULE_2__.menuDataServiceProviderName);
                    if (!provider)
                        throw new Error('Menu data service undefined');
                    dataProvider = provider;
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            };
            executor();
        });
    }
    return initializationPromise;
}
const menuDataService = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.createSyncProxyForAsyncObject)(async () => {
    await initialize();
    return dataProvider;
}, _shared_services_menu_data_service_model__WEBPACK_IMPORTED_MODULE_2__.menuDataServiceObjectToProxy);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (menuDataService);


/***/ }),

/***/ "./src/shared/services/network-object-status.service.ts":
/*!**************************************************************!*\
  !*** ./src/shared/services/network-object-status.service.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   networkObjectStatusService: () => (/* binding */ networkObjectStatusService)
/* harmony export */ });
/* harmony import */ var _shared_models_network_object_status_service_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/models/network-object-status.service-model */ "./src/shared/models/network-object-status.service-model.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");



let networkObject;
let initializationPromise;
async function initialize() {
    if (!initializationPromise) {
        initializationPromise = new Promise((resolve, reject) => {
            const executor = async () => {
                try {
                    const localNetworkObjectStatusService = await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__.networkObjectService.get(_shared_models_network_object_status_service_model__WEBPACK_IMPORTED_MODULE_0__.networkObjectStatusServiceNetworkObjectName);
                    if (!localNetworkObjectStatusService)
                        throw new Error(`${_shared_models_network_object_status_service_model__WEBPACK_IMPORTED_MODULE_0__.networkObjectStatusServiceNetworkObjectName} is not available as a network object`);
                    networkObject = localNetworkObjectStatusService;
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            };
            executor();
        });
    }
    return initializationPromise;
}
// If we ever want to be more clever, we could just keep a local (to this process) cache of the
// active network objects. If we do that, we'll have to deal with initial race conditions around
// getting a network object disposed message in this process before handling the snapshot from
// the service host that includes the (now disposed) network object. Just asking the remote service
// is less error prone, but slower, whenever we get a request for the latest network objects.
async function getAllNetworkObjectDetails() {
    await initialize();
    return networkObject.getAllNetworkObjectDetails();
}
// Ideally we would use this inside the network object service to be event-based instead of polling
// while waiting for network objects to be created. That would create a circular dependency between
// this service and the network object service, though, which is most easily resolved by merging
// this code into the network object service. That service is pretty big as it is, so to optimize
// for code understandability we'll just leave it as-is and poll inside the network object service
// `get` for now. Other services will have to call this directly if they want to be event based.
async function waitForNetworkObject(objectDetailsToMatch, timeoutInMS) {
    const asyncVar = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.AsyncVariable(`wait-for-net-obj with details ${JSON.stringify(objectDetailsToMatch)}`, timeoutInMS ?? -1);
    try {
        // Watch the stream of incoming network objects before getting a snapshot to avoid race conditions
        const unsub = (0,_shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__.onDidCreateNetworkObject)((networkObjectDetails) => {
            if (!asyncVar.hasSettled && (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isSubset)(networkObjectDetails, objectDetailsToMatch)) {
                asyncVar.resolveToValue(networkObjectDetails, false);
            }
            if (asyncVar.hasSettled) {
                unsub();
            }
        });
        // Now check if the needed network object has already been created
        const existingNetworkObjectDetails = await getAllNetworkObjectDetails();
        if (!asyncVar.hasSettled) {
            const match = Object.values(existingNetworkObjectDetails).find((networkObjectDetails) => (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isSubset)(networkObjectDetails, objectDetailsToMatch));
            if (match) {
                asyncVar.resolveToValue(match, false);
            }
        }
    }
    catch (e) {
        const message = `waitForNetworkObject failed for details ${JSON.stringify(objectDetailsToMatch)}! ${e}`;
        asyncVar.rejectWithReason(message, true);
        throw e;
    }
    return asyncVar.promise;
}
/**
 * JSDOC SOURCE networkObjectStatusService
 *
 * Provides functions related to the set of available network objects
 */
const networkObjectStatusService = {
    getAllNetworkObjectDetails,
    waitForNetworkObject,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (networkObjectStatusService);


/***/ }),

/***/ "./src/shared/services/network-object.service.ts":
/*!*******************************************************!*\
  !*** ./src/shared/services/network-object.service.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   minimalNetworkObjectService: () => (/* binding */ minimalNetworkObjectService),
/* harmony export */   networkObjectService: () => (/* binding */ networkObjectService),
/* harmony export */   onDidCreateNetworkObject: () => (/* binding */ onDidCreateNetworkObject),
/* harmony export */   onDidDisposeNetworkObject: () => (/* binding */ onDidDisposeNetworkObject),
/* harmony export */   overrideDispose: () => (/* binding */ overrideDispose)
/* harmony export */ });
/* harmony import */ var _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/network.service */ "./src/shared/services/network.service.ts");
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/* harmony import */ var _shared_models_openrpc_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shared/models/openrpc.model */ "./src/shared/models/openrpc.model.ts");
// #region imports





// #endregion
// #region initialize
/** Whether this service has finished setting up */
let isInitialized = false;
/** Promise that resolves when this service is finished initializing */
let initializePromise;
/** Sets up the service. Only runs once and always returns the same promise after that */
const initialize = () => {
    if (initializePromise)
        return initializePromise;
    initializePromise = (async () => {
        if (isInitialized)
            return;
        // TODO: Might be best to make a singleton or something
        await _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.initialize();
        isInitialized = true;
    })();
    return initializePromise;
};
// #endregion
// #region Helpers for talking to the network about objects
/** Prefix on requests that indicates that the request is related to a network object */
const CATEGORY_NETWORK_OBJECT = 'object';
/**
 * Gets a request type for network requests for the specified network object ID and function name
 * (if provided)
 */
const getNetworkObjectRequestType = (id, functionName) => (0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_1__.serializeRequestType)(CATEGORY_NETWORK_OBJECT, `${id}${functionName ? `.${functionName}` : ''}`);
/**
 * Determine if a network object with the specified ID exists remotely (does not check locally)
 *
 * @param id ID of the network object - all processes must use this ID to look up this network
 *   object
 * @param retry Whether or not the network service should retry failed requests several times
 * @returns Empty array if there is a remote network object with this ID, undefined otherwise. TODO:
 *   return array of all eligible functions
 */
const getRemoteNetworkObjectFunctions = async (id) => {
    try {
        return await _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.request(getNetworkObjectRequestType(id));
    }
    catch (e) {
        // No processes are registered to handle this get request, meaning a network object with this ID does not exist
        // TODO: check the message and throw the error if it is not the right message?
        return undefined;
    }
};
/** This service stores both local and remote network objects together */
var NetworkObjectRegistrationType;
(function (NetworkObjectRegistrationType) {
    NetworkObjectRegistrationType["Local"] = "local";
    NetworkObjectRegistrationType["Remote"] = "remote";
})(NetworkObjectRegistrationType || (NetworkObjectRegistrationType = {}));
/** Map of ID to network object */
const networkObjectRegistrations = new Map();
/**
 * Search locally known network objects for the given ID. Don't look on the network for more
 * objects.
 *
 * @returns Whether we know of an existing network object with the provided ID already on the
 *   network
 */
const hasKnown = (id) => networkObjectRegistrations.has(id);
/**
 * Emitter for when a network object is created. Includes the list of functions exposed by the
 * network object.
 */
const onDidCreateNetworkObjectEmitter = _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.createNetworkEventEmitter((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_1__.serializeRequestType)(CATEGORY_NETWORK_OBJECT, 'onDidCreateNetworkObject'));
/**
 * Event that fires when a new object has been created on the network (locally or remotely). The
 * event contains information about the new network object.
 */
const onDidCreateNetworkObject = onDidCreateNetworkObjectEmitter.event;
/**
 * Emitter for when a network object is disposed. Provides the ID so that the local emitter specific
 * to that object can be run.
 *
 * Only run on local network object registration! Processes should only dispose their own network
 * objects
 */
const onDidDisposeNetworkObjectEmitter = _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.createNetworkEventEmitter((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_1__.serializeRequestType)(CATEGORY_NETWORK_OBJECT, 'onDidDisposeNetworkObject'));
/** Event that fires with a network object ID when that object is disposed locally or remotely */
const onDidDisposeNetworkObject = onDidDisposeNetworkObjectEmitter.event;
/** Runs to dispose of local and remote network objects when we receive events telling us to do so */
onDidDisposeNetworkObject((id) => {
    const networkObjectRegistration = networkObjectRegistrations.get(id);
    if (networkObjectRegistration) {
        // Alert users of this specific network object that it was disposed
        networkObjectRegistration.onDidDisposeEmitter.emit();
        // Dispose of the network object registration itself
        networkObjectRegistration.onDidDisposeEmitter.dispose();
        // Dispose of the proxy
        networkObjectRegistration.revokeProxy();
        // Dispose of the network object registration
        networkObjectRegistrations.delete(id);
    }
});
// #endregion
// #region Helpers for get and set
// We need this to protect simultaneous calls to get and/or set the same network objects
const getterMutexMap = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.MutexMap();
const setterMutexMap = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.MutexMap();
/** This proxy enables calling functions on a network object that exists in a different process */
const createRemoteProxy = (id, base) => Proxy.revocable(base ?? {}, {
    get: (target, key) => {
        // Block access to constructors and dispose
        if (key === 'constructor' || key === 'dispose')
            return undefined;
        // Assert type of `key` to index `target`.
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        if (key === 'then' || key in target)
            return target[key];
        // If the prop requested is a symbol, that doesn't work over the network. Reject
        if (!(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(key))
            return undefined;
        // Don't create remote proxies for events
        if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(key, 'on'))
            return undefined;
        // If the local network object doesn't have the property, build a request for it
        const requestFunction = (...args) => _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.request(getNetworkObjectRequestType(id, key), ...args);
        // Save the new request function as the actual function on the object so we don't have to
        // create this function multiple times.
        // TODO: Try making a separate array of lazy loaded request functions instead of putting them
        // on the object and thereby reducing the usefulness of revokeProxy
        // Took the indexing off of NetworkableObject so normal objects could be used,
        // but now members can't be accessed by indexing in NetworkObjectService
        // TODO: fix it so it is indexable but can have specific members
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion
        target[key] = requestFunction;
        return requestFunction;
    },
    set(obj, prop, value) {
        // If we cached a property previously, purge the cache for that property since it is changing.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion
        if (obj[prop])
            delete obj[prop];
        // Actually set the provided property
        Reflect.set(obj, prop, value);
        return true;
    },
});
/**
 * This proxy enables calling functions on a network object that exists in the same process, but is
 * owned by some other service. We only give the actual network object to the owning service.
 */
const createLocalProxy = (objectBeingSet) => Proxy.revocable(objectBeingSet, {
    get: (target, key) => {
        // Block access to constructors and dispose
        if (key === 'constructor' || key === 'dispose')
            return undefined;
        // Don't proxy events except "onDidDispose" since that's the only way for callers to
        // register functions to run when the object is going away
        if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.isString)(key) && (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(key, 'on') && key !== 'onDidDispose')
            return undefined;
        return Reflect.get(target, key, objectBeingSet);
    },
});
/** Construct details about an object that is becoming a network object */
function createNetworkObjectDetails(id, objectType, objectToShare, objectAttributes) {
    const objectFunctionNames = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.getAllObjectFunctionNames)(objectToShare, id);
    // Remove functions we don't allow to be called remotely on network objects
    objectFunctionNames.delete('constructor');
    objectFunctionNames.delete('dispose');
    objectFunctionNames.forEach((functionName) => {
        // If we come up with some better way to identify events, we can remove this and related checks
        if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.startsWith)(functionName, 'on'))
            objectFunctionNames.delete(functionName);
    });
    return {
        id,
        objectType,
        functionNames: [...objectFunctionNames].sort(),
        attributes: objectAttributes,
    };
}
/** Set an `onDidDispose` property on the object to mutate. Throw if one already exists. */
const overrideOnDidDispose = (objectId, objectToMutate, newOnDidDispose) => {
    if (objectToMutate.onDidDispose) {
        throw new Error(`You can't register "${objectId}" as a network object since it already has an onDidDispose property`);
    }
    objectToMutate.onDidDispose = newOnDidDispose;
};
/** If `dispose` already exists on `objectToMutate`, we will call it in addition to `newDispose` */
function overrideDispose(objectToMutate, newDispose) {
    if (objectToMutate.dispose) {
        const oldDispose = objectToMutate.dispose.bind(objectToMutate);
        objectToMutate.dispose = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.aggregateUnsubscriberAsyncs)([oldDispose, newDispose]);
    }
    else {
        objectToMutate.dispose = newDispose;
    }
}
// #endregion
// #region get
/**
 * Get a network object that has previously been set up to be shared on the network. A network
 * object is a proxy to an object living somewhere else that local code can use.
 *
 * Running this function twice with the same inputs yields the same network object.
 *
 * @param id ID of the network object - all processes must use this ID to look up this network
 *   object
 * @param createLocalObjectToProxy Function that creates an object that the network object proxy
 *   will be based upon. The object this function creates cannot have an `onDidDispose` property.
 *   This function is useful for setting up network events on a network object.
 * @returns A promise for the network object with specified ID if one exists, undefined otherwise
 */
const get = async (id, createLocalObjectToProxy) => {
    await initialize();
    // Don't allow simultaneous gets to run for the same network object
    const lock = getterMutexMap.get(id);
    return lock.runExclusive(async () => {
        // If we already have this network object, return it
        const networkObjectRegistration = networkObjectRegistrations.get(id);
        if (networkObjectRegistration)
            // Assert to specified generic type.
            // eslint-disable-next-line no-type-assertion/no-type-assertion
            return networkObjectRegistration.networkObject;
        // We don't already have this network object. See if it exists somewhere else.
        const networkObjectFunctions = await getRemoteNetworkObjectFunctions(id);
        if (!networkObjectFunctions)
            return undefined;
        // Before we create a remote proxy, see if there was a race condition for a local proxy.
        // It is possible we called `get`, then while awaiting the network response something else in
        // this process called `set` on the object we were looking for.
        const networkObjectRegistrationSecondChance = networkObjectRegistrations.get(id);
        if (networkObjectRegistrationSecondChance)
            // Assert to specified generic type.
            // eslint-disable-next-line no-type-assertion/no-type-assertion
            return networkObjectRegistrationSecondChance.networkObject;
        // At this point, the object exists remotely but does not yet exist locally.
        // The base object created below might need a reference to the final network object. Since the
        // network object doesn't exist yet, create an async variable now and fill it in after the
        // network object is created.
        const networkObjectVariable = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.AsyncVariable(`NetworkObject-${id}`);
        // Create the base object that will be proxied for remote calls.
        // If a property exists on the base object, we use it and won't look for it on the remote object.
        // If a property does not exist on the base object, it is assumed to exist on the remote object.
        const baseObject = createLocalObjectToProxy
            ? // Assert to specified generic type.
                // eslint-disable-next-line no-type-assertion/no-type-assertion
                createLocalObjectToProxy(id, networkObjectVariable.promise)
            : {};
        // Create a proxy with functions that will send requests to the remote object
        const remoteProxy = createRemoteProxy(id, baseObject);
        // Setup onDidDispose so that services will know when the proxy is dead
        const eventEmitter = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.PlatformEventEmitter();
        overrideOnDidDispose(id, remoteProxy.proxy, eventEmitter.event);
        // The network object is finished! Rename it so we know it is finished.
        // Assert to specified generic type.
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        const networkObject = remoteProxy.proxy;
        // Save the network object for future lookups
        networkObjectRegistrations.set(id, {
            registrationType: NetworkObjectRegistrationType.Remote,
            onDidDisposeEmitter: eventEmitter,
            networkObject,
            revokeProxy: remoteProxy.revoke,
        });
        // Resolve the promise to the network object so promise holders can complete their work
        networkObjectVariable.resolveToValue(networkObject);
        return networkObject;
    });
};
// #endregion
// #region set
/**
 * Set up an object to be shared on the network.
 *
 * @param id ID of the object to share on the network. All processes must use this ID to look it up.
 * @param objectToShare The object to set up as a network object. It will have an event named
 *   `onDidDispose` added to its properties. An error will be thrown if the object already had an
 *   `onDidDispose` property on it. If the object already contained a `dispose` function, a new
 *   `dispose` function will be set that calls the existing function (amongst other things). If the
 *   object did not already define a `dispose` function, one will be added.
 *
 *   WARNING: setting a network object mutates the provided object.
 * @returns `objectToShare` modified to be a network object
 */
const set = async (id, objectToShare, objectType = 'object', objectAttributes = undefined, objectDocumentation = {}) => {
    await initialize();
    // Don't allow simultaneous sets to run for the same network object
    const lock = setterMutexMap.get(id);
    return lock.runExclusive(async () => {
        // Check to see if we already know there is a network object with this ID.
        if (hasKnown(id))
            throw new Error(`Network object with id ${id} is already registered`);
        // Check if there is a network object with this ID remotely by trying to register it
        const unsubPromises = [
            _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.registerRequestHandler(getNetworkObjectRequestType(id), () => Promise.resolve(true), {
                method: {
                    summary: objectDocumentation.summary ?? '',
                    description: objectDocumentation.description ?? '',
                    params: [],
                    result: {
                        name: 'return value',
                        summary: 'Does the network object exist?',
                        required: true,
                        schema: {
                            type: 'boolean',
                        },
                    },
                },
                components: objectDocumentation.components,
            }),
        ];
        // Also check if we can register all of the network object's functions
        const netObjDetails = createNetworkObjectDetails(id, objectType, 
        // NetworkableObject isn't specific enough and changing it is painful
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        objectToShare, objectAttributes);
        netObjDetails.functionNames.forEach((functionName) => {
            const requestType = getNetworkObjectRequestType(id, functionName);
            const methodDocs = objectDocumentation.methods?.find((method) => method.name === functionName) ??
                (0,_shared_models_openrpc_model__WEBPACK_IMPORTED_MODULE_4__.getEmptyMethodDocs)();
            const unsub = _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.registerRequestHandler(requestType, 
            // Assert as any to allow indexing on the function name
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion
            (...args) => Promise.resolve(objectToShare[functionName](...args)), { method: methodDocs });
            unsubPromises.push(unsub);
        });
        // Await all of the registrations finishing, successful or not
        const registrationResponses = await Promise.allSettled(unsubPromises);
        const didSuccessfullyRegister = registrationResponses.every((response) => response.status === 'fulfilled');
        if (!didSuccessfullyRegister) {
            // Clean up by unregistering any successful request handlers
            const rejectedRequestHandlerReasons = [];
            await Promise.all(registrationResponses.map(async (response, registrationIndex) => {
                if (response.status === 'fulfilled')
                    // Run the unsubscriber for this registration
                    (await unsubPromises[registrationIndex])();
                // Collect the reasons for failure so we can throw a useful error
                else
                    rejectedRequestHandlerReasons.push(response.reason);
            }));
            throw new Error(`Unable to register network object with id ${id}:\n\t${rejectedRequestHandlerReasons.join('\n\t')}`);
        }
        // At this point, the network object has been registered
        // Create a proxy object that blocks functions like "dispose" for others in the same process
        const localProxy = createLocalProxy(objectToShare);
        // Setup onDidDispose so that services will know when the proxy is dead
        const onDidDisposeLocalEmitter = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.PlatformEventEmitter();
        overrideOnDidDispose(id, objectToShare, onDidDisposeLocalEmitter.event);
        // Override dispose on the object passed in to clean up the network object
        overrideDispose(objectToShare, async () => {
            // Unsubscribe all requests for this network object
            const unsubscribers = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.aggregateUnsubscriberAsyncs)(await Promise.all(unsubPromises));
            if (!(await unsubscribers())) {
                _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_3__.logger.error(`Failed to unsubscribe all requests for ${id}`);
                return false;
            }
            // Send an event notifying everyone that this network object is no longer available
            // The event listener removes the network object from the registration map
            onDidDisposeNetworkObjectEmitter.emit(id);
            return true;
        });
        // Set the network object locally
        networkObjectRegistrations.set(id, {
            registrationType: NetworkObjectRegistrationType.Local,
            onDidDisposeEmitter: onDidDisposeLocalEmitter,
            // Assert to specified generic type.
            // eslint-disable-next-line no-type-assertion/no-type-assertion
            networkObject: localProxy.proxy,
            revokeProxy: localProxy.revoke,
        });
        // Notify that the network object was successfully registered
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_3__.logger.debug(`Network object registered: ${(0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.serialize)(netObjDetails)}`);
        onDidCreateNetworkObjectEmitter.emit(netObjDetails);
        // Override objectToShare's type's force-undefined onDidDispose to DisposableNetworkObject's
        // onDidDispose type because it had an onDidDispose added in overrideOnDidDispose.
        // Assert to specified generic type.
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        return objectToShare;
    });
};
/**
 * JSDOC SOURCE networkObjectService
 *
 * Network objects are distributed objects within PAPI for TS/JS objects. @see
 * https://en.wikipedia.org/wiki/Distributed_object
 *
 * Objects registered via {@link networkObjectService.set} are retrievable using
 * {@link networkObjectService.get}.
 *
 * Function calls made on network objects retrieved via {@link networkObjectService.get} are proxied
 * and sent to the original objects registered via {@link networkObjectService.set}. All functions on
 * the registered object are proxied except for constructors, `dispose`, and functions starting with
 * `on` since those should be events (which are not intended to be proxied) based on our naming
 * convention. If you don't want a function to be proxied, don't make it a property of the
 * registered object.
 *
 * Functions on a network object will be called asynchronously by other processes regardless of
 * whether the functions are synchronous or asynchronous, so it is best to make them all
 * asynchronous. All shared functions' arguments and return values must be serializable to be called
 * across processes.
 *
 * When a service registers an object via {@link networkObjectService.set}, it is the responsibility
 * of that service, and only that service, to call `dispose` on that object when it is no longer
 * intended to be shared with other services.
 *
 * When an object is disposed by calling `dispose`, all functions registered with the `onDidDispose`
 * event handler will be called. After an object is disposed, calls to its functions will no longer
 * be proxied to the original object.
 */
const networkObjectService = {
    initialize,
    hasKnown,
    get,
    set,
    onDidCreateNetworkObject,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (networkObjectService);
// This is only intended for use on PAPI
/** JSDOC DESTINATION networkObjectService */
const minimalNetworkObjectService = {
    get,
    set,
    onDidCreateNetworkObject,
};


/***/ }),

/***/ "./src/shared/services/network.service.ts":
/*!************************************************!*\
  !*** ./src/shared/services/network.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createNetworkEventEmitter: () => (/* binding */ createNetworkEventEmitter),
/* harmony export */   createRequestFunction: () => (/* binding */ createRequestFunction),
/* harmony export */   getNetworkEvent: () => (/* binding */ getNetworkEvent),
/* harmony export */   initialize: () => (/* binding */ initialize),
/* harmony export */   papiNetworkService: () => (/* binding */ papiNetworkService),
/* harmony export */   registerRequestHandler: () => (/* binding */ registerRequestHandler),
/* harmony export */   request: () => (/* binding */ request),
/* harmony export */   setRequestTimeout: () => (/* binding */ setRequestTimeout),
/* harmony export */   shutdown: () => (/* binding */ shutdown)
/* harmony export */ });
/* harmony import */ var _shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/data/rpc.model */ "./src/shared/data/rpc.model.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");
/* harmony import */ var _shared_models_papi_network_event_emitter_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @shared/models/papi-network-event-emitter.model */ "./src/shared/models/papi-network-event-emitter.model.ts");
/* harmony import */ var _shared_services_rpc_handler_factory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shared/services/rpc-handler.factory */ "./src/shared/services/rpc-handler.factory.ts");
/* harmony import */ var _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shared/services/logger.service */ "./src/shared/services/logger.service.ts");
/**
 * Handles requests, responses, subscriptions, etc. to the backend. Likely shouldn't need/want to
 * expose this whole service on papi, but there are a few things that are exposed via
 * papiNetworkService
 */






// #region Local event handling
/**
 * Map from event type to the emitter for that type as well as if that emitter is "registered" aka
 * one reference to that emitter has been provided somewhere such that that event can be emitted
 * from that one place. NetworkEventEmitter types should not occur multiple times so extensions
 * cannot emit events they shouldn't, so we have a quick and easy no sharing in process rule in
 * createNetworkEventEmitter.
 */
// TODO: sync these between processes
const eventEmittersByEventType = new Map();
/**
 * Emits the appropriate network event on this process according to the event type
 *
 * @param eventType Type of event to handle
 * @param event The event data to emit
 */
const handleEventFromNetwork = (eventType, event) => {
    eventEmittersByEventType.get(eventType)?.emitter.emitLocal(event);
};
// #endregion
// #region Service initialization and shutdown
const connectionMutex = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.Mutex();
let jsonRpc;
async function initialize() {
    if (jsonRpc)
        return;
    await connectionMutex.runExclusive(async () => {
        if (jsonRpc)
            return;
        try {
            jsonRpc = await (0,_shared_services_rpc_handler_factory__WEBPACK_IMPORTED_MODULE_4__.createRpcHandler)();
        }
        catch (e) {
            throw new Error(`ConnectionService: Failed to create NetworkConnector object: ${e}`);
        }
        const connected = await jsonRpc.connect(handleEventFromNetwork);
        if (!connected)
            throw new Error(`Unable to connect protocol handler`);
    });
}
/** Closes the network services gracefully */
const shutdown = async () => {
    if (!jsonRpc)
        return;
    await connectionMutex.runExclusive(async () => {
        if (!jsonRpc)
            return;
        await jsonRpc.disconnect();
        await Promise.all([...eventEmittersByEventType.values()].map(async (emitter) => {
            await emitter.emitter.dispose();
        }));
        eventEmittersByEventType.clear();
        jsonRpc = undefined;
    });
};
// #endregion
// #region Request handling
// This is a hard coded default that will be replaced with a settings value after it loads
let requestTimeoutMs = 30000;
// Unfortunately we can't just call the settings service to read the timeout. That's because the
// settings service depends on the network service (indirectly). Creating a circular dependency
// between the two services would be bad. So we use a hard coded default and then let something else
// set the timeout after the network service and settings service are both initialized.
/** Set the number of seconds that network requests in this process should wait before timing out */
function setRequestTimeout(timeoutSeconds) {
    if (timeoutSeconds < 0)
        throw new Error(`Invalid request timeout ${timeoutSeconds}: must be a non-negative number`);
    requestTimeoutMs = timeoutSeconds * 1000; // convert to milliseconds
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_5__.logger.info(`[${globalThis.processType}] Request timeout set to ${requestTimeoutMs}ms`);
}
/** Inspect a value to see if we should process it as a JSONRPCResponse of some sort */
function isJsonRpcResponse(response) {
    return !!response && typeof response === 'object' && 'jsonrpc' in response;
}
/** Ensure the command name consists of two strings separated by at least one period */
function validateCommandFormatting(commandName) {
    if (!commandName)
        throw new Error(`Invalid command name ${commandName}: must be a non-empty string`);
    const periodIndex = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.indexOf)(commandName, '.');
    if (periodIndex < 0)
        throw new Error(`Invalid command name ${commandName}: must have at least one period`);
    if (periodIndex === 0)
        throw new Error(`Invalid command name ${commandName}: must have non-empty string before a period`);
    if (periodIndex >= (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.stringLength)(commandName) - 1)
        throw new Error(`Invalid command name ${commandName}: must have a non-empty string after a period`);
}
/** Check to make sure the request follows any request registration rules */
function validateRequestTypeFormatting(requestType) {
    // This request type doesn't conform to the normal format but is required by OpenRPC
    if (requestType.toString() === _shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_0__.GET_METHODS)
        return;
    const { category, directive } = (0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_2__.deserializeRequestType)(requestType);
    if (category === _shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_0__.CATEGORY_COMMAND) {
        validateCommandFormatting(directive);
    }
}
/**
 * Send a request on the network and resolve the response contents.
 *
 * @param requestType The type of request
 * @param args Arguments to send in the request (put in request.contents)
 * @returns Promise that resolves with the response message
 */
const request = async (requestType, ...args) => {
    validateRequestTypeFormatting(requestType);
    await initialize();
    if (!jsonRpc)
        throw new Error('RPC handler not set');
    let timeoutOccurred = false;
    let response;
    // If the request takes longer than the configured timeout, throw an error
    if (requestTimeoutMs > 0) {
        await Promise.race([
            (async () => {
                try {
                    response = (0,_shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_0__.fixupResponse)(await jsonRpc.request(requestType, args));
                }
                catch (e) {
                    response = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.newPlatformError)(e);
                }
            })(),
            new Promise((resolve) => {
                setTimeout(() => {
                    timeoutOccurred = true;
                    resolve();
                }, requestTimeoutMs);
            }),
        ]);
    }
    // There is no timeout so we can run the request normally
    else {
        try {
            response = (0,_shared_data_rpc_model__WEBPACK_IMPORTED_MODULE_0__.fixupResponse)(await jsonRpc.request(requestType, args));
        }
        catch (e) {
            response = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.newPlatformError)(e);
        }
    }
    if (isJsonRpcResponse(response)) {
        if (!response.error)
            return response.result;
        response = `JSON-RPC Request error (${response.error.code}): ${response.error.message}`;
    }
    else if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.isPlatformError)(response)) {
        _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_5__.logger.debug(response.message);
        throw response;
    }
    else {
        response = timeoutOccurred
            ? `JSON-RPC Request timed out: ${requestType} ${JSON.stringify(args)}`
            : `Invalid JSON-RPC Response: ${JSON.stringify(response)}`;
    }
    _shared_services_logger_service__WEBPACK_IMPORTED_MODULE_5__.logger.debug(response);
    throw (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.newPlatformError)(response);
};
/**
 * Register a local request handler to run on requests.
 *
 * @param requestType The type of request on which to register the handler
 * @param handler Function to register to run on requests
 * @returns Promise that resolves if the request successfully registered and unsubscriber function
 *   to run to stop the passed-in function from handling requests
 */
async function registerRequestHandler(requestType, requestHandler, requestDocs) {
    await initialize();
    if (!jsonRpc)
        throw new Error('RPC handler not set');
    const success = await jsonRpc.registerMethod(requestType, requestHandler, requestDocs);
    if (!success)
        throw new Error(`Could not register request handler for ${requestType}`);
    return async () => {
        if (!jsonRpc)
            return false;
        return jsonRpc.unregisterMethod(requestType);
    };
}
/**
 * Creates a function that is a request function with a baked requestType. This is also nice because
 * you get TypeScript type support using this function.
 *
 * @param requestType RequestType for request function
 * @returns Function to call with arguments of request that performs the request and resolves with
 *   the response contents
 */
const createRequestFunction = (requestType) => {
    return async (...args) => request(requestType, ...args);
};
// #endregion
// #region Event handling
/**
 * Sends an event to other connections. Does NOT run the local event subscriptions as they should be
 * run by NetworkEventEmitter after sending on network.
 *
 * @param eventType Unique network event type for coordinating between connections
 * @param event Event to emit on the network
 */
const emitEventOnNetwork = async (eventType, event) => {
    await initialize();
    if (!jsonRpc)
        throw new Error('RPC handler not set');
    jsonRpc.emitEventOnNetwork(eventType, event);
};
const createNetworkEventEmitterInternal = (eventType, registerEmitter) => {
    let emitterRecord = eventEmittersByEventType.get(eventType);
    if (!emitterRecord) {
        emitterRecord = {
            // Match the collection type
            // eslint-disable-next-line no-type-assertion/no-type-assertion
            emitter: new _shared_models_papi_network_event_emitter_model__WEBPACK_IMPORTED_MODULE_3__.PapiNetworkEventEmitter((event) => emitEventOnNetwork(eventType, event), () => eventEmittersByEventType.delete(eventType)),
            isRegistered: false,
        };
        eventEmittersByEventType.set(eventType, emitterRecord);
    }
    if (registerEmitter) {
        if (emitterRecord.isRegistered)
            throw new Error(`type ${eventType} is already registered to a network event emitter`);
        emitterRecord.isRegistered = true;
    }
    // Assert as emitter with an unknown type
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    return emitterRecord.emitter;
};
/**
 * Creates an event emitter that works properly over the network. Other connections receive this
 * event when it is emitted.
 *
 * WARNING: You can only create a network event emitter once per eventType to prevent hijacked event
 * emitters.
 *
 * @param eventType Unique network event type for coordinating between connections
 * @returns Event emitter whose event works between connections
 */
const createNetworkEventEmitter = (eventType) => createNetworkEventEmitterInternal(eventType, true);
/**
 * Gets the network event with the specified type. Creates the emitter if it does not exist
 *
 * @param eventType Unique network event type for coordinating between connections
 * @returns Event for the event type that runs the callback provided when the event is emitted
 */
const getNetworkEvent = (eventType) => {
    // Return event with the generic type.
    // eslint-disable-next-line no-type-assertion/no-type-assertion
    return createNetworkEventEmitterInternal(eventType, false).event;
};
/**
 * JSDOC SOURCE papiNetworkService
 *
 * Service that provides a way to send and receive network events
 */
const papiNetworkService = {
    createNetworkEventEmitter,
    getNetworkEvent,
};


/***/ }),

/***/ "./src/shared/services/notification.service.ts":
/*!*****************************************************!*\
  !*** ./src/shared/services/notification.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   notificationService: () => (/* binding */ notificationService)
/* harmony export */ });
/* harmony import */ var _shared_models_notification_service_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/models/notification.service-model */ "./src/shared/models/notification.service-model.ts");
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");



let networkObject;
let initializationPromise;
async function initialize() {
    if (!initializationPromise) {
        initializationPromise = new Promise((resolve, reject) => {
            const executor = async () => {
                try {
                    const localNotificationService = await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_1__.networkObjectService.get(_shared_models_notification_service_model__WEBPACK_IMPORTED_MODULE_0__.NotificationServiceNetworkObjectName);
                    if (!localNotificationService)
                        throw new Error(`${_shared_models_notification_service_model__WEBPACK_IMPORTED_MODULE_0__.NotificationServiceNetworkObjectName} is not available as a network object`);
                    networkObject = localNotificationService;
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            };
            executor();
        });
    }
    return initializationPromise;
}
/**
 * JSDOC SOURCE notificationService
 *
 * Service that sends notifications to users in the UI
 */
const notificationService = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_2__.createSyncProxyForAsyncObject)(async () => {
    await initialize();
    return networkObject;
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (notificationService);


/***/ }),

/***/ "./src/shared/services/project-data-provider.service.ts":
/*!**************************************************************!*\
  !*** ./src/shared/services/project-data-provider.service.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   get: () => (/* binding */ get),
/* harmony export */   papiBackendProjectDataProviderService: () => (/* binding */ papiBackendProjectDataProviderService),
/* harmony export */   papiFrontendProjectDataProviderService: () => (/* binding */ papiFrontendProjectDataProviderService),
/* harmony export */   registerProjectDataProviderEngineFactory: () => (/* binding */ registerProjectDataProviderEngineFactory)
/* harmony export */ });
/* harmony import */ var _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/network-object.service */ "./src/shared/services/network-object.service.ts");
/* harmony import */ var _shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/services/data-provider.service */ "./src/shared/services/data-provider.service.ts");
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_models_project_data_provider_factory_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @shared/models/project-data-provider-factory.interface */ "./src/shared/models/project-data-provider-factory.interface.ts");
/* harmony import */ var _shared_services_project_lookup_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @shared/services/project-lookup.service */ "./src/shared/services/project-lookup.service.ts");
/* harmony import */ var _shared_models_project_data_provider_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @shared/models/project-data-provider.model */ "./src/shared/models/project-data-provider.model.ts");
/* harmony import */ var _shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @shared/models/project-lookup.service-model */ "./src/shared/models/project-lookup.service-model.ts");








/**
 * Class that creates Project Data Providers of a specific set of `projectInterface`s. Layers over
 * extension-provided {@link IProjectDataProviderEngineFactory}. Internal only
 */
class ProjectDataProviderFactory {
    pdpIdsMutexMap = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.MutexMap();
    pdpIds = new Map();
    pdpFactoryId;
    projectInterfaces;
    pdpCleanupList;
    pdpEngineFactory;
    /**
     * Create a new PDP factory that is used to create PDPs
     *
     * @param projectInterfaces All the `projectInterface`s this PDP factory's PDPs can support
     * @param pdpEngineFactory Object that can create the engines for PDPs
     */
    constructor(pdpFactoryId, projectInterfaces, pdpEngineFactory) {
        this.pdpFactoryId = pdpFactoryId;
        this.projectInterfaces = projectInterfaces;
        this.pdpCleanupList = new platform_bible_utils__WEBPACK_IMPORTED_MODULE_3__.UnsubscriberAsyncList(`PDP Factory for ${projectInterfaces}`);
        this.pdpEngineFactory = pdpEngineFactory;
    }
    getAvailableProjects(layeringFilters) {
        return this.pdpEngineFactory.getAvailableProjects(layeringFilters);
    }
    /** Disposes of all PDPs that were created by this PDP Factory */
    async dispose() {
        this.pdpIds.clear();
        return this.pdpCleanupList.runAllUnsubscribers();
    }
    /** Returns the registered network object name of a PDP for the given project ID */
    async getProjectDataProviderId(projectId) {
        const key = projectId;
        // Don't allow simultaneous gets to run for the same project data provider id as an easy way to
        // make sure we don't create multiple of the same PDP
        const lock = this.pdpIdsMutexMap.get(key);
        return lock.runExclusive(async () => {
            let pdpId = this.pdpIds.get(key);
            if (!pdpId) {
                pdpId = await this.registerProjectDataProvider(await this.pdpEngineFactory.createProjectDataProviderEngine(projectId), projectId);
                if (!pdpId)
                    throw new Error(`Could not register project data provider for ${projectId}`);
                this.pdpIds.set(key, pdpId);
            }
            return pdpId;
        });
    }
    /** Convert the PDP engine into a PDP using the data provider service */
    async registerProjectDataProvider(projectDataProviderEngine, projectId) {
        // Check to make sure new Base PDPs fulfill the requirements of the `platform.base` `projectInterface`
        if (this.projectInterfaces.includes(_shared_models_project_data_provider_model__WEBPACK_IMPORTED_MODULE_6__.PROJECT_INTERFACE_PLATFORM_BASE) &&
            (!('getExtensionData' in projectDataProviderEngine) ||
                !('getSetting' in projectDataProviderEngine)))
            throw new Error(`\`BaseProjectDataProviderEngine\` with project id ${projectId} created by PDP Factory with id ${this.pdpFactoryId} must implement \`${_shared_models_project_data_provider_model__WEBPACK_IMPORTED_MODULE_6__.PROJECT_INTERFACE_PLATFORM_BASE}\` \`projectInterface\`. See \`IBaseProjectDataProvider\` for more information`);
        // ENHANCEMENT: Re-add a check for new PDPs to make sure there is some PDP somewhere that
        // fulfills `platform.base`
        const pdpId = `${(0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_2__.newNonce)()}-pdp`;
        const pdp = await (0,_shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_1__.registerEngineByType)(pdpId, projectDataProviderEngine, 'pdp', {
            projectId,
            projectInterfaces: this.projectInterfaces,
        });
        this.pdpCleanupList.add(pdp);
        return pdpId;
    }
}
/**
 * Add a new Project Data Provider Factory to PAPI that uses the given engine.
 *
 * @param pdpFactoryId Unique id for this PDP factory
 * @param projectInterfaces The standardized sets of methods (`projectInterface`s) supported by the
 *   Project Data Provider Engines produced by this factory. Indicates what sort of project data
 *   should be available on the PDPEs created by this factory.
 * @param pdpEngineFactory Used in a ProjectDataProviderFactory to create ProjectDataProviders
 * @returns Promise that resolves to a disposable object when the registration operation completes
 */
async function registerProjectDataProviderEngineFactory(pdpFactoryId, projectInterfaces, pdpEngineFactory) {
    const factoryNetworkObjectId = (0,_shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_7__.getPDPFactoryNetworkObjectNameFromId)(pdpFactoryId);
    const factory = new ProjectDataProviderFactory(pdpFactoryId, projectInterfaces, pdpEngineFactory);
    return _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_0__.networkObjectService.set(factoryNetworkObjectId, factory, _shared_models_project_data_provider_factory_interface__WEBPACK_IMPORTED_MODULE_4__.PDP_FACTORY_OBJECT_TYPE, { projectInterfaces });
}
/**
 * Get a Project Data Provider for the given project ID.
 *
 * @example
 *
 * ```typescript
 * const pdp = await get('platformScripture.USFM_Verse', 'ProjectID12345');
 * pdp.getVerseUSFM({ book: 'JHN', chapterNum: 1, verseNum: 1 });
 * ```
 *
 * @param projectInterface `projectInterface` that the project to load must support. The TypeScript
 *   type for the returned project data provider will have the project data provider interface type
 *   associated with this `projectInterface`. If the project does not implement this
 *   `projectInterface` (according to its metadata), an error will be thrown.
 * @param projectId ID for the project to load
 * @param pdpFactoryId Optional ID of the PDP factory from which to get the project data provider if
 *   the PDP factory supports this project id and project interface. If not provided, then look in
 *   all available PDP factories for the given project ID.
 * @returns Project data provider with types that are associated with the given `projectInterface`
 * @throws If did not find a project data provider for the project id that supports the requested
 *   `projectInterface` (and from the requested PDP factory if specified)
 */
async function get(projectInterface, projectId, pdpFactoryId) {
    const metadata = await _shared_services_project_lookup_service__WEBPACK_IMPORTED_MODULE_5__.projectLookupService.getMetadataForProject(projectId, projectInterface, pdpFactoryId);
    const minimalMatchPdpFactoryId = _shared_services_project_lookup_service__WEBPACK_IMPORTED_MODULE_5__.projectLookupService.getMinimalMatchPdpFactoryId(metadata, projectInterface);
    if (!minimalMatchPdpFactoryId)
        throw new Error(`pdpService.get(${projectInterface}, ${projectId}, ${pdpFactoryId}): Somehow there was a project with the id and provided projectInterface, but could not find a PDPF that provided the projectInterface. This should not happen.`);
    const pdpFactory = await _shared_services_network_object_service__WEBPACK_IMPORTED_MODULE_0__.networkObjectService.get((0,_shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_7__.getPDPFactoryNetworkObjectNameFromId)(minimalMatchPdpFactoryId));
    if (!pdpFactory)
        throw new Error(`pdpService.get(${projectInterface}, ${projectId}, ${pdpFactoryId}): Cannot get project data providers with projectInterface ${projectInterface}: Could not get pdpf with id ${minimalMatchPdpFactoryId}`);
    const pdpId = await pdpFactory.getProjectDataProviderId(projectId);
    const pdp = await (0,_shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_1__.getByType)(pdpId);
    if (!pdp)
        throw new Error(`pdpService.get(${projectInterface}, ${projectId}, ${pdpFactoryId}): Cannot get project data provider for project ID ${projectId}`);
    return pdp;
}
/**
 * JSDOC SOURCE papiBackendProjectDataProviderService
 *
 * Service that registers and gets project data providers
 */
const papiBackendProjectDataProviderService = {
    registerProjectDataProviderEngineFactory,
    get,
};
/**
 * JSDOC SOURCE papiFrontendProjectDataProviderService
 *
 * Service that gets project data providers
 */
const papiFrontendProjectDataProviderService = {
    get,
};


/***/ }),

/***/ "./src/shared/services/project-lookup.service.ts":
/*!*******************************************************!*\
  !*** ./src/shared/services/project-lookup.service.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   projectLookupService: () => (/* binding */ projectLookupService)
/* harmony export */ });
/* harmony import */ var _shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/models/project-lookup.service-model */ "./src/shared/models/project-lookup.service-model.ts");

const projectLookupService = _shared_models_project_lookup_service_model__WEBPACK_IMPORTED_MODULE_0__.projectLookupServiceBase;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (projectLookupService);


/***/ }),

/***/ "./src/shared/services/rpc-handler.factory.ts":
/*!****************************************************!*\
  !*** ./src/shared/services/rpc-handler.factory.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createRpcHandler: () => (/* binding */ createRpcHandler)
/* harmony export */ });
/* harmony import */ var _shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/utils/internal-util */ "./src/shared/utils/internal-util.ts");

/** Creates a server or client RPC handler depending on if we're in main or some other process */
const createRpcHandler = async () => {
    if ((0,_shared_utils_internal_util__WEBPACK_IMPORTED_MODULE_0__.isClient)()) {
        const RpcClient = (await Promise.resolve().then(function webpackMissingModule() { var e = new Error("Cannot find module '@client/services/rpc-client'"); e.code = 'MODULE_NOT_FOUND'; throw e; })).default;
        return new RpcClient();
    }
    const RpcWebSocketListener = (await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_ws_wrapper_mjs"), __webpack_require__.e("src_main_services_rpc-websocket-listener_ts")]).then(__webpack_require__.bind(__webpack_require__, /*! @main/services/rpc-websocket-listener */ "./src/main/services/rpc-websocket-listener.ts"))).default;
    return new RpcWebSocketListener();
};


/***/ }),

/***/ "./src/shared/services/settings.service-model.ts":
/*!*******************************************************!*\
  !*** ./src/shared/services/settings.service-model.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CATEGORY_EXTENSION_SETTING_VALIDATOR: () => (/* binding */ CATEGORY_EXTENSION_SETTING_VALIDATOR),
/* harmony export */   settingsServiceDataProviderName: () => (/* binding */ settingsServiceDataProviderName),
/* harmony export */   settingsServiceObjectToProxy: () => (/* binding */ settingsServiceObjectToProxy)
/* harmony export */ });
/* harmony import */ var _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/network.service */ "./src/shared/services/network.service.ts");
/* harmony import */ var _shared_utils_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shared/utils/util */ "./src/shared/utils/util.ts");


/** Name prefix for registered commands that call settings validators */
const CATEGORY_EXTENSION_SETTING_VALIDATOR = 'extensionSettingValidator';
/** JSDOC DESTINATION settingsServiceDataProviderName */
const settingsServiceDataProviderName = 'platform.settingsServiceDataProvider';
const settingsServiceObjectToProxy = Object.freeze({
    /**
     * JSDOC SOURCE settingsServiceDataProviderName
     *
     * This name is used to register the settings service data provider on the papi. You can use this
     * name to find the data provider when accessing it using the useData hook
     */
    dataProviderName: settingsServiceDataProviderName,
    /**
     * JSDOC SOURCE settingsServiceRegisterValidator
     *
     * Registers a function that validates whether a new setting value is allowed to be set.
     *
     * @param key The string id of the setting to validate
     * @param validator Function to call to validate the new setting value
     * @returns Unsubscriber that should be called whenever the providing extension is deactivated
     */
    registerValidator: async (key, validator) => {
        return _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.registerRequestHandler((0,_shared_utils_util__WEBPACK_IMPORTED_MODULE_1__.serializeRequestType)(CATEGORY_EXTENSION_SETTING_VALIDATOR, key), validator, {
            method: {
                summary: `Validate whether a given value is allowed for setting "${key}"`,
                params: [
                    {
                        name: 'newValue',
                        required: true,
                        summary: 'The new value to validate',
                        schema: {
                            oneOf: [
                                { type: 'object' },
                                { type: 'string' },
                                { type: 'number' },
                                { type: 'boolean' },
                                { type: 'array' },
                            ],
                        },
                    },
                    {
                        name: 'currentValue',
                        required: true,
                        summary: 'The current value of the setting',
                        schema: {
                            oneOf: [
                                { type: 'object' },
                                { type: 'string' },
                                { type: 'number' },
                                { type: 'boolean' },
                                { type: 'array' },
                            ],
                        },
                    },
                    {
                        name: 'allChanges',
                        required: true,
                        summary: 'All changes to the settings',
                        schema: {
                            oneOf: [
                                { type: 'object' },
                                { type: 'string' },
                                { type: 'number' },
                                { type: 'boolean' },
                                { type: 'array' },
                            ],
                        },
                    },
                ],
                result: {
                    name: 'return value',
                    summary: 'Whether the new setting value is valid',
                    schema: { type: 'boolean' },
                },
            },
        });
    },
});


/***/ }),

/***/ "./src/shared/services/settings.service.ts":
/*!*************************************************!*\
  !*** ./src/shared/services/settings.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   settingsService: () => (/* binding */ settingsService)
/* harmony export */ });
/* harmony import */ var _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/services/network.service */ "./src/shared/services/network.service.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");
/* harmony import */ var _shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @shared/services/data-provider.service */ "./src/shared/services/data-provider.service.ts");
/* harmony import */ var _settings_service_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./settings.service-model */ "./src/shared/services/settings.service-model.ts");




let dataProvider;
let initializationPromise;
async function initialize() {
    if (!initializationPromise) {
        initializationPromise = new Promise((resolve, reject) => {
            const executor = async () => {
                try {
                    const provider = await _shared_services_data_provider_service__WEBPACK_IMPORTED_MODULE_2__.dataProviderService.get(_settings_service_model__WEBPACK_IMPORTED_MODULE_3__.settingsServiceDataProviderName);
                    if (!provider)
                        throw new Error('Settings service undefined');
                    dataProvider = provider;
                    // Inject the network timeout into every JS process once the settings service is available
                    // We can't pull from within the network service as it would create a dependency loop
                    dataProvider.subscribe('platform.requestTimeout', (newTimeout) => _shared_services_network_service__WEBPACK_IMPORTED_MODULE_0__.setRequestTimeout(newTimeout));
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
            };
            executor();
        });
    }
    return initializationPromise;
}
const settingsService = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.createSyncProxyForAsyncObject)(async () => {
    await initialize();
    return dataProvider;
}, _settings_service_model__WEBPACK_IMPORTED_MODULE_3__.settingsServiceObjectToProxy);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (settingsService);


/***/ }),

/***/ "./src/shared/utils/internal-util.ts":
/*!*******************************************!*\
  !*** ./src/shared/utils/internal-util.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getProcessType: () => (/* binding */ getProcessType),
/* harmony export */   isClient: () => (/* binding */ isClient),
/* harmony export */   isExtensionHost: () => (/* binding */ isExtensionHost),
/* harmony export */   isRenderer: () => (/* binding */ isRenderer),
/* harmony export */   isServer: () => (/* binding */ isServer)
/* harmony export */ });
/* harmony import */ var _shared_global_this_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/global-this.model */ "./src/shared/global-this.model.ts");
/** Utility functions specific to the internal technologies we are using. */

/**
 * Determine if running on a client process (renderer, extension-host) or on the server.
 *
 * @returns Returns true if running on a client, false otherwise
 */
const isClient = () => globalThis.processType !== _shared_global_this_model__WEBPACK_IMPORTED_MODULE_0__.ProcessType.Main;
/**
 * Determine if running on the server process (main)
 *
 * @returns Returns true if running on the server, false otherwise
 */
const isServer = () => !isClient();
/**
 * Determine if running on the renderer process
 *
 * @returns Returns true if running on the renderer, false otherwise
 */
const isRenderer = () => globalThis.processType === _shared_global_this_model__WEBPACK_IMPORTED_MODULE_0__.ProcessType.Renderer;
/**
 * Determine if running on the extension host
 *
 * @returns Returns true if running on the extension host, false otherwise
 */
const isExtensionHost = () => globalThis.processType === _shared_global_this_model__WEBPACK_IMPORTED_MODULE_0__.ProcessType.ExtensionHost;
/**
 * Gets which kind of process this is (main, renderer, extension-host)
 *
 * @returns ProcessType for this process
 */
const getProcessType = () => globalThis.processType;


/***/ }),

/***/ "./src/shared/utils/util.ts":
/*!**********************************!*\
  !*** ./src/shared/utils/util.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MODULE_SIMILAR_APIS: () => (/* binding */ MODULE_SIMILAR_APIS),
/* harmony export */   bindClassMethods: () => (/* binding */ bindClassMethods),
/* harmony export */   deserializeRequestType: () => (/* binding */ deserializeRequestType),
/* harmony export */   getModuleSimilarApiMessage: () => (/* binding */ getModuleSimilarApiMessage),
/* harmony export */   newNonce: () => (/* binding */ newNonce),
/* harmony export */   serializeRequestType: () => (/* binding */ serializeRequestType)
/* harmony export */ });
/* harmony import */ var _shared_global_this_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shared/global-this.model */ "./src/shared/global-this.model.ts");
/* harmony import */ var platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! platform-bible-utils */ "./lib/platform-bible-utils/dist/index.js");


const NONCE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
const NONCE_CHARS_LENGTH = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.stringLength)(NONCE_CHARS);
/**
 * Create a nonce that is at least 128 bits long and should be (is not currently) cryptographically
 * random. See nonce spec at https://w3c.github.io/webappsec-csp/#security-nonces
 *
 * WARNING: THIS IS NOT CURRENTLY CRYPTOGRAPHICALLY SECURE! TODO: Make this cryptographically
 * random! Use some polymorphic library that works in all contexts?
 * https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues only works in browser
 */
function newNonce() {
    let nonce = '';
    for (let i = 0; i < 32; i++)
        nonce += (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.charAt)(NONCE_CHARS, Math.floor(Math.random() * NONCE_CHARS_LENGTH));
    return nonce;
}
// #region Module loading
/**
 * Modules that someone might try to require in their extensions that we have similar apis for. When
 * an extension requires these modules, an error throws that lets them know about our similar api.
 */
const MODULE_SIMILAR_APIS = Object.freeze({
    http: 'fetch',
    https: 'fetch',
    fs: {
        [_shared_global_this_model__WEBPACK_IMPORTED_MODULE_0__.ProcessType.Renderer]: 'the papi-extension: protocol',
        [_shared_global_this_model__WEBPACK_IMPORTED_MODULE_0__.ProcessType.ExtensionHost]: 'papi.storage',
    },
    child_process: 'createProcess (requires requesting in elevatedPrivileges)',
});
/**
 * Get a message that says the module import was rejected and to try a similar api if available.
 *
 * @param moduleName Name of `require`d module that was rejected
 * @returns String that says the import was rejected and a similar api to try
 */
function getModuleSimilarApiMessage(moduleName) {
    const similarApi = MODULE_SIMILAR_APIS[moduleName] || MODULE_SIMILAR_APIS[`node:${moduleName}`];
    let similarApiName;
    if (similarApi)
        if ((0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.isString)(similarApi)) {
            similarApiName = similarApi;
        }
        else {
            similarApiName = similarApi[globalThis.processType] || similarApi.default;
        }
    return `Rejected require('${moduleName}'). Try${similarApiName ? ` using ${similarApiName} or` : ''} bundling the module into your code with a build tool like webpack`;
}
// #endregion
// #region Serialization and deserialization functions
/** Separator between parts of a serialized request */
const REQUEST_TYPE_SEPARATOR = ':';
/**
 * Create a request message requestType string from a category and a directive
 *
 * @param category The general category of request
 * @param directive Specific identifier for this type of request
 * @returns Full requestType for use in network calls
 */
function serializeRequestType(category, directive) {
    if (!category)
        throw new Error('serializeRequestType: "category" is not defined or empty.');
    if (!directive)
        throw new Error('serializeRequestType: "directive" is not defined or empty.');
    return `${category}${REQUEST_TYPE_SEPARATOR}${directive}`;
}
/** Split a request message requestType string into its parts */
function deserializeRequestType(requestType) {
    if (!requestType)
        throw new Error('deserializeRequestType: must be a non-empty string');
    const colonIndex = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.indexOf)(requestType, REQUEST_TYPE_SEPARATOR);
    if (colonIndex <= 0 || colonIndex >= (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.stringLength)(requestType) - 1)
        throw new Error(`deserializeRequestType: Must have two parts divided by a ${REQUEST_TYPE_SEPARATOR} (${requestType})`);
    const category = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.substring)(requestType, 0, colonIndex);
    const directive = (0,platform_bible_utils__WEBPACK_IMPORTED_MODULE_1__.substring)(requestType, colonIndex + 1);
    return { category, directive };
}
// #endregion
/**
 * Allow an object to bind all its class-defined functions to itself to ensure all references to
 * "this" in its functions refer to the object rather than the caller of the function. For example,
 * if a function on the class is provided to a callback, if "this" isn't bound to the object then
 * "this" will refer to the entity running the callback.
 */
function bindClassMethods() {
    const methods = Object.getOwnPropertyNames(Object.getPrototypeOf(this));
    methods.forEach((method) => {
        // Allow indexing to work for this object
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-type-assertion/no-type-assertion
        const thisAsAny = this;
        if (typeof thisAsAny[method] === 'function') {
            thisAsAny[method] = thisAsAny[method].bind(this);
        }
    });
}


/***/ }),

/***/ "./node_modules/write-file-atomic/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/write-file-atomic/lib/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = writeFile
module.exports.sync = writeFileSync
module.exports._getTmpname = getTmpname // for testing
module.exports._cleanupOnExit = cleanupOnExit

const fs = __webpack_require__(/*! fs */ "fs")
const MurmurHash3 = __webpack_require__(/*! imurmurhash */ "./node_modules/imurmurhash/imurmurhash.js")
const { onExit } = __webpack_require__(/*! signal-exit */ "./node_modules/write-file-atomic/node_modules/signal-exit/dist/cjs/index.js")
const path = __webpack_require__(/*! path */ "path")
const { promisify } = __webpack_require__(/*! util */ "util")
const activeFiles = {}

// if we run inside of a worker_thread, `process.pid` is not unique
/* istanbul ignore next */
const threadId = (function getId () {
  try {
    const workerThreads = __webpack_require__(/*! worker_threads */ "worker_threads")

    /// if we are in main thread, this is set to `0`
    return workerThreads.threadId
  } catch (e) {
    // worker_threads are not available, fallback to 0
    return 0
  }
})()

let invocations = 0
function getTmpname (filename) {
  return filename + '.' +
    MurmurHash3(__filename)
      .hash(String(process.pid))
      .hash(String(threadId))
      .hash(String(++invocations))
      .result()
}

function cleanupOnExit (tmpfile) {
  return () => {
    try {
      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile)
    } catch {
      // ignore errors
    }
  }
}

function serializeActiveFile (absoluteName) {
  return new Promise(resolve => {
    // make a queue if it doesn't already exist
    if (!activeFiles[absoluteName]) {
      activeFiles[absoluteName] = []
    }

    activeFiles[absoluteName].push(resolve) // add this job to the queue
    if (activeFiles[absoluteName].length === 1) {
      resolve()
    } // kick off the first one
  })
}

// https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342
function isChownErrOk (err) {
  if (err.code === 'ENOSYS') {
    return true
  }

  const nonroot = !process.getuid || process.getuid() !== 0
  if (nonroot) {
    if (err.code === 'EINVAL' || err.code === 'EPERM') {
      return true
    }
  }

  return false
}

async function writeFileAsync (filename, data, options = {}) {
  if (typeof options === 'string') {
    options = { encoding: options }
  }

  let fd
  let tmpfile
  /* istanbul ignore next -- The closure only gets called when onExit triggers */
  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile))
  const absoluteName = path.resolve(filename)

  try {
    await serializeActiveFile(absoluteName)
    const truename = await promisify(fs.realpath)(filename).catch(() => filename)
    tmpfile = getTmpname(truename)

    if (!options.mode || !options.chown) {
      // Either mode or chown is not explicitly set
      // Default behavior is to copy it from original file
      const stats = await promisify(fs.stat)(truename).catch(() => {})
      if (stats) {
        if (options.mode == null) {
          options.mode = stats.mode
        }

        if (options.chown == null && process.getuid) {
          options.chown = { uid: stats.uid, gid: stats.gid }
        }
      }
    }

    fd = await promisify(fs.open)(tmpfile, 'w', options.mode)
    if (options.tmpfileCreated) {
      await options.tmpfileCreated(tmpfile)
    }
    if (ArrayBuffer.isView(data)) {
      await promisify(fs.write)(fd, data, 0, data.length, 0)
    } else if (data != null) {
      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'))
    }

    if (options.fsync !== false) {
      await promisify(fs.fsync)(fd)
    }

    await promisify(fs.close)(fd)
    fd = null

    if (options.chown) {
      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(err => {
        if (!isChownErrOk(err)) {
          throw err
        }
      })
    }

    if (options.mode) {
      await promisify(fs.chmod)(tmpfile, options.mode).catch(err => {
        if (!isChownErrOk(err)) {
          throw err
        }
      })
    }

    await promisify(fs.rename)(tmpfile, truename)
  } finally {
    if (fd) {
      await promisify(fs.close)(fd).catch(
        /* istanbul ignore next */
        () => {}
      )
    }
    removeOnExitHandler()
    await promisify(fs.unlink)(tmpfile).catch(() => {})
    activeFiles[absoluteName].shift() // remove the element added by serializeSameFile
    if (activeFiles[absoluteName].length > 0) {
      activeFiles[absoluteName][0]() // start next job if one is pending
    } else {
      delete activeFiles[absoluteName]
    }
  }
}

async function writeFile (filename, data, options, callback) {
  if (options instanceof Function) {
    callback = options
    options = {}
  }

  const promise = writeFileAsync(filename, data, options)
  if (callback) {
    try {
      const result = await promise
      return callback(result)
    } catch (err) {
      return callback(err)
    }
  }

  return promise
}

function writeFileSync (filename, data, options) {
  if (typeof options === 'string') {
    options = { encoding: options }
  } else if (!options) {
    options = {}
  }
  try {
    filename = fs.realpathSync(filename)
  } catch (ex) {
    // it's ok, it'll happen on a not yet existing file
  }
  const tmpfile = getTmpname(filename)

  if (!options.mode || !options.chown) {
    // Either mode or chown is not explicitly set
    // Default behavior is to copy it from original file
    try {
      const stats = fs.statSync(filename)
      options = Object.assign({}, options)
      if (!options.mode) {
        options.mode = stats.mode
      }
      if (!options.chown && process.getuid) {
        options.chown = { uid: stats.uid, gid: stats.gid }
      }
    } catch (ex) {
      // ignore stat errors
    }
  }

  let fd
  const cleanup = cleanupOnExit(tmpfile)
  const removeOnExitHandler = onExit(cleanup)

  let threw = true
  try {
    fd = fs.openSync(tmpfile, 'w', options.mode || 0o666)
    if (options.tmpfileCreated) {
      options.tmpfileCreated(tmpfile)
    }
    if (ArrayBuffer.isView(data)) {
      fs.writeSync(fd, data, 0, data.length, 0)
    } else if (data != null) {
      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))
    }
    if (options.fsync !== false) {
      fs.fsyncSync(fd)
    }

    fs.closeSync(fd)
    fd = null

    if (options.chown) {
      try {
        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)
      } catch (err) {
        if (!isChownErrOk(err)) {
          throw err
        }
      }
    }

    if (options.mode) {
      try {
        fs.chmodSync(tmpfile, options.mode)
      } catch (err) {
        if (!isChownErrOk(err)) {
          throw err
        }
      }
    }

    fs.renameSync(tmpfile, filename)
    threw = false
  } finally {
    if (fd) {
      try {
        fs.closeSync(fd)
      } catch (ex) {
        // ignore close errors at this stage, error may have closed fd already.
      }
    }
    removeOnExitHandler()
    if (threw) {
      cleanup()
    }
  }
}


/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("constants");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("electron");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "vm":
/*!*********************!*\
  !*** external "vm" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("vm");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "./node_modules/write-file-atomic/node_modules/signal-exit/dist/cjs/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/write-file-atomic/node_modules/signal-exit/dist/cjs/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unload = exports.load = exports.onExit = exports.signals = void 0;
// Note: since nyc uses this module to output coverage, any lines
// that are in the direct sync flow of nyc's outputCoverage are
// ignored, since we can never get coverage for them.
// grab a reference to node's real process object right away
const signals_js_1 = __webpack_require__(/*! ./signals.js */ "./node_modules/write-file-atomic/node_modules/signal-exit/dist/cjs/signals.js");
Object.defineProperty(exports, "signals", ({ enumerable: true, get: function () { return signals_js_1.signals; } }));
const processOk = (process) => !!process &&
    typeof process === 'object' &&
    typeof process.removeListener === 'function' &&
    typeof process.emit === 'function' &&
    typeof process.reallyExit === 'function' &&
    typeof process.listeners === 'function' &&
    typeof process.kill === 'function' &&
    typeof process.pid === 'number' &&
    typeof process.on === 'function';
const kExitEmitter = Symbol.for('signal-exit emitter');
const global = globalThis;
const ObjectDefineProperty = Object.defineProperty.bind(Object);
// teeny special purpose ee
class Emitter {
    emitted = {
        afterExit: false,
        exit: false,
    };
    listeners = {
        afterExit: [],
        exit: [],
    };
    count = 0;
    id = Math.random();
    constructor() {
        if (global[kExitEmitter]) {
            return global[kExitEmitter];
        }
        ObjectDefineProperty(global, kExitEmitter, {
            value: this,
            writable: false,
            enumerable: false,
            configurable: false,
        });
    }
    on(ev, fn) {
        this.listeners[ev].push(fn);
    }
    removeListener(ev, fn) {
        const list = this.listeners[ev];
        const i = list.indexOf(fn);
        /* c8 ignore start */
        if (i === -1) {
            return;
        }
        /* c8 ignore stop */
        if (i === 0 && list.length === 1) {
            list.length = 0;
        }
        else {
            list.splice(i, 1);
        }
    }
    emit(ev, code, signal) {
        if (this.emitted[ev]) {
            return false;
        }
        this.emitted[ev] = true;
        let ret = false;
        for (const fn of this.listeners[ev]) {
            ret = fn(code, signal) === true || ret;
        }
        if (ev === 'exit') {
            ret = this.emit('afterExit', code, signal) || ret;
        }
        return ret;
    }
}
class SignalExitBase {
}
const signalExitWrap = (handler) => {
    return {
        onExit(cb, opts) {
            return handler.onExit(cb, opts);
        },
        load() {
            return handler.load();
        },
        unload() {
            return handler.unload();
        },
    };
};
class SignalExitFallback extends SignalExitBase {
    onExit() {
        return () => { };
    }
    load() { }
    unload() { }
}
class SignalExit extends SignalExitBase {
    // "SIGHUP" throws an `ENOSYS` error on Windows,
    // so use a supported signal instead
    /* c8 ignore start */
    #hupSig = process.platform === 'win32' ? 'SIGINT' : 'SIGHUP';
    /* c8 ignore stop */
    #emitter = new Emitter();
    #process;
    #originalProcessEmit;
    #originalProcessReallyExit;
    #sigListeners = {};
    #loaded = false;
    constructor(process) {
        super();
        this.#process = process;
        // { <signal>: <listener fn>, ... }
        this.#sigListeners = {};
        for (const sig of signals_js_1.signals) {
            this.#sigListeners[sig] = () => {
                // If there are no other listeners, an exit is coming!
                // Simplest way: remove us and then re-send the signal.
                // We know that this will kill the process, so we can
                // safely emit now.
                const listeners = this.#process.listeners(sig);
                let { count } = this.#emitter;
                // This is a workaround for the fact that signal-exit v3 and signal
                // exit v4 are not aware of each other, and each will attempt to let
                // the other handle it, so neither of them do. To correct this, we
                // detect if we're the only handler *except* for previous versions
                // of signal-exit, and increment by the count of listeners it has
                // created.
                /* c8 ignore start */
                const p = process;
                if (typeof p.__signal_exit_emitter__ === 'object' &&
                    typeof p.__signal_exit_emitter__.count === 'number') {
                    count += p.__signal_exit_emitter__.count;
                }
                /* c8 ignore stop */
                if (listeners.length === count) {
                    this.unload();
                    const ret = this.#emitter.emit('exit', null, sig);
                    /* c8 ignore start */
                    const s = sig === 'SIGHUP' ? this.#hupSig : sig;
                    if (!ret)
                        process.kill(process.pid, s);
                    /* c8 ignore stop */
                }
            };
        }
        this.#originalProcessReallyExit = process.reallyExit;
        this.#originalProcessEmit = process.emit;
    }
    onExit(cb, opts) {
        /* c8 ignore start */
        if (!processOk(this.#process)) {
            return () => { };
        }
        /* c8 ignore stop */
        if (this.#loaded === false) {
            this.load();
        }
        const ev = opts?.alwaysLast ? 'afterExit' : 'exit';
        this.#emitter.on(ev, cb);
        return () => {
            this.#emitter.removeListener(ev, cb);
            if (this.#emitter.listeners['exit'].length === 0 &&
                this.#emitter.listeners['afterExit'].length === 0) {
                this.unload();
            }
        };
    }
    load() {
        if (this.#loaded) {
            return;
        }
        this.#loaded = true;
        // This is the number of onSignalExit's that are in play.
        // It's important so that we can count the correct number of
        // listeners on signals, and don't wait for the other one to
        // handle it instead of us.
        this.#emitter.count += 1;
        for (const sig of signals_js_1.signals) {
            try {
                const fn = this.#sigListeners[sig];
                if (fn)
                    this.#process.on(sig, fn);
            }
            catch (_) { }
        }
        this.#process.emit = (ev, ...a) => {
            return this.#processEmit(ev, ...a);
        };
        this.#process.reallyExit = (code) => {
            return this.#processReallyExit(code);
        };
    }
    unload() {
        if (!this.#loaded) {
            return;
        }
        this.#loaded = false;
        signals_js_1.signals.forEach(sig => {
            const listener = this.#sigListeners[sig];
            /* c8 ignore start */
            if (!listener) {
                throw new Error('Listener not defined for signal: ' + sig);
            }
            /* c8 ignore stop */
            try {
                this.#process.removeListener(sig, listener);
                /* c8 ignore start */
            }
            catch (_) { }
            /* c8 ignore stop */
        });
        this.#process.emit = this.#originalProcessEmit;
        this.#process.reallyExit = this.#originalProcessReallyExit;
        this.#emitter.count -= 1;
    }
    #processReallyExit(code) {
        /* c8 ignore start */
        if (!processOk(this.#process)) {
            return 0;
        }
        this.#process.exitCode = code || 0;
        /* c8 ignore stop */
        this.#emitter.emit('exit', this.#process.exitCode, null);
        return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
    }
    #processEmit(ev, ...args) {
        const og = this.#originalProcessEmit;
        if (ev === 'exit' && processOk(this.#process)) {
            if (typeof args[0] === 'number') {
                this.#process.exitCode = args[0];
                /* c8 ignore start */
            }
            /* c8 ignore start */
            const ret = og.call(this.#process, ev, ...args);
            /* c8 ignore start */
            this.#emitter.emit('exit', this.#process.exitCode, null);
            /* c8 ignore stop */
            return ret;
        }
        else {
            return og.call(this.#process, ev, ...args);
        }
    }
}
const process = globalThis.process;
// wrap so that we call the method on the actual handler, without
// exporting it directly.
_a = signalExitWrap(processOk(process) ? new SignalExit(process) : new SignalExitFallback()), 
/**
 * Called when the process is exiting, whether via signal, explicit
 * exit, or running out of stuff to do.
 *
 * If the global process object is not suitable for instrumentation,
 * then this will be a no-op.
 *
 * Returns a function that may be used to unload signal-exit.
 */
exports.onExit = _a.onExit, 
/**
 * Load the listeners.  Likely you never need to call this, unless
 * doing a rather deep integration with signal-exit functionality.
 * Mostly exposed for the benefit of testing.
 *
 * @internal
 */
exports.load = _a.load, 
/**
 * Unload the listeners.  Likely you never need to call this, unless
 * doing a rather deep integration with signal-exit functionality.
 * Mostly exposed for the benefit of testing.
 *
 * @internal
 */
exports.unload = _a.unload;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/write-file-atomic/node_modules/signal-exit/dist/cjs/signals.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/write-file-atomic/node_modules/signal-exit/dist/cjs/signals.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.signals = void 0;
/**
 * This is not the set of all possible signals.
 *
 * It IS, however, the set of all signals that trigger
 * an exit on either Linux or BSD systems.  Linux is a
 * superset of the signal names supported on BSD, and
 * the unknown signals just fail to register, so we can
 * catch that easily enough.
 *
 * Windows signals are a different set, since there are
 * signals that terminate Windows processes, but don't
 * terminate (or don't even exist) on Posix systems.
 *
 * Don't bother with SIGKILL.  It's uncatchable, which
 * means that we can't fire any callbacks anyway.
 *
 * If a user does happen to register a handler on a non-
 * fatal signal like SIGWINCH or something, and then
 * exit, it'll end up firing `process.emit('exit')`, so
 * the handler will be fired anyway.
 *
 * SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
 * artificially, inherently leave the process in a
 * state from which it is not safe to try and enter JS
 * listeners.
 */
exports.signals = [];
exports.signals.push('SIGHUP', 'SIGINT', 'SIGTERM');
if (process.platform !== 'win32') {
    exports.signals.push('SIGALRM', 'SIGABRT', 'SIGVTALRM', 'SIGXCPU', 'SIGXFSZ', 'SIGUSR2', 'SIGTRAP', 'SIGSYS', 'SIGQUIT', 'SIGIOT'
    // should detect profiler and enable/disable accordingly.
    // see #21
    // 'SIGPROF'
    );
}
if (process.platform === 'linux') {
    exports.signals.push('SIGIO', 'SIGPOLL', 'SIGPWR', 'SIGSTKFLT');
}
//# sourceMappingURL=signals.js.map

/***/ }),

/***/ "./node_modules/async-mutex/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/async-mutex/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E_ALREADY_LOCKED: () => (/* binding */ E_ALREADY_LOCKED),
/* harmony export */   E_CANCELED: () => (/* binding */ E_CANCELED),
/* harmony export */   E_TIMEOUT: () => (/* binding */ E_TIMEOUT),
/* harmony export */   Mutex: () => (/* binding */ Mutex),
/* harmony export */   Semaphore: () => (/* binding */ Semaphore),
/* harmony export */   tryAcquire: () => (/* binding */ tryAcquire),
/* harmony export */   withTimeout: () => (/* binding */ withTimeout)
/* harmony export */ });
const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');
const E_ALREADY_LOCKED = new Error('mutex already locked');
const E_CANCELED = new Error('request for lock canceled');

var __awaiter$2 = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Semaphore {
    constructor(_value, _cancelError = E_CANCELED) {
        this._value = _value;
        this._cancelError = _cancelError;
        this._queue = [];
        this._weightedWaiters = [];
    }
    acquire(weight = 1, priority = 0) {
        if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
        return new Promise((resolve, reject) => {
            const task = { resolve, reject, weight, priority };
            const i = findIndexFromEnd(this._queue, (other) => priority <= other.priority);
            if (i === -1 && weight <= this._value) {
                // Needs immediate dispatch, skip the queue
                this._dispatchItem(task);
            }
            else {
                this._queue.splice(i + 1, 0, task);
            }
        });
    }
    runExclusive(callback_1) {
        return __awaiter$2(this, arguments, void 0, function* (callback, weight = 1, priority = 0) {
            const [value, release] = yield this.acquire(weight, priority);
            try {
                return yield callback(value);
            }
            finally {
                release();
            }
        });
    }
    waitForUnlock(weight = 1, priority = 0) {
        if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
        if (this._couldLockImmediately(weight, priority)) {
            return Promise.resolve();
        }
        else {
            return new Promise((resolve) => {
                if (!this._weightedWaiters[weight - 1])
                    this._weightedWaiters[weight - 1] = [];
                insertSorted(this._weightedWaiters[weight - 1], { resolve, priority });
            });
        }
    }
    isLocked() {
        return this._value <= 0;
    }
    getValue() {
        return this._value;
    }
    setValue(value) {
        this._value = value;
        this._dispatchQueue();
    }
    release(weight = 1) {
        if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
        this._value += weight;
        this._dispatchQueue();
    }
    cancel() {
        this._queue.forEach((entry) => entry.reject(this._cancelError));
        this._queue = [];
    }
    _dispatchQueue() {
        this._drainUnlockWaiters();
        while (this._queue.length > 0 && this._queue[0].weight <= this._value) {
            this._dispatchItem(this._queue.shift());
            this._drainUnlockWaiters();
        }
    }
    _dispatchItem(item) {
        const previousValue = this._value;
        this._value -= item.weight;
        item.resolve([previousValue, this._newReleaser(item.weight)]);
    }
    _newReleaser(weight) {
        let called = false;
        return () => {
            if (called)
                return;
            called = true;
            this.release(weight);
        };
    }
    _drainUnlockWaiters() {
        if (this._queue.length === 0) {
            for (let weight = this._value; weight > 0; weight--) {
                const waiters = this._weightedWaiters[weight - 1];
                if (!waiters)
                    continue;
                waiters.forEach((waiter) => waiter.resolve());
                this._weightedWaiters[weight - 1] = [];
            }
        }
        else {
            const queuedPriority = this._queue[0].priority;
            for (let weight = this._value; weight > 0; weight--) {
                const waiters = this._weightedWaiters[weight - 1];
                if (!waiters)
                    continue;
                const i = waiters.findIndex((waiter) => waiter.priority <= queuedPriority);
                (i === -1 ? waiters : waiters.splice(0, i))
                    .forEach((waiter => waiter.resolve()));
            }
        }
    }
    _couldLockImmediately(weight, priority) {
        return (this._queue.length === 0 || this._queue[0].priority < priority) &&
            weight <= this._value;
    }
}
function insertSorted(a, v) {
    const i = findIndexFromEnd(a, (other) => v.priority <= other.priority);
    a.splice(i + 1, 0, v);
}
function findIndexFromEnd(a, predicate) {
    for (let i = a.length - 1; i >= 0; i--) {
        if (predicate(a[i])) {
            return i;
        }
    }
    return -1;
}

var __awaiter$1 = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class Mutex {
    constructor(cancelError) {
        this._semaphore = new Semaphore(1, cancelError);
    }
    acquire() {
        return __awaiter$1(this, arguments, void 0, function* (priority = 0) {
            const [, releaser] = yield this._semaphore.acquire(1, priority);
            return releaser;
        });
    }
    runExclusive(callback, priority = 0) {
        return this._semaphore.runExclusive(() => callback(), 1, priority);
    }
    isLocked() {
        return this._semaphore.isLocked();
    }
    waitForUnlock(priority = 0) {
        return this._semaphore.waitForUnlock(1, priority);
    }
    release() {
        if (this._semaphore.isLocked())
            this._semaphore.release();
    }
    cancel() {
        return this._semaphore.cancel();
    }
}

var __awaiter = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {
    return {
        acquire: (weightOrPriority, priority) => {
            let weight;
            if (isSemaphore(sync)) {
                weight = weightOrPriority;
            }
            else {
                weight = undefined;
                priority = weightOrPriority;
            }
            if (weight !== undefined && weight <= 0) {
                throw new Error(`invalid weight ${weight}: must be positive`);
            }
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let isTimeout = false;
                const handle = setTimeout(() => {
                    isTimeout = true;
                    reject(timeoutError);
                }, timeout);
                try {
                    const ticket = yield (isSemaphore(sync)
                        ? sync.acquire(weight, priority)
                        : sync.acquire(priority));
                    if (isTimeout) {
                        const release = Array.isArray(ticket) ? ticket[1] : ticket;
                        release();
                    }
                    else {
                        clearTimeout(handle);
                        resolve(ticket);
                    }
                }
                catch (e) {
                    if (!isTimeout) {
                        clearTimeout(handle);
                        reject(e);
                    }
                }
            }));
        },
        runExclusive(callback, weight, priority) {
            return __awaiter(this, void 0, void 0, function* () {
                let release = () => undefined;
                try {
                    const ticket = yield this.acquire(weight, priority);
                    if (Array.isArray(ticket)) {
                        release = ticket[1];
                        return yield callback(ticket[0]);
                    }
                    else {
                        release = ticket;
                        return yield callback();
                    }
                }
                finally {
                    release();
                }
            });
        },
        release(weight) {
            sync.release(weight);
        },
        cancel() {
            return sync.cancel();
        },
        waitForUnlock: (weightOrPriority, priority) => {
            let weight;
            if (isSemaphore(sync)) {
                weight = weightOrPriority;
            }
            else {
                weight = undefined;
                priority = weightOrPriority;
            }
            if (weight !== undefined && weight <= 0) {
                throw new Error(`invalid weight ${weight}: must be positive`);
            }
            return new Promise((resolve, reject) => {
                const handle = setTimeout(() => reject(timeoutError), timeout);
                (isSemaphore(sync)
                    ? sync.waitForUnlock(weight, priority)
                    : sync.waitForUnlock(priority)).then(() => {
                    clearTimeout(handle);
                    resolve();
                });
            });
        },
        isLocked: () => sync.isLocked(),
        getValue: () => sync.getValue(),
        setValue: (value) => sync.setValue(value),
    };
}
function isSemaphore(sync) {
    return sync.getValue !== undefined;
}

// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types
function tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return withTimeout(sync, 0, alreadyAcquiredError);
}




/***/ }),

/***/ "./node_modules/jsonpath-plus/dist/index-node-esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/jsonpath-plus/dist/index-node-esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JSONPath: () => (/* binding */ JSONPath)
/* harmony export */ });
/* harmony import */ var vm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vm */ "vm");


/**
 * @implements {IHooks}
 */
class Hooks {
  /**
   * @callback HookCallback
   * @this {*|Jsep} this
   * @param {Jsep} env
   * @returns: void
   */
  /**
   * Adds the given callback to the list of callbacks for the given hook.
   *
   * The callback will be invoked when the hook it is registered for is run.
   *
   * One callback function can be registered to multiple hooks and the same hook multiple times.
   *
   * @param {string|object} name The name of the hook, or an object of callbacks keyed by name
   * @param {HookCallback|boolean} callback The callback function which is given environment variables.
   * @param {?boolean} [first=false] Will add the hook to the top of the list (defaults to the bottom)
   * @public
   */
  add(name, callback, first) {
    if (typeof arguments[0] != 'string') {
      // Multiple hook callbacks, keyed by name
      for (let name in arguments[0]) {
        this.add(name, arguments[0][name], arguments[1]);
      }
    } else {
      (Array.isArray(name) ? name : [name]).forEach(function (name) {
        this[name] = this[name] || [];
        if (callback) {
          this[name][first ? 'unshift' : 'push'](callback);
        }
      }, this);
    }
  }

  /**
   * Runs a hook invoking all registered callbacks with the given environment variables.
   *
   * Callbacks will be invoked synchronously and in the order in which they were registered.
   *
   * @param {string} name The name of the hook.
   * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
   * @public
   */
  run(name, env) {
    this[name] = this[name] || [];
    this[name].forEach(function (callback) {
      callback.call(env && env.context ? env.context : env, env);
    });
  }
}

/**
 * @implements {IPlugins}
 */
class Plugins {
  constructor(jsep) {
    this.jsep = jsep;
    this.registered = {};
  }

  /**
   * @callback PluginSetup
   * @this {Jsep} jsep
   * @returns: void
   */
  /**
   * Adds the given plugin(s) to the registry
   *
   * @param {object} plugins
   * @param {string} plugins.name The name of the plugin
   * @param {PluginSetup} plugins.init The init function
   * @public
   */
  register(...plugins) {
    plugins.forEach(plugin => {
      if (typeof plugin !== 'object' || !plugin.name || !plugin.init) {
        throw new Error('Invalid JSEP plugin format');
      }
      if (this.registered[plugin.name]) {
        // already registered. Ignore.
        return;
      }
      plugin.init(this.jsep);
      this.registered[plugin.name] = plugin;
    });
  }
}

//     JavaScript Expression Parser (JSEP) 1.4.0

class Jsep {
  /**
   * @returns {string}
   */
  static get version() {
    // To be filled in by the template
    return '1.4.0';
  }

  /**
   * @returns {string}
   */
  static toString() {
    return 'JavaScript Expression Parser (JSEP) v' + Jsep.version;
  }
  // ==================== CONFIG ================================
  /**
   * @method addUnaryOp
   * @param {string} op_name The name of the unary op to add
   * @returns {Jsep}
   */
  static addUnaryOp(op_name) {
    Jsep.max_unop_len = Math.max(op_name.length, Jsep.max_unop_len);
    Jsep.unary_ops[op_name] = 1;
    return Jsep;
  }

  /**
   * @method jsep.addBinaryOp
   * @param {string} op_name The name of the binary op to add
   * @param {number} precedence The precedence of the binary op (can be a float). Higher number = higher precedence
   * @param {boolean} [isRightAssociative=false] whether operator is right-associative
   * @returns {Jsep}
   */
  static addBinaryOp(op_name, precedence, isRightAssociative) {
    Jsep.max_binop_len = Math.max(op_name.length, Jsep.max_binop_len);
    Jsep.binary_ops[op_name] = precedence;
    if (isRightAssociative) {
      Jsep.right_associative.add(op_name);
    } else {
      Jsep.right_associative.delete(op_name);
    }
    return Jsep;
  }

  /**
   * @method addIdentifierChar
   * @param {string} char The additional character to treat as a valid part of an identifier
   * @returns {Jsep}
   */
  static addIdentifierChar(char) {
    Jsep.additional_identifier_chars.add(char);
    return Jsep;
  }

  /**
   * @method addLiteral
   * @param {string} literal_name The name of the literal to add
   * @param {*} literal_value The value of the literal
   * @returns {Jsep}
   */
  static addLiteral(literal_name, literal_value) {
    Jsep.literals[literal_name] = literal_value;
    return Jsep;
  }

  /**
   * @method removeUnaryOp
   * @param {string} op_name The name of the unary op to remove
   * @returns {Jsep}
   */
  static removeUnaryOp(op_name) {
    delete Jsep.unary_ops[op_name];
    if (op_name.length === Jsep.max_unop_len) {
      Jsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);
    }
    return Jsep;
  }

  /**
   * @method removeAllUnaryOps
   * @returns {Jsep}
   */
  static removeAllUnaryOps() {
    Jsep.unary_ops = {};
    Jsep.max_unop_len = 0;
    return Jsep;
  }

  /**
   * @method removeIdentifierChar
   * @param {string} char The additional character to stop treating as a valid part of an identifier
   * @returns {Jsep}
   */
  static removeIdentifierChar(char) {
    Jsep.additional_identifier_chars.delete(char);
    return Jsep;
  }

  /**
   * @method removeBinaryOp
   * @param {string} op_name The name of the binary op to remove
   * @returns {Jsep}
   */
  static removeBinaryOp(op_name) {
    delete Jsep.binary_ops[op_name];
    if (op_name.length === Jsep.max_binop_len) {
      Jsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);
    }
    Jsep.right_associative.delete(op_name);
    return Jsep;
  }

  /**
   * @method removeAllBinaryOps
   * @returns {Jsep}
   */
  static removeAllBinaryOps() {
    Jsep.binary_ops = {};
    Jsep.max_binop_len = 0;
    return Jsep;
  }

  /**
   * @method removeLiteral
   * @param {string} literal_name The name of the literal to remove
   * @returns {Jsep}
   */
  static removeLiteral(literal_name) {
    delete Jsep.literals[literal_name];
    return Jsep;
  }

  /**
   * @method removeAllLiterals
   * @returns {Jsep}
   */
  static removeAllLiterals() {
    Jsep.literals = {};
    return Jsep;
  }
  // ==================== END CONFIG ============================

  /**
   * @returns {string}
   */
  get char() {
    return this.expr.charAt(this.index);
  }

  /**
   * @returns {number}
   */
  get code() {
    return this.expr.charCodeAt(this.index);
  }
  /**
   * @param {string} expr a string with the passed in express
   * @returns Jsep
   */
  constructor(expr) {
    // `index` stores the character number we are currently at
    // All of the gobbles below will modify `index` as we move along
    this.expr = expr;
    this.index = 0;
  }

  /**
   * static top-level parser
   * @returns {jsep.Expression}
   */
  static parse(expr) {
    return new Jsep(expr).parse();
  }

  /**
   * Get the longest key length of any object
   * @param {object} obj
   * @returns {number}
   */
  static getMaxKeyLen(obj) {
    return Math.max(0, ...Object.keys(obj).map(k => k.length));
  }

  /**
   * `ch` is a character code in the next three functions
   * @param {number} ch
   * @returns {boolean}
   */
  static isDecimalDigit(ch) {
    return ch >= 48 && ch <= 57; // 0...9
  }

  /**
   * Returns the precedence of a binary operator or `0` if it isn't a binary operator. Can be float.
   * @param {string} op_val
   * @returns {number}
   */
  static binaryPrecedence(op_val) {
    return Jsep.binary_ops[op_val] || 0;
  }

  /**
   * Looks for start of identifier
   * @param {number} ch
   * @returns {boolean}
   */
  static isIdentifierStart(ch) {
    return ch >= 65 && ch <= 90 ||
    // A...Z
    ch >= 97 && ch <= 122 ||
    // a...z
    ch >= 128 && !Jsep.binary_ops[String.fromCharCode(ch)] ||
    // any non-ASCII that is not an operator
    Jsep.additional_identifier_chars.has(String.fromCharCode(ch)); // additional characters
  }

  /**
   * @param {number} ch
   * @returns {boolean}
   */
  static isIdentifierPart(ch) {
    return Jsep.isIdentifierStart(ch) || Jsep.isDecimalDigit(ch);
  }

  /**
   * throw error at index of the expression
   * @param {string} message
   * @throws
   */
  throwError(message) {
    const error = new Error(message + ' at character ' + this.index);
    error.index = this.index;
    error.description = message;
    throw error;
  }

  /**
   * Run a given hook
   * @param {string} name
   * @param {jsep.Expression|false} [node]
   * @returns {?jsep.Expression}
   */
  runHook(name, node) {
    if (Jsep.hooks[name]) {
      const env = {
        context: this,
        node
      };
      Jsep.hooks.run(name, env);
      return env.node;
    }
    return node;
  }

  /**
   * Runs a given hook until one returns a node
   * @param {string} name
   * @returns {?jsep.Expression}
   */
  searchHook(name) {
    if (Jsep.hooks[name]) {
      const env = {
        context: this
      };
      Jsep.hooks[name].find(function (callback) {
        callback.call(env.context, env);
        return env.node;
      });
      return env.node;
    }
  }

  /**
   * Push `index` up to the next non-space character
   */
  gobbleSpaces() {
    let ch = this.code;
    // Whitespace
    while (ch === Jsep.SPACE_CODE || ch === Jsep.TAB_CODE || ch === Jsep.LF_CODE || ch === Jsep.CR_CODE) {
      ch = this.expr.charCodeAt(++this.index);
    }
    this.runHook('gobble-spaces');
  }

  /**
   * Top-level method to parse all expressions and returns compound or single node
   * @returns {jsep.Expression}
   */
  parse() {
    this.runHook('before-all');
    const nodes = this.gobbleExpressions();

    // If there's only one expression just try returning the expression
    const node = nodes.length === 1 ? nodes[0] : {
      type: Jsep.COMPOUND,
      body: nodes
    };
    return this.runHook('after-all', node);
  }

  /**
   * top-level parser (but can be reused within as well)
   * @param {number} [untilICode]
   * @returns {jsep.Expression[]}
   */
  gobbleExpressions(untilICode) {
    let nodes = [],
      ch_i,
      node;
    while (this.index < this.expr.length) {
      ch_i = this.code;

      // Expressions can be separated by semicolons, commas, or just inferred without any
      // separators
      if (ch_i === Jsep.SEMCOL_CODE || ch_i === Jsep.COMMA_CODE) {
        this.index++; // ignore separators
      } else {
        // Try to gobble each expression individually
        if (node = this.gobbleExpression()) {
          nodes.push(node);
          // If we weren't able to find a binary expression and are out of room, then
          // the expression passed in probably has too much
        } else if (this.index < this.expr.length) {
          if (ch_i === untilICode) {
            break;
          }
          this.throwError('Unexpected "' + this.char + '"');
        }
      }
    }
    return nodes;
  }

  /**
   * The main parsing function.
   * @returns {?jsep.Expression}
   */
  gobbleExpression() {
    const node = this.searchHook('gobble-expression') || this.gobbleBinaryExpression();
    this.gobbleSpaces();
    return this.runHook('after-expression', node);
  }

  /**
   * Search for the operation portion of the string (e.g. `+`, `===`)
   * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)
   * and move down from 3 to 2 to 1 character until a matching binary operation is found
   * then, return that binary operation
   * @returns {string|boolean}
   */
  gobbleBinaryOp() {
    this.gobbleSpaces();
    let to_check = this.expr.substr(this.index, Jsep.max_binop_len);
    let tc_len = to_check.length;
    while (tc_len > 0) {
      // Don't accept a binary op when it is an identifier.
      // Binary ops that start with a identifier-valid character must be followed
      // by a non identifier-part valid character
      if (Jsep.binary_ops.hasOwnProperty(to_check) && (!Jsep.isIdentifierStart(this.code) || this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))) {
        this.index += tc_len;
        return to_check;
      }
      to_check = to_check.substr(0, --tc_len);
    }
    return false;
  }

  /**
   * This function is responsible for gobbling an individual expression,
   * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`
   * @returns {?jsep.BinaryExpression}
   */
  gobbleBinaryExpression() {
    let node, biop, prec, stack, biop_info, left, right, i, cur_biop;

    // First, try to get the leftmost thing
    // Then, check to see if there's a binary operator operating on that leftmost thing
    // Don't gobbleBinaryOp without a left-hand-side
    left = this.gobbleToken();
    if (!left) {
      return left;
    }
    biop = this.gobbleBinaryOp();

    // If there wasn't a binary operator, just return the leftmost node
    if (!biop) {
      return left;
    }

    // Otherwise, we need to start a stack to properly place the binary operations in their
    // precedence structure
    biop_info = {
      value: biop,
      prec: Jsep.binaryPrecedence(biop),
      right_a: Jsep.right_associative.has(biop)
    };
    right = this.gobbleToken();
    if (!right) {
      this.throwError("Expected expression after " + biop);
    }
    stack = [left, biop_info, right];

    // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)
    while (biop = this.gobbleBinaryOp()) {
      prec = Jsep.binaryPrecedence(biop);
      if (prec === 0) {
        this.index -= biop.length;
        break;
      }
      biop_info = {
        value: biop,
        prec,
        right_a: Jsep.right_associative.has(biop)
      };
      cur_biop = biop;

      // Reduce: make a binary expression from the three topmost entries.
      const comparePrev = prev => biop_info.right_a && prev.right_a ? prec > prev.prec : prec <= prev.prec;
      while (stack.length > 2 && comparePrev(stack[stack.length - 2])) {
        right = stack.pop();
        biop = stack.pop().value;
        left = stack.pop();
        node = {
          type: Jsep.BINARY_EXP,
          operator: biop,
          left,
          right
        };
        stack.push(node);
      }
      node = this.gobbleToken();
      if (!node) {
        this.throwError("Expected expression after " + cur_biop);
      }
      stack.push(biop_info, node);
    }
    i = stack.length - 1;
    node = stack[i];
    while (i > 1) {
      node = {
        type: Jsep.BINARY_EXP,
        operator: stack[i - 1].value,
        left: stack[i - 2],
        right: node
      };
      i -= 2;
    }
    return node;
  }

  /**
   * An individual part of a binary expression:
   * e.g. `foo.bar(baz)`, `1`, `"abc"`, `(a % 2)` (because it's in parenthesis)
   * @returns {boolean|jsep.Expression}
   */
  gobbleToken() {
    let ch, to_check, tc_len, node;
    this.gobbleSpaces();
    node = this.searchHook('gobble-token');
    if (node) {
      return this.runHook('after-token', node);
    }
    ch = this.code;
    if (Jsep.isDecimalDigit(ch) || ch === Jsep.PERIOD_CODE) {
      // Char code 46 is a dot `.` which can start off a numeric literal
      return this.gobbleNumericLiteral();
    }
    if (ch === Jsep.SQUOTE_CODE || ch === Jsep.DQUOTE_CODE) {
      // Single or double quotes
      node = this.gobbleStringLiteral();
    } else if (ch === Jsep.OBRACK_CODE) {
      node = this.gobbleArray();
    } else {
      to_check = this.expr.substr(this.index, Jsep.max_unop_len);
      tc_len = to_check.length;
      while (tc_len > 0) {
        // Don't accept an unary op when it is an identifier.
        // Unary ops that start with a identifier-valid character must be followed
        // by a non identifier-part valid character
        if (Jsep.unary_ops.hasOwnProperty(to_check) && (!Jsep.isIdentifierStart(this.code) || this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))) {
          this.index += tc_len;
          const argument = this.gobbleToken();
          if (!argument) {
            this.throwError('missing unaryOp argument');
          }
          return this.runHook('after-token', {
            type: Jsep.UNARY_EXP,
            operator: to_check,
            argument,
            prefix: true
          });
        }
        to_check = to_check.substr(0, --tc_len);
      }
      if (Jsep.isIdentifierStart(ch)) {
        node = this.gobbleIdentifier();
        if (Jsep.literals.hasOwnProperty(node.name)) {
          node = {
            type: Jsep.LITERAL,
            value: Jsep.literals[node.name],
            raw: node.name
          };
        } else if (node.name === Jsep.this_str) {
          node = {
            type: Jsep.THIS_EXP
          };
        }
      } else if (ch === Jsep.OPAREN_CODE) {
        // open parenthesis
        node = this.gobbleGroup();
      }
    }
    if (!node) {
      return this.runHook('after-token', false);
    }
    node = this.gobbleTokenProperty(node);
    return this.runHook('after-token', node);
  }

  /**
   * Gobble properties of of identifiers/strings/arrays/groups.
   * e.g. `foo`, `bar.baz`, `foo['bar'].baz`
   * It also gobbles function calls:
   * e.g. `Math.acos(obj.angle)`
   * @param {jsep.Expression} node
   * @returns {jsep.Expression}
   */
  gobbleTokenProperty(node) {
    this.gobbleSpaces();
    let ch = this.code;
    while (ch === Jsep.PERIOD_CODE || ch === Jsep.OBRACK_CODE || ch === Jsep.OPAREN_CODE || ch === Jsep.QUMARK_CODE) {
      let optional;
      if (ch === Jsep.QUMARK_CODE) {
        if (this.expr.charCodeAt(this.index + 1) !== Jsep.PERIOD_CODE) {
          break;
        }
        optional = true;
        this.index += 2;
        this.gobbleSpaces();
        ch = this.code;
      }
      this.index++;
      if (ch === Jsep.OBRACK_CODE) {
        node = {
          type: Jsep.MEMBER_EXP,
          computed: true,
          object: node,
          property: this.gobbleExpression()
        };
        if (!node.property) {
          this.throwError('Unexpected "' + this.char + '"');
        }
        this.gobbleSpaces();
        ch = this.code;
        if (ch !== Jsep.CBRACK_CODE) {
          this.throwError('Unclosed [');
        }
        this.index++;
      } else if (ch === Jsep.OPAREN_CODE) {
        // A function call is being made; gobble all the arguments
        node = {
          type: Jsep.CALL_EXP,
          'arguments': this.gobbleArguments(Jsep.CPAREN_CODE),
          callee: node
        };
      } else if (ch === Jsep.PERIOD_CODE || optional) {
        if (optional) {
          this.index--;
        }
        this.gobbleSpaces();
        node = {
          type: Jsep.MEMBER_EXP,
          computed: false,
          object: node,
          property: this.gobbleIdentifier()
        };
      }
      if (optional) {
        node.optional = true;
      } // else leave undefined for compatibility with esprima

      this.gobbleSpaces();
      ch = this.code;
    }
    return node;
  }

  /**
   * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to
   * keep track of everything in the numeric literal and then calling `parseFloat` on that string
   * @returns {jsep.Literal}
   */
  gobbleNumericLiteral() {
    let number = '',
      ch,
      chCode;
    while (Jsep.isDecimalDigit(this.code)) {
      number += this.expr.charAt(this.index++);
    }
    if (this.code === Jsep.PERIOD_CODE) {
      // can start with a decimal marker
      number += this.expr.charAt(this.index++);
      while (Jsep.isDecimalDigit(this.code)) {
        number += this.expr.charAt(this.index++);
      }
    }
    ch = this.char;
    if (ch === 'e' || ch === 'E') {
      // exponent marker
      number += this.expr.charAt(this.index++);
      ch = this.char;
      if (ch === '+' || ch === '-') {
        // exponent sign
        number += this.expr.charAt(this.index++);
      }
      while (Jsep.isDecimalDigit(this.code)) {
        // exponent itself
        number += this.expr.charAt(this.index++);
      }
      if (!Jsep.isDecimalDigit(this.expr.charCodeAt(this.index - 1))) {
        this.throwError('Expected exponent (' + number + this.char + ')');
      }
    }
    chCode = this.code;

    // Check to make sure this isn't a variable name that start with a number (123abc)
    if (Jsep.isIdentifierStart(chCode)) {
      this.throwError('Variable names cannot start with a number (' + number + this.char + ')');
    } else if (chCode === Jsep.PERIOD_CODE || number.length === 1 && number.charCodeAt(0) === Jsep.PERIOD_CODE) {
      this.throwError('Unexpected period');
    }
    return {
      type: Jsep.LITERAL,
      value: parseFloat(number),
      raw: number
    };
  }

  /**
   * Parses a string literal, staring with single or double quotes with basic support for escape codes
   * e.g. `"hello world"`, `'this is\nJSEP'`
   * @returns {jsep.Literal}
   */
  gobbleStringLiteral() {
    let str = '';
    const startIndex = this.index;
    const quote = this.expr.charAt(this.index++);
    let closed = false;
    while (this.index < this.expr.length) {
      let ch = this.expr.charAt(this.index++);
      if (ch === quote) {
        closed = true;
        break;
      } else if (ch === '\\') {
        // Check for all of the common escape codes
        ch = this.expr.charAt(this.index++);
        switch (ch) {
          case 'n':
            str += '\n';
            break;
          case 'r':
            str += '\r';
            break;
          case 't':
            str += '\t';
            break;
          case 'b':
            str += '\b';
            break;
          case 'f':
            str += '\f';
            break;
          case 'v':
            str += '\x0B';
            break;
          default:
            str += ch;
        }
      } else {
        str += ch;
      }
    }
    if (!closed) {
      this.throwError('Unclosed quote after "' + str + '"');
    }
    return {
      type: Jsep.LITERAL,
      value: str,
      raw: this.expr.substring(startIndex, this.index)
    };
  }

  /**
   * Gobbles only identifiers
   * e.g.: `foo`, `_value`, `$x1`
   * Also, this function checks if that identifier is a literal:
   * (e.g. `true`, `false`, `null`) or `this`
   * @returns {jsep.Identifier}
   */
  gobbleIdentifier() {
    let ch = this.code,
      start = this.index;
    if (Jsep.isIdentifierStart(ch)) {
      this.index++;
    } else {
      this.throwError('Unexpected ' + this.char);
    }
    while (this.index < this.expr.length) {
      ch = this.code;
      if (Jsep.isIdentifierPart(ch)) {
        this.index++;
      } else {
        break;
      }
    }
    return {
      type: Jsep.IDENTIFIER,
      name: this.expr.slice(start, this.index)
    };
  }

  /**
   * Gobbles a list of arguments within the context of a function call
   * or array literal. This function also assumes that the opening character
   * `(` or `[` has already been gobbled, and gobbles expressions and commas
   * until the terminator character `)` or `]` is encountered.
   * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`
   * @param {number} termination
   * @returns {jsep.Expression[]}
   */
  gobbleArguments(termination) {
    const args = [];
    let closed = false;
    let separator_count = 0;
    while (this.index < this.expr.length) {
      this.gobbleSpaces();
      let ch_i = this.code;
      if (ch_i === termination) {
        // done parsing
        closed = true;
        this.index++;
        if (termination === Jsep.CPAREN_CODE && separator_count && separator_count >= args.length) {
          this.throwError('Unexpected token ' + String.fromCharCode(termination));
        }
        break;
      } else if (ch_i === Jsep.COMMA_CODE) {
        // between expressions
        this.index++;
        separator_count++;
        if (separator_count !== args.length) {
          // missing argument
          if (termination === Jsep.CPAREN_CODE) {
            this.throwError('Unexpected token ,');
          } else if (termination === Jsep.CBRACK_CODE) {
            for (let arg = args.length; arg < separator_count; arg++) {
              args.push(null);
            }
          }
        }
      } else if (args.length !== separator_count && separator_count !== 0) {
        // NOTE: `&& separator_count !== 0` allows for either all commas, or all spaces as arguments
        this.throwError('Expected comma');
      } else {
        const node = this.gobbleExpression();
        if (!node || node.type === Jsep.COMPOUND) {
          this.throwError('Expected comma');
        }
        args.push(node);
      }
    }
    if (!closed) {
      this.throwError('Expected ' + String.fromCharCode(termination));
    }
    return args;
  }

  /**
   * Responsible for parsing a group of things within parentheses `()`
   * that have no identifier in front (so not a function call)
   * This function assumes that it needs to gobble the opening parenthesis
   * and then tries to gobble everything within that parenthesis, assuming
   * that the next thing it should see is the close parenthesis. If not,
   * then the expression probably doesn't have a `)`
   * @returns {boolean|jsep.Expression}
   */
  gobbleGroup() {
    this.index++;
    let nodes = this.gobbleExpressions(Jsep.CPAREN_CODE);
    if (this.code === Jsep.CPAREN_CODE) {
      this.index++;
      if (nodes.length === 1) {
        return nodes[0];
      } else if (!nodes.length) {
        return false;
      } else {
        return {
          type: Jsep.SEQUENCE_EXP,
          expressions: nodes
        };
      }
    } else {
      this.throwError('Unclosed (');
    }
  }

  /**
   * Responsible for parsing Array literals `[1, 2, 3]`
   * This function assumes that it needs to gobble the opening bracket
   * and then tries to gobble the expressions as arguments.
   * @returns {jsep.ArrayExpression}
   */
  gobbleArray() {
    this.index++;
    return {
      type: Jsep.ARRAY_EXP,
      elements: this.gobbleArguments(Jsep.CBRACK_CODE)
    };
  }
}

// Static fields:
const hooks = new Hooks();
Object.assign(Jsep, {
  hooks,
  plugins: new Plugins(Jsep),
  // Node Types
  // ----------
  // This is the full set of types that any JSEP node can be.
  // Store them here to save space when minified
  COMPOUND: 'Compound',
  SEQUENCE_EXP: 'SequenceExpression',
  IDENTIFIER: 'Identifier',
  MEMBER_EXP: 'MemberExpression',
  LITERAL: 'Literal',
  THIS_EXP: 'ThisExpression',
  CALL_EXP: 'CallExpression',
  UNARY_EXP: 'UnaryExpression',
  BINARY_EXP: 'BinaryExpression',
  ARRAY_EXP: 'ArrayExpression',
  TAB_CODE: 9,
  LF_CODE: 10,
  CR_CODE: 13,
  SPACE_CODE: 32,
  PERIOD_CODE: 46,
  // '.'
  COMMA_CODE: 44,
  // ','
  SQUOTE_CODE: 39,
  // single quote
  DQUOTE_CODE: 34,
  // double quotes
  OPAREN_CODE: 40,
  // (
  CPAREN_CODE: 41,
  // )
  OBRACK_CODE: 91,
  // [
  CBRACK_CODE: 93,
  // ]
  QUMARK_CODE: 63,
  // ?
  SEMCOL_CODE: 59,
  // ;
  COLON_CODE: 58,
  // :

  // Operations
  // ----------
  // Use a quickly-accessible map to store all of the unary operators
  // Values are set to `1` (it really doesn't matter)
  unary_ops: {
    '-': 1,
    '!': 1,
    '~': 1,
    '+': 1
  },
  // Also use a map for the binary operations but set their values to their
  // binary precedence for quick reference (higher number = higher precedence)
  // see [Order of operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)
  binary_ops: {
    '||': 1,
    '??': 1,
    '&&': 2,
    '|': 3,
    '^': 4,
    '&': 5,
    '==': 6,
    '!=': 6,
    '===': 6,
    '!==': 6,
    '<': 7,
    '>': 7,
    '<=': 7,
    '>=': 7,
    '<<': 8,
    '>>': 8,
    '>>>': 8,
    '+': 9,
    '-': 9,
    '*': 10,
    '/': 10,
    '%': 10,
    '**': 11
  },
  // sets specific binary_ops as right-associative
  right_associative: new Set(['**']),
  // Additional valid identifier chars, apart from a-z, A-Z and 0-9 (except on the starting char)
  additional_identifier_chars: new Set(['$', '_']),
  // Literals
  // ----------
  // Store the values to return for the various literals we may encounter
  literals: {
    'true': true,
    'false': false,
    'null': null
  },
  // Except for `this`, which is special. This could be changed to something like `'self'` as well
  this_str: 'this'
});
Jsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);
Jsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);

// Backward Compatibility:
const jsep = expr => new Jsep(expr).parse();
const stdClassProps = Object.getOwnPropertyNames(class Test {});
Object.getOwnPropertyNames(Jsep).filter(prop => !stdClassProps.includes(prop) && jsep[prop] === undefined).forEach(m => {
  jsep[m] = Jsep[m];
});
jsep.Jsep = Jsep; // allows for const { Jsep } = require('jsep');

const CONDITIONAL_EXP = 'ConditionalExpression';
var ternary = {
  name: 'ternary',
  init(jsep) {
    // Ternary expression: test ? consequent : alternate
    jsep.hooks.add('after-expression', function gobbleTernary(env) {
      if (env.node && this.code === jsep.QUMARK_CODE) {
        this.index++;
        const test = env.node;
        const consequent = this.gobbleExpression();
        if (!consequent) {
          this.throwError('Expected expression');
        }
        this.gobbleSpaces();
        if (this.code === jsep.COLON_CODE) {
          this.index++;
          const alternate = this.gobbleExpression();
          if (!alternate) {
            this.throwError('Expected expression');
          }
          env.node = {
            type: CONDITIONAL_EXP,
            test,
            consequent,
            alternate
          };

          // check for operators of higher priority than ternary (i.e. assignment)
          // jsep sets || at 1, and assignment at 0.9, and conditional should be between them
          if (test.operator && jsep.binary_ops[test.operator] <= 0.9) {
            let newTest = test;
            while (newTest.right.operator && jsep.binary_ops[newTest.right.operator] <= 0.9) {
              newTest = newTest.right;
            }
            env.node.test = newTest.right;
            newTest.right = env.node;
            env.node = test;
          }
        } else {
          this.throwError('Expected :');
        }
      }
    });
  }
};

// Add default plugins:

jsep.plugins.register(ternary);

const FSLASH_CODE = 47; // '/'
const BSLASH_CODE = 92; // '\\'

var index = {
  name: 'regex',
  init(jsep) {
    // Regex literal: /abc123/ig
    jsep.hooks.add('gobble-token', function gobbleRegexLiteral(env) {
      if (this.code === FSLASH_CODE) {
        const patternIndex = ++this.index;
        let inCharSet = false;
        while (this.index < this.expr.length) {
          if (this.code === FSLASH_CODE && !inCharSet) {
            const pattern = this.expr.slice(patternIndex, this.index);
            let flags = '';
            while (++this.index < this.expr.length) {
              const code = this.code;
              if (code >= 97 && code <= 122 // a...z
              || code >= 65 && code <= 90 // A...Z
              || code >= 48 && code <= 57) {
                // 0-9
                flags += this.char;
              } else {
                break;
              }
            }
            let value;
            try {
              value = new RegExp(pattern, flags);
            } catch (e) {
              this.throwError(e.message);
            }
            env.node = {
              type: jsep.LITERAL,
              value,
              raw: this.expr.slice(patternIndex - 1, this.index)
            };

            // allow . [] and () after regex: /regex/.test(a)
            env.node = this.gobbleTokenProperty(env.node);
            return env.node;
          }
          if (this.code === jsep.OBRACK_CODE) {
            inCharSet = true;
          } else if (inCharSet && this.code === jsep.CBRACK_CODE) {
            inCharSet = false;
          }
          this.index += this.code === BSLASH_CODE ? 2 : 1;
        }
        this.throwError('Unclosed Regex');
      }
    });
  }
};

const PLUS_CODE = 43; // +
const MINUS_CODE = 45; // -

const plugin = {
  name: 'assignment',
  assignmentOperators: new Set(['=', '*=', '**=', '/=', '%=', '+=', '-=', '<<=', '>>=', '>>>=', '&=', '^=', '|=', '||=', '&&=', '??=']),
  updateOperators: [PLUS_CODE, MINUS_CODE],
  assignmentPrecedence: 0.9,
  init(jsep) {
    const updateNodeTypes = [jsep.IDENTIFIER, jsep.MEMBER_EXP];
    plugin.assignmentOperators.forEach(op => jsep.addBinaryOp(op, plugin.assignmentPrecedence, true));
    jsep.hooks.add('gobble-token', function gobbleUpdatePrefix(env) {
      const code = this.code;
      if (plugin.updateOperators.some(c => c === code && c === this.expr.charCodeAt(this.index + 1))) {
        this.index += 2;
        env.node = {
          type: 'UpdateExpression',
          operator: code === PLUS_CODE ? '++' : '--',
          argument: this.gobbleTokenProperty(this.gobbleIdentifier()),
          prefix: true
        };
        if (!env.node.argument || !updateNodeTypes.includes(env.node.argument.type)) {
          this.throwError(`Unexpected ${env.node.operator}`);
        }
      }
    });
    jsep.hooks.add('after-token', function gobbleUpdatePostfix(env) {
      if (env.node) {
        const code = this.code;
        if (plugin.updateOperators.some(c => c === code && c === this.expr.charCodeAt(this.index + 1))) {
          if (!updateNodeTypes.includes(env.node.type)) {
            this.throwError(`Unexpected ${env.node.operator}`);
          }
          this.index += 2;
          env.node = {
            type: 'UpdateExpression',
            operator: code === PLUS_CODE ? '++' : '--',
            argument: env.node,
            prefix: false
          };
        }
      }
    });
    jsep.hooks.add('after-expression', function gobbleAssignment(env) {
      if (env.node) {
        // Note: Binaries can be chained in a single expression to respect
        // operator precedence (i.e. a = b = 1 + 2 + 3)
        // Update all binary assignment nodes in the tree
        updateBinariesToAssignments(env.node);
      }
    });
    function updateBinariesToAssignments(node) {
      if (plugin.assignmentOperators.has(node.operator)) {
        node.type = 'AssignmentExpression';
        updateBinariesToAssignments(node.left);
        updateBinariesToAssignments(node.right);
      } else if (!node.operator) {
        Object.values(node).forEach(val => {
          if (val && typeof val === 'object') {
            updateBinariesToAssignments(val);
          }
        });
      }
    }
  }
};

/* eslint-disable no-bitwise -- Convenient */

// register plugins
jsep.plugins.register(index, plugin);
jsep.addUnaryOp('typeof');
jsep.addLiteral('null', null);
jsep.addLiteral('undefined', undefined);
const BLOCKED_PROTO_PROPERTIES = new Set(['constructor', '__proto__', '__defineGetter__', '__defineSetter__']);
const SafeEval = {
  /**
   * @param {jsep.Expression} ast
   * @param {Record<string, any>} subs
   */
  evalAst(ast, subs) {
    switch (ast.type) {
      case 'BinaryExpression':
      case 'LogicalExpression':
        return SafeEval.evalBinaryExpression(ast, subs);
      case 'Compound':
        return SafeEval.evalCompound(ast, subs);
      case 'ConditionalExpression':
        return SafeEval.evalConditionalExpression(ast, subs);
      case 'Identifier':
        return SafeEval.evalIdentifier(ast, subs);
      case 'Literal':
        return SafeEval.evalLiteral(ast, subs);
      case 'MemberExpression':
        return SafeEval.evalMemberExpression(ast, subs);
      case 'UnaryExpression':
        return SafeEval.evalUnaryExpression(ast, subs);
      case 'ArrayExpression':
        return SafeEval.evalArrayExpression(ast, subs);
      case 'CallExpression':
        return SafeEval.evalCallExpression(ast, subs);
      case 'AssignmentExpression':
        return SafeEval.evalAssignmentExpression(ast, subs);
      default:
        throw SyntaxError('Unexpected expression', ast);
    }
  },
  evalBinaryExpression(ast, subs) {
    const result = {
      '||': (a, b) => a || b(),
      '&&': (a, b) => a && b(),
      '|': (a, b) => a | b(),
      '^': (a, b) => a ^ b(),
      '&': (a, b) => a & b(),
      // eslint-disable-next-line eqeqeq -- API
      '==': (a, b) => a == b(),
      // eslint-disable-next-line eqeqeq -- API
      '!=': (a, b) => a != b(),
      '===': (a, b) => a === b(),
      '!==': (a, b) => a !== b(),
      '<': (a, b) => a < b(),
      '>': (a, b) => a > b(),
      '<=': (a, b) => a <= b(),
      '>=': (a, b) => a >= b(),
      '<<': (a, b) => a << b(),
      '>>': (a, b) => a >> b(),
      '>>>': (a, b) => a >>> b(),
      '+': (a, b) => a + b(),
      '-': (a, b) => a - b(),
      '*': (a, b) => a * b(),
      '/': (a, b) => a / b(),
      '%': (a, b) => a % b()
    }[ast.operator](SafeEval.evalAst(ast.left, subs), () => SafeEval.evalAst(ast.right, subs));
    return result;
  },
  evalCompound(ast, subs) {
    let last;
    for (let i = 0; i < ast.body.length; i++) {
      if (ast.body[i].type === 'Identifier' && ['var', 'let', 'const'].includes(ast.body[i].name) && ast.body[i + 1] && ast.body[i + 1].type === 'AssignmentExpression') {
        // var x=2; is detected as
        // [{Identifier var}, {AssignmentExpression x=2}]
        // eslint-disable-next-line @stylistic/max-len -- Long
        // eslint-disable-next-line sonarjs/updated-loop-counter -- Convenient
        i += 1;
      }
      const expr = ast.body[i];
      last = SafeEval.evalAst(expr, subs);
    }
    return last;
  },
  evalConditionalExpression(ast, subs) {
    if (SafeEval.evalAst(ast.test, subs)) {
      return SafeEval.evalAst(ast.consequent, subs);
    }
    return SafeEval.evalAst(ast.alternate, subs);
  },
  evalIdentifier(ast, subs) {
    if (Object.hasOwn(subs, ast.name)) {
      return subs[ast.name];
    }
    throw ReferenceError(`${ast.name} is not defined`);
  },
  evalLiteral(ast) {
    return ast.value;
  },
  evalMemberExpression(ast, subs) {
    const prop = String(
    // NOTE: `String(value)` throws error when
    // value has overwritten the toString method to return non-string
    // i.e. `value = {toString: () => []}`
    ast.computed ? SafeEval.evalAst(ast.property) // `object[property]`
    : ast.property.name // `object.property` property is Identifier
    );
    const obj = SafeEval.evalAst(ast.object, subs);
    if (obj === undefined || obj === null) {
      throw TypeError(`Cannot read properties of ${obj} (reading '${prop}')`);
    }
    if (!Object.hasOwn(obj, prop) && BLOCKED_PROTO_PROPERTIES.has(prop)) {
      throw TypeError(`Cannot read properties of ${obj} (reading '${prop}')`);
    }
    const result = obj[prop];
    if (typeof result === 'function') {
      return result.bind(obj); // arrow functions aren't affected by bind.
    }
    return result;
  },
  evalUnaryExpression(ast, subs) {
    const result = {
      '-': a => -SafeEval.evalAst(a, subs),
      '!': a => !SafeEval.evalAst(a, subs),
      '~': a => ~SafeEval.evalAst(a, subs),
      // eslint-disable-next-line no-implicit-coercion -- API
      '+': a => +SafeEval.evalAst(a, subs),
      typeof: a => typeof SafeEval.evalAst(a, subs)
    }[ast.operator](ast.argument);
    return result;
  },
  evalArrayExpression(ast, subs) {
    return ast.elements.map(el => SafeEval.evalAst(el, subs));
  },
  evalCallExpression(ast, subs) {
    const args = ast.arguments.map(arg => SafeEval.evalAst(arg, subs));
    const func = SafeEval.evalAst(ast.callee, subs);
    // if (func === Function) {
    //     throw new Error('Function constructor is disabled');
    // }
    return func(...args);
  },
  evalAssignmentExpression(ast, subs) {
    if (ast.left.type !== 'Identifier') {
      throw SyntaxError('Invalid left-hand side in assignment');
    }
    const id = ast.left.name;
    const value = SafeEval.evalAst(ast.right, subs);
    subs[id] = value;
    return subs[id];
  }
};

/**
 * A replacement for NodeJS' VM.Script which is also {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP | Content Security Policy} friendly.
 */
class SafeScript {
  /**
   * @param {string} expr Expression to evaluate
   */
  constructor(expr) {
    this.code = expr;
    this.ast = jsep(this.code);
  }

  /**
   * @param {object} context Object whose items will be added
   *   to evaluation
   * @returns {EvaluatedResult} Result of evaluated code
   */
  runInNewContext(context) {
    // `Object.create(null)` creates a prototypeless object
    const keyMap = Object.assign(Object.create(null), context);
    return SafeEval.evalAst(this.ast, keyMap);
  }
}

/* eslint-disable camelcase -- Convenient for escaping */


/**
 * @typedef {null|boolean|number|string|object|GenericArray} JSONObject
 */

/**
 * @typedef {any} AnyItem
 */

/**
 * @typedef {any} AnyResult
 */

/**
 * Copies array and then pushes item into it.
 * @param {GenericArray} arr Array to copy and into which to push
 * @param {AnyItem} item Array item to add (to end)
 * @returns {GenericArray} Copy of the original array
 */
function push(arr, item) {
  arr = arr.slice();
  arr.push(item);
  return arr;
}
/**
 * Copies array and then unshifts item into it.
 * @param {AnyItem} item Array item to add (to beginning)
 * @param {GenericArray} arr Array to copy and into which to unshift
 * @returns {GenericArray} Copy of the original array
 */
function unshift(item, arr) {
  arr = arr.slice();
  arr.unshift(item);
  return arr;
}

/**
 * Caught when JSONPath is used without `new` but rethrown if with `new`
 * @extends Error
 */
class NewError extends Error {
  /**
   * @param {AnyResult} value The evaluated scalar value
   */
  constructor(value) {
    super('JSONPath should not be called with "new" (it prevents return ' + 'of (unwrapped) scalar values)');
    this.avoidNew = true;
    this.value = value;
    this.name = 'NewError';
  }
}

/**
* @typedef {object} ReturnObject
* @property {string} path
* @property {JSONObject} value
* @property {object|GenericArray} parent
* @property {string} parentProperty
*/

/**
* @callback JSONPathCallback
* @param {string|object} preferredOutput
* @param {"value"|"property"} type
* @param {ReturnObject} fullRetObj
* @returns {void}
*/

/**
* @callback OtherTypeCallback
* @param {JSONObject} val
* @param {string} path
* @param {object|GenericArray} parent
* @param {string} parentPropName
* @returns {boolean}
*/

/**
 * @typedef {any} ContextItem
 */

/**
 * @typedef {any} EvaluatedResult
 */

/**
* @callback EvalCallback
* @param {string} code
* @param {ContextItem} context
* @returns {EvaluatedResult}
*/

/**
 * @typedef {typeof SafeScript} EvalClass
 */

/**
 * @typedef {object} JSONPathOptions
 * @property {JSON} json
 * @property {string|string[]} path
 * @property {"value"|"path"|"pointer"|"parent"|"parentProperty"|
 *   "all"} [resultType="value"]
 * @property {boolean} [flatten=false]
 * @property {boolean} [wrap=true]
 * @property {object} [sandbox={}]
 * @property {EvalCallback|EvalClass|'safe'|'native'|
 *   boolean} [eval = 'safe']
 * @property {object|GenericArray|null} [parent=null]
 * @property {string|null} [parentProperty=null]
 * @property {JSONPathCallback} [callback]
 * @property {OtherTypeCallback} [otherTypeCallback] Defaults to
 *   function which throws on encountering `@other`
 * @property {boolean} [autostart=true]
 */

/**
 * @param {string|JSONPathOptions} opts If a string, will be treated as `expr`
 * @param {string} [expr] JSON path to evaluate
 * @param {JSON} [obj] JSON object to evaluate against
 * @param {JSONPathCallback} [callback] Passed 3 arguments: 1) desired payload
 *     per `resultType`, 2) `"value"|"property"`, 3) Full returned object with
 *     all payloads
 * @param {OtherTypeCallback} [otherTypeCallback] If `@other()` is at the end
 *   of one's query, this will be invoked with the value of the item, its
 *   path, its parent, and its parent's property name, and it should return
 *   a boolean indicating whether the supplied value belongs to the "other"
 *   type or not (or it may handle transformations and return `false`).
 * @returns {JSONPath}
 * @class
 */
function JSONPath(opts, expr, obj, callback, otherTypeCallback) {
  // eslint-disable-next-line no-restricted-syntax -- Allow for pseudo-class
  if (!(this instanceof JSONPath)) {
    try {
      return new JSONPath(opts, expr, obj, callback, otherTypeCallback);
    } catch (e) {
      if (!e.avoidNew) {
        throw e;
      }
      return e.value;
    }
  }
  if (typeof opts === 'string') {
    otherTypeCallback = callback;
    callback = obj;
    obj = expr;
    expr = opts;
    opts = null;
  }
  const optObj = opts && typeof opts === 'object';
  opts = opts || {};
  this.json = opts.json || obj;
  this.path = opts.path || expr;
  this.resultType = opts.resultType || 'value';
  this.flatten = opts.flatten || false;
  this.wrap = Object.hasOwn(opts, 'wrap') ? opts.wrap : true;
  this.sandbox = opts.sandbox || {};
  this.eval = opts.eval === undefined ? 'safe' : opts.eval;
  this.ignoreEvalErrors = typeof opts.ignoreEvalErrors === 'undefined' ? false : opts.ignoreEvalErrors;
  this.parent = opts.parent || null;
  this.parentProperty = opts.parentProperty || null;
  this.callback = opts.callback || callback || null;
  this.otherTypeCallback = opts.otherTypeCallback || otherTypeCallback || function () {
    throw new TypeError('You must supply an otherTypeCallback callback option ' + 'with the @other() operator.');
  };
  if (opts.autostart !== false) {
    const args = {
      path: optObj ? opts.path : expr
    };
    if (!optObj) {
      args.json = obj;
    } else if ('json' in opts) {
      args.json = opts.json;
    }
    const ret = this.evaluate(args);
    if (!ret || typeof ret !== 'object') {
      throw new NewError(ret);
    }
    return ret;
  }
}

// PUBLIC METHODS
JSONPath.prototype.evaluate = function (expr, json, callback, otherTypeCallback) {
  let currParent = this.parent,
    currParentProperty = this.parentProperty;
  let {
    flatten,
    wrap
  } = this;
  this.currResultType = this.resultType;
  this.currEval = this.eval;
  this.currSandbox = this.sandbox;
  callback = callback || this.callback;
  this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;
  json = json || this.json;
  expr = expr || this.path;
  if (expr && typeof expr === 'object' && !Array.isArray(expr)) {
    if (!expr.path && expr.path !== '') {
      throw new TypeError('You must supply a "path" property when providing an object ' + 'argument to JSONPath.evaluate().');
    }
    if (!Object.hasOwn(expr, 'json')) {
      throw new TypeError('You must supply a "json" property when providing an object ' + 'argument to JSONPath.evaluate().');
    }
    ({
      json
    } = expr);
    flatten = Object.hasOwn(expr, 'flatten') ? expr.flatten : flatten;
    this.currResultType = Object.hasOwn(expr, 'resultType') ? expr.resultType : this.currResultType;
    this.currSandbox = Object.hasOwn(expr, 'sandbox') ? expr.sandbox : this.currSandbox;
    wrap = Object.hasOwn(expr, 'wrap') ? expr.wrap : wrap;
    this.currEval = Object.hasOwn(expr, 'eval') ? expr.eval : this.currEval;
    callback = Object.hasOwn(expr, 'callback') ? expr.callback : callback;
    this.currOtherTypeCallback = Object.hasOwn(expr, 'otherTypeCallback') ? expr.otherTypeCallback : this.currOtherTypeCallback;
    currParent = Object.hasOwn(expr, 'parent') ? expr.parent : currParent;
    currParentProperty = Object.hasOwn(expr, 'parentProperty') ? expr.parentProperty : currParentProperty;
    expr = expr.path;
  }
  currParent = currParent || null;
  currParentProperty = currParentProperty || null;
  if (Array.isArray(expr)) {
    expr = JSONPath.toPathString(expr);
  }
  if (!expr && expr !== '' || !json) {
    return undefined;
  }
  const exprList = JSONPath.toPathArray(expr);
  if (exprList[0] === '$' && exprList.length > 1) {
    exprList.shift();
  }
  this._hasParentSelector = null;
  const result = this._trace(exprList, json, ['$'], currParent, currParentProperty, callback).filter(function (ea) {
    return ea && !ea.isParentSelector;
  });
  if (!result.length) {
    return wrap ? [] : undefined;
  }
  if (!wrap && result.length === 1 && !result[0].hasArrExpr) {
    return this._getPreferredOutput(result[0]);
  }
  return result.reduce((rslt, ea) => {
    const valOrPath = this._getPreferredOutput(ea);
    if (flatten && Array.isArray(valOrPath)) {
      rslt = rslt.concat(valOrPath);
    } else {
      rslt.push(valOrPath);
    }
    return rslt;
  }, []);
};

// PRIVATE METHODS

JSONPath.prototype._getPreferredOutput = function (ea) {
  const resultType = this.currResultType;
  switch (resultType) {
    case 'all':
      {
        const path = Array.isArray(ea.path) ? ea.path : JSONPath.toPathArray(ea.path);
        ea.pointer = JSONPath.toPointer(path);
        ea.path = typeof ea.path === 'string' ? ea.path : JSONPath.toPathString(ea.path);
        return ea;
      }
    case 'value':
    case 'parent':
    case 'parentProperty':
      return ea[resultType];
    case 'path':
      return JSONPath.toPathString(ea[resultType]);
    case 'pointer':
      return JSONPath.toPointer(ea.path);
    default:
      throw new TypeError('Unknown result type');
  }
};
JSONPath.prototype._handleCallback = function (fullRetObj, callback, type) {
  if (callback) {
    const preferredOutput = this._getPreferredOutput(fullRetObj);
    fullRetObj.path = typeof fullRetObj.path === 'string' ? fullRetObj.path : JSONPath.toPathString(fullRetObj.path);
    // eslint-disable-next-line n/callback-return -- No need to return
    callback(preferredOutput, type, fullRetObj);
  }
};

/**
 *
 * @param {string} expr
 * @param {JSONObject} val
 * @param {string} path
 * @param {object|GenericArray} parent
 * @param {string} parentPropName
 * @param {JSONPathCallback} callback
 * @param {boolean} hasArrExpr
 * @param {boolean} literalPriority
 * @returns {ReturnObject|ReturnObject[]}
 */
JSONPath.prototype._trace = function (expr, val, path, parent, parentPropName, callback, hasArrExpr, literalPriority) {
  // No expr to follow? return path and value as the result of
  //  this trace branch
  let retObj;
  if (!expr.length) {
    retObj = {
      path,
      value: val,
      parent,
      parentProperty: parentPropName,
      hasArrExpr
    };
    this._handleCallback(retObj, callback, 'value');
    return retObj;
  }
  const loc = expr[0],
    x = expr.slice(1);

  // We need to gather the return value of recursive trace calls in order to
  // do the parent sel computation.
  const ret = [];
  /**
   *
   * @param {ReturnObject|ReturnObject[]} elems
   * @returns {void}
   */
  function addRet(elems) {
    if (Array.isArray(elems)) {
      // This was causing excessive stack size in Node (with or
      //  without Babel) against our performance test:
      //  `ret.push(...elems);`
      elems.forEach(t => {
        ret.push(t);
      });
    } else {
      ret.push(elems);
    }
  }
  if ((typeof loc !== 'string' || literalPriority) && val && Object.hasOwn(val, loc)) {
    // simple case--directly follow property
    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr));
    // eslint-disable-next-line unicorn/prefer-switch -- Part of larger `if`
  } else if (loc === '*') {
    // all child properties
    this._walk(val, m => {
      addRet(this._trace(x, val[m], push(path, m), val, m, callback, true, true));
    });
  } else if (loc === '..') {
    // all descendent parent properties
    // Check remaining expression with val's immediate children
    addRet(this._trace(x, val, path, parent, parentPropName, callback, hasArrExpr));
    this._walk(val, m => {
      // We don't join m and x here because we only want parents,
      //   not scalar values
      if (typeof val[m] === 'object') {
        // Keep going with recursive descent on val's
        //   object children
        addRet(this._trace(expr.slice(), val[m], push(path, m), val, m, callback, true));
      }
    });
    // The parent sel computation is handled in the frame above using the
    // ancestor object of val
  } else if (loc === '^') {
    // This is not a final endpoint, so we do not invoke the callback here
    this._hasParentSelector = true;
    return {
      path: path.slice(0, -1),
      expr: x,
      isParentSelector: true
    };
  } else if (loc === '~') {
    // property name
    retObj = {
      path: push(path, loc),
      value: parentPropName,
      parent,
      parentProperty: null
    };
    this._handleCallback(retObj, callback, 'property');
    return retObj;
  } else if (loc === '$') {
    // root only
    addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));
  } else if (/^(-?\d*):(-?\d*):?(\d*)$/u.test(loc)) {
    // [start:end:step]  Python slice syntax
    addRet(this._slice(loc, x, val, path, parent, parentPropName, callback));
  } else if (loc.indexOf('?(') === 0) {
    // [?(expr)] (filtering)
    if (this.currEval === false) {
      throw new Error('Eval [?(expr)] prevented in JSONPath expression.');
    }
    const safeLoc = loc.replace(/^\?\((.*?)\)$/u, '$1');
    // check for a nested filter expression
    const nested = /@.?([^?]*)[['](\??\(.*?\))(?!.\)\])[\]']/gu.exec(safeLoc);
    if (nested) {
      // find if there are matches in the nested expression
      // add them to the result set if there is at least one match
      this._walk(val, m => {
        const npath = [nested[2]];
        const nvalue = nested[1] ? val[m][nested[1]] : val[m];
        const filterResults = this._trace(npath, nvalue, path, parent, parentPropName, callback, true);
        if (filterResults.length > 0) {
          addRet(this._trace(x, val[m], push(path, m), val, m, callback, true));
        }
      });
    } else {
      this._walk(val, m => {
        if (this._eval(safeLoc, val[m], m, path, parent, parentPropName)) {
          addRet(this._trace(x, val[m], push(path, m), val, m, callback, true));
        }
      });
    }
  } else if (loc[0] === '(') {
    // [(expr)] (dynamic property/index)
    if (this.currEval === false) {
      throw new Error('Eval [(expr)] prevented in JSONPath expression.');
    }
    // As this will resolve to a property name (but we don't know it
    //  yet), property and parent information is relative to the
    //  parent of the property to which this expression will resolve
    addRet(this._trace(unshift(this._eval(loc, val, path.at(-1), path.slice(0, -1), parent, parentPropName), x), val, path, parent, parentPropName, callback, hasArrExpr));
  } else if (loc[0] === '@') {
    // value type: @boolean(), etc.
    let addType = false;
    const valueType = loc.slice(1, -2);
    switch (valueType) {
      case 'scalar':
        if (!val || !['object', 'function'].includes(typeof val)) {
          addType = true;
        }
        break;
      case 'boolean':
      case 'string':
      case 'undefined':
      case 'function':
        if (typeof val === valueType) {
          addType = true;
        }
        break;
      case 'integer':
        if (Number.isFinite(val) && !(val % 1)) {
          addType = true;
        }
        break;
      case 'number':
        if (Number.isFinite(val)) {
          addType = true;
        }
        break;
      case 'nonFinite':
        if (typeof val === 'number' && !Number.isFinite(val)) {
          addType = true;
        }
        break;
      case 'object':
        if (val && typeof val === valueType) {
          addType = true;
        }
        break;
      case 'array':
        if (Array.isArray(val)) {
          addType = true;
        }
        break;
      case 'other':
        addType = this.currOtherTypeCallback(val, path, parent, parentPropName);
        break;
      case 'null':
        if (val === null) {
          addType = true;
        }
        break;
      /* c8 ignore next 2 */
      default:
        throw new TypeError('Unknown value type ' + valueType);
    }
    if (addType) {
      retObj = {
        path,
        value: val,
        parent,
        parentProperty: parentPropName
      };
      this._handleCallback(retObj, callback, 'value');
      return retObj;
    }
    // `-escaped property
  } else if (loc[0] === '`' && val && Object.hasOwn(val, loc.slice(1))) {
    const locProp = loc.slice(1);
    addRet(this._trace(x, val[locProp], push(path, locProp), val, locProp, callback, hasArrExpr, true));
  } else if (loc.includes(',')) {
    // [name1,name2,...]
    const parts = loc.split(',');
    for (const part of parts) {
      addRet(this._trace(unshift(part, x), val, path, parent, parentPropName, callback, true));
    }
    // simple case--directly follow property
  } else if (!literalPriority && val && Object.hasOwn(val, loc)) {
    addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr, true));
  }

  // We check the resulting values for parent selections. For parent
  // selections we discard the value object and continue the trace with the
  // current val object
  if (this._hasParentSelector) {
    for (let t = 0; t < ret.length; t++) {
      const rett = ret[t];
      if (rett && rett.isParentSelector) {
        const tmp = this._trace(rett.expr, val, rett.path, parent, parentPropName, callback, hasArrExpr);
        if (Array.isArray(tmp)) {
          ret[t] = tmp[0];
          const tl = tmp.length;
          for (let tt = 1; tt < tl; tt++) {
            // eslint-disable-next-line @stylistic/max-len -- Long
            // eslint-disable-next-line sonarjs/updated-loop-counter -- Convenient
            t++;
            ret.splice(t, 0, tmp[tt]);
          }
        } else {
          ret[t] = tmp;
        }
      }
    }
  }
  return ret;
};
JSONPath.prototype._walk = function (val, f) {
  if (Array.isArray(val)) {
    const n = val.length;
    for (let i = 0; i < n; i++) {
      f(i);
    }
  } else if (val && typeof val === 'object') {
    Object.keys(val).forEach(m => {
      f(m);
    });
  }
};
JSONPath.prototype._slice = function (loc, expr, val, path, parent, parentPropName, callback) {
  if (!Array.isArray(val)) {
    return undefined;
  }
  const len = val.length,
    parts = loc.split(':'),
    step = parts[2] && Number.parseInt(parts[2]) || 1;
  let start = parts[0] && Number.parseInt(parts[0]) || 0,
    end = parts[1] && Number.parseInt(parts[1]) || len;
  start = start < 0 ? Math.max(0, start + len) : Math.min(len, start);
  end = end < 0 ? Math.max(0, end + len) : Math.min(len, end);
  const ret = [];
  for (let i = start; i < end; i += step) {
    const tmp = this._trace(unshift(i, expr), val, path, parent, parentPropName, callback, true);
    // Should only be possible to be an array here since first part of
    //   ``unshift(i, expr)` passed in above would not be empty, nor `~`,
    //     nor begin with `@` (as could return objects)
    // This was causing excessive stack size in Node (with or
    //  without Babel) against our performance test: `ret.push(...tmp);`
    tmp.forEach(t => {
      ret.push(t);
    });
  }
  return ret;
};
JSONPath.prototype._eval = function (code, _v, _vname, path, parent, parentPropName) {
  this.currSandbox._$_parentProperty = parentPropName;
  this.currSandbox._$_parent = parent;
  this.currSandbox._$_property = _vname;
  this.currSandbox._$_root = this.json;
  this.currSandbox._$_v = _v;
  const containsPath = code.includes('@path');
  if (containsPath) {
    this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));
  }
  const scriptCacheKey = this.currEval + 'Script:' + code;
  if (!JSONPath.cache[scriptCacheKey]) {
    let script = code.replaceAll('@parentProperty', '_$_parentProperty').replaceAll('@parent', '_$_parent').replaceAll('@property', '_$_property').replaceAll('@root', '_$_root').replaceAll(/@([.\s)[])/gu, '_$_v$1');
    if (containsPath) {
      script = script.replaceAll('@path', '_$_path');
    }
    if (this.currEval === 'safe' || this.currEval === true || this.currEval === undefined) {
      JSONPath.cache[scriptCacheKey] = new this.safeVm.Script(script);
    } else if (this.currEval === 'native') {
      JSONPath.cache[scriptCacheKey] = new this.vm.Script(script);
    } else if (typeof this.currEval === 'function' && this.currEval.prototype && Object.hasOwn(this.currEval.prototype, 'runInNewContext')) {
      const CurrEval = this.currEval;
      JSONPath.cache[scriptCacheKey] = new CurrEval(script);
    } else if (typeof this.currEval === 'function') {
      JSONPath.cache[scriptCacheKey] = {
        runInNewContext: context => this.currEval(script, context)
      };
    } else {
      throw new TypeError(`Unknown "eval" property "${this.currEval}"`);
    }
  }
  try {
    return JSONPath.cache[scriptCacheKey].runInNewContext(this.currSandbox);
  } catch (e) {
    if (this.ignoreEvalErrors) {
      return false;
    }
    throw new Error('jsonPath: ' + e.message + ': ' + code);
  }
};

// PUBLIC CLASS PROPERTIES AND METHODS

// Could store the cache object itself
JSONPath.cache = {};

/**
 * @param {string[]} pathArr Array to convert
 * @returns {string} The path string
 */
JSONPath.toPathString = function (pathArr) {
  const x = pathArr,
    n = x.length;
  let p = '$';
  for (let i = 1; i < n; i++) {
    if (!/^(~|\^|@.*?\(\))$/u.test(x[i])) {
      p += /^[0-9*]+$/u.test(x[i]) ? '[' + x[i] + ']' : "['" + x[i] + "']";
    }
  }
  return p;
};

/**
 * @param {string} pointer JSON Path
 * @returns {string} JSON Pointer
 */
JSONPath.toPointer = function (pointer) {
  const x = pointer,
    n = x.length;
  let p = '';
  for (let i = 1; i < n; i++) {
    if (!/^(~|\^|@.*?\(\))$/u.test(x[i])) {
      p += '/' + x[i].toString().replaceAll('~', '~0').replaceAll('/', '~1');
    }
  }
  return p;
};

/**
 * @param {string} expr Expression to convert
 * @returns {string[]}
 */
JSONPath.toPathArray = function (expr) {
  const {
    cache
  } = JSONPath;
  if (cache[expr]) {
    return cache[expr].concat();
  }
  const subx = [];
  const normalized = expr
  // Properties
  .replaceAll(/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\(\)/gu, ';$&;')
  // Parenthetical evaluations (filtering and otherwise), directly
  //   within brackets or single quotes
  .replaceAll(/[['](\??\(.*?\))[\]'](?!.\])/gu, function ($0, $1) {
    return '[#' + (subx.push($1) - 1) + ']';
  })
  // Escape periods and tildes within properties
  .replaceAll(/\[['"]([^'\]]*)['"]\]/gu, function ($0, prop) {
    return "['" + prop.replaceAll('.', '%@%').replaceAll('~', '%%@@%%') + "']";
  })
  // Properties operator
  .replaceAll('~', ';~;')
  // Split by property boundaries
  .replaceAll(/['"]?\.['"]?(?![^[]*\])|\[['"]?/gu, ';')
  // Reinsert periods within properties
  .replaceAll('%@%', '.')
  // Reinsert tildes within properties
  .replaceAll('%%@@%%', '~')
  // Parent
  .replaceAll(/(?:;)?(\^+)(?:;)?/gu, function ($0, ups) {
    return ';' + ups.split('').join(';') + ';';
  })
  // Descendents
  .replaceAll(/;;;|;;/gu, ';..;')
  // Remove trailing
  .replaceAll(/;$|'?\]|'$/gu, '');
  const exprList = normalized.split(';').map(function (exp) {
    const match = exp.match(/#(\d+)/u);
    return !match || !match[1] ? exp : subx[match[1]];
  });
  cache[expr] = exprList;
  return cache[expr].concat();
};
JSONPath.prototype.safeVm = {
  Script: SafeScript
};

JSONPath.prototype.vm = vm__WEBPACK_IMPORTED_MODULE_0__;




/***/ }),

/***/ "./lib/platform-bible-utils/dist/index.js":
/*!************************************************!*\
  !*** ./lib/platform-bible-utils/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AsyncVariable: () => (/* binding */ Pu),
/* harmony export */   CHAPTER_TYPE: () => (/* binding */ Mt),
/* harmony export */   Collator: () => (/* binding */ Lu),
/* harmony export */   DateTimeFormat: () => (/* binding */ Wr),
/* harmony export */   DocumentCombiner: () => (/* binding */ tn),
/* harmony export */   EventRollingTimeCounter: () => (/* binding */ zu),
/* harmony export */   FIRST_SCR_BOOK_NUM: () => (/* binding */ Rn),
/* harmony export */   FIRST_SCR_CHAPTER_NUM: () => (/* binding */ Pn),
/* harmony export */   FIRST_SCR_VERSE_NUM: () => (/* binding */ Ln),
/* harmony export */   LAST_SCR_BOOK_NUM: () => (/* binding */ _n),
/* harmony export */   Mutex: () => (/* binding */ nn),
/* harmony export */   MutexMap: () => (/* binding */ Hu),
/* harmony export */   NonValidatingDocumentCombiner: () => (/* binding */ Ju),
/* harmony export */   NumberFormat: () => (/* binding */ un),
/* harmony export */   PLATFORM_ERROR_VERSION: () => (/* binding */ It),
/* harmony export */   PlatformEventEmitter: () => (/* binding */ Kr),
/* harmony export */   PromiseChainingMap: () => (/* binding */ Xu),
/* harmony export */   UnsubscriberAsyncList: () => (/* binding */ Yu),
/* harmony export */   UsjReaderWriter: () => (/* binding */ Ee),
/* harmony export */   VERSE_TYPE: () => (/* binding */ Bt),
/* harmony export */   aggregateUnsubscriberAsyncs: () => (/* binding */ Ni),
/* harmony export */   aggregateUnsubscribers: () => (/* binding */ Ai),
/* harmony export */   areUsjContentsEqualExceptWhitespace: () => (/* binding */ vi),
/* harmony export */   at: () => (/* binding */ xt),
/* harmony export */   charAt: () => (/* binding */ Et),
/* harmony export */   codePointAt: () => (/* binding */ Zu),
/* harmony export */   compareScrRefs: () => (/* binding */ Ei),
/* harmony export */   createSyncProxyForAsyncObject: () => (/* binding */ $u),
/* harmony export */   debounce: () => (/* binding */ ku),
/* harmony export */   deepClone: () => (/* binding */ wt),
/* harmony export */   deepEqual: () => (/* binding */ Cu),
/* harmony export */   defaultScrRef: () => (/* binding */ li),
/* harmony export */   deserialize: () => (/* binding */ Tu),
/* harmony export */   endsWith: () => (/* binding */ Tn),
/* harmony export */   ensureArray: () => (/* binding */ qr),
/* harmony export */   escapeStringRegexp: () => (/* binding */ oi),
/* harmony export */   formatBytes: () => (/* binding */ Ti),
/* harmony export */   formatReplacementString: () => (/* binding */ ei),
/* harmony export */   formatReplacementStringToArray: () => (/* binding */ Sn),
/* harmony export */   formatScrRef: () => (/* binding */ Di),
/* harmony export */   formatTimeSpan: () => (/* binding */ wi),
/* harmony export */   getAllObjectFunctionNames: () => (/* binding */ ju),
/* harmony export */   getChaptersForBook: () => (/* binding */ Fn),
/* harmony export */   getCurrentLocale: () => (/* binding */ yi),
/* harmony export */   getErrorMessage: () => (/* binding */ Or),
/* harmony export */   getLocalizeKeyForScrollGroupId: () => (/* binding */ kn),
/* harmony export */   getLocalizeKeysForScrollGroupIds: () => (/* binding */ gi),
/* harmony export */   getLocalizedIdFromBookNumber: () => (/* binding */ di),
/* harmony export */   groupBy: () => (/* binding */ qu),
/* harmony export */   htmlEncode: () => (/* binding */ Ci),
/* harmony export */   includes: () => (/* binding */ On),
/* harmony export */   indexOf: () => (/* binding */ St),
/* harmony export */   isErrorMessageAboutParatextBlockingInternetAccess: () => (/* binding */ Vu),
/* harmony export */   isErrorMessageAboutRegistryAuthFailure: () => (/* binding */ Gu),
/* harmony export */   isLocalizeKey: () => (/* binding */ ii),
/* harmony export */   isPlatformError: () => (/* binding */ Ku),
/* harmony export */   isSerializable: () => (/* binding */ bi),
/* harmony export */   isString: () => (/* binding */ Me),
/* harmony export */   isSubset: () => (/* binding */ yu),
/* harmony export */   isWhiteSpace: () => (/* binding */ mt),
/* harmony export */   lastIndexOf: () => (/* binding */ In),
/* harmony export */   localizedStringsDocumentSchema: () => (/* binding */ xu),
/* harmony export */   menuDocumentSchema: () => (/* binding */ Mu),
/* harmony export */   newGuid: () => (/* binding */ Fu),
/* harmony export */   newPlatformError: () => (/* binding */ Wu),
/* harmony export */   normalize: () => (/* binding */ ti),
/* harmony export */   normalizeScriptureSpaces: () => (/* binding */ Er),
/* harmony export */   offsetBook: () => (/* binding */ fi),
/* harmony export */   offsetChapter: () => (/* binding */ pi),
/* harmony export */   offsetVerse: () => (/* binding */ hi),
/* harmony export */   ordinalCompare: () => (/* binding */ ri),
/* harmony export */   padEnd: () => (/* binding */ ni),
/* harmony export */   padStart: () => (/* binding */ ui),
/* harmony export */   projectSettingsDocumentSchema: () => (/* binding */ Ou),
/* harmony export */   scrRefToBBBCCC: () => (/* binding */ mi),
/* harmony export */   scrRefToBBBCCCVVV: () => (/* binding */ dr),
/* harmony export */   serialize: () => (/* binding */ Sr),
/* harmony export */   settingsDocumentSchema: () => (/* binding */ Iu),
/* harmony export */   slice: () => (/* binding */ pr),
/* harmony export */   split: () => (/* binding */ hr),
/* harmony export */   startsWith: () => (/* binding */ Ur),
/* harmony export */   stringLength: () => (/* binding */ ce),
/* harmony export */   substring: () => (/* binding */ ut),
/* harmony export */   toArray: () => (/* binding */ xn),
/* harmony export */   toKebabCase: () => (/* binding */ ci),
/* harmony export */   transformAndEnsureRegExpArray: () => (/* binding */ si),
/* harmony export */   transformAndEnsureRegExpRegExpArray: () => (/* binding */ ai),
/* harmony export */   wait: () => (/* binding */ en),
/* harmony export */   waitForDuration: () => (/* binding */ Uu)
/* harmony export */ });
/* harmony import */ var async_mutex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! async-mutex */ "./node_modules/async-mutex/index.mjs");
/* harmony import */ var jsonpath_plus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonpath-plus */ "./node_modules/jsonpath-plus/dist/index-node-esm.js");
var Jr = Object.defineProperty;
var Xr = (t, e, n) => e in t ? Jr(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var W = (t, e, n) => Xr(t, typeof e != "symbol" ? e + "" : e, n);


class Pu {
    /**
     * Creates an instance of the class
     *
     * @param variableName Name to use when logging about this variable
     * @param rejectIfNotSettledWithinMS Milliseconds to wait before verifying if the promise was
     *   settled (resolved or rejected); will reject if it has not settled by that time. Use -1 if you
     *   do not want a timeout at all. Defaults to 10000 ms
     */
    constructor(e, n = 1e4) {
        W(this, "variableName");
        W(this, "promiseToValue");
        W(this, "resolver");
        W(this, "rejecter");
        this.variableName = e, this.promiseToValue = new Promise((i, o) => {
            this.resolver = i, this.rejecter = o;
        }), n > 0 && setTimeout(() => {
            this.rejecter && (this.rejecter(`Timeout reached when waiting for ${this.variableName} to settle`), this.complete());
        }, n), Object.seal(this);
    }
    /**
     * Get this variable's promise to a value. This always returns the same promise even after the
     * value has been resolved or rejected.
     *
     * @returns The promise for the value to be set
     */
    get promise() {
        return this.promiseToValue;
    }
    /**
     * A simple way to see if this variable's promise was resolved or rejected already
     *
     * @returns Whether the variable was already resolved or rejected
     */
    get hasSettled() {
        return Object.isFrozen(this);
    }
    /**
     * Resolve this variable's promise to the given value
     *
     * @param value This variable's promise will resolve to this value
     * @param throwIfAlreadySettled Determines whether to throw if the variable was already resolved
     *   or rejected. Defaults to `false`
     */
    resolveToValue(e, n = !1) {
        if (this.resolver)
            console.debug(`${this.variableName} is being resolved now`), this.resolver(e), this.complete();
        else {
            if (n)
                throw Error(`${this.variableName} was already settled`);
            console.debug(`Ignoring subsequent resolution of ${this.variableName}`);
        }
    }
    /**
     * Reject this variable's promise for the value with the given reason
     *
     * @param reason This variable's promise will be rejected with this reason
     * @param throwIfAlreadySettled Determines whether to throw if the variable was already resolved
     *   or rejected. Defaults to `false`
     */
    rejectWithReason(e, n = !1) {
        if (this.rejecter)
            console.debug(`${this.variableName} is being rejected now`), this.rejecter(e), this.complete();
        else {
            if (n)
                throw Error(`${this.variableName} was already settled`);
            console.debug(`Ignoring subsequent rejection of ${this.variableName}`);
        }
    }
    /** Prevent any further updates to this variable */
    complete() {
        this.resolver = void 0, this.rejecter = void 0, Object.freeze(this);
    }
}
class Lu {
    constructor(e, n) {
        W(this, "collator");
        this.collator = new Intl.Collator(e, n);
    }
    /**
     * Compares two strings according to the sort order of this Collator object
     *
     * @param string1 String to compare
     * @param string2 String to compare
     * @returns A number indicating how string1 and string2 compare to each other according to the
     *   sort order of this Collator object. Negative value if string1 comes before string2. Positive
     *   value if string1 comes after string2. 0 if they are considered equal.
     */
    compare(e, n) {
        return this.collator.compare(e, n);
    }
    /**
     * Returns a new object with properties reflecting the locale and collation options computed
     * during initialization of this collator object.
     *
     * @returns ResolvedCollatorOptions object
     */
    resolvedOptions() {
        return this.collator.resolvedOptions();
    }
}
class Wr {
    constructor(e, n) {
        W(this, "dateTimeFormatter");
        this.dateTimeFormatter = new Intl.DateTimeFormat(e, n);
    }
    /**
     * Formats a date according to the locale and formatting option for this DateTimeFormat object
     *
     * @param date The date to format
     * @returns String representing the given date formatted according to the locale and formatting
     *   options of this DateTimeFormat object
     */
    format(e) {
        return this.dateTimeFormatter.format(e);
    }
    /**
     * Formats a date range in the most concise way based on the locales and options provided when
     * instantiating this DateTimeFormat object
     *
     * @param startDate Date object representing start of the date range
     * @param endDate Date object representing the end of the date range
     * @returns String representing the given date range formatted according to the locale and
     *   formatting options of this DateTimeFormat object
     */
    formatRange(e, n) {
        return this.dateTimeFormatter.formatRange(e, n);
    }
    /**
     * Returns an array of locale-specific tokens representing each part of the formatted date range
     * produced by this DateTimeFormat object
     *
     * @param startDate Date object representing start of the date range
     * @param endDate Date object representing the end of the date range
     * @returns Array of DateTimeRangeFormatPart objects
     */
    formatRangeToParts(e, n) {
        return this.dateTimeFormatter.formatRangeToParts(e, n);
    }
    /**
     * Allows locale-aware formatting of strings produced by this DateTimeFormat object
     *
     * @param date The date to format
     * @returns Array of DateTimeFormatPart objects
     */
    formatToParts(e) {
        return this.dateTimeFormatter.formatToParts(e);
    }
    /**
     * Returns a new object with properties reflecting the locale and date and time formatting options
     * computed during initialization of this DateTimeFormat object
     *
     * @returns ResolvedDateTimeFormatOptions object
     */
    resolvedOptions() {
        return this.dateTimeFormatter.resolvedOptions();
    }
}
class Kr {
    constructor() {
        /**
         * Subscribes a function to run when this event is emitted.
         *
         * @param callback Function to run with the event when it is emitted
         * @returns Unsubscriber function to run to stop calling the passed-in function when the event is
         *   emitted
         * @alias event
         */
        W(this, "subscribe", this.event);
        /** All callback functions that will run when this event is emitted. Lazy loaded */
        W(this, "subscriptions");
        /** Event for listeners to subscribe to. Lazy loaded */
        W(this, "lazyEvent");
        /** Whether this emitter has been disposed */
        W(this, "isDisposed", !1);
        /** Disposes of this event, preparing it to release from memory */
        W(this, "dispose", () => this.disposeFn());
        /**
         * Runs the subscriptions for the event
         *
         * @param event Event data to provide to subscribed callbacks
         */
        W(this, "emit", (e) => {
            this.emitFn(e);
        });
    }
    /**
     * Event for listeners to subscribe to. Subscribes a function to run when this event is emitted.
     * Use like `const unsubscriber = event(callback)`
     *
     * @param callback Function to run with the event when it is emitted
     * @returns Unsubscriber function to run to stop calling the passed-in function when the event is
     *   emitted
     */
    get event() {
        return this.assertNotDisposed(), this.lazyEvent || (this.lazyEvent = (e) => {
            if (!e || typeof e != "function")
                throw new Error("Event handler callback must be a function!");
            return this.subscriptions || (this.subscriptions = []), this.subscriptions.push(e), () => {
                if (!this.subscriptions)
                    return !1;
                const n = this.subscriptions.indexOf(e);
                return n < 0 ? !1 : (this.subscriptions.splice(n, 1), !0);
            };
        }), this.lazyEvent;
    }
    /**
     * Function that runs the subscriptions for the event. Added here so children can override emit
     * and still call the base functionality. See NetworkEventEmitter.emit for example
     */
    emitFn(e) {
        this.assertNotDisposed(), [...this.subscriptions ?? []].forEach((i) => i(e));
    }
    /** Check to make sure this emitter is not disposed. Throw if it is */
    assertNotDisposed() {
        if (this.isDisposed)
            throw new Error("Emitter is disposed");
    }
    /**
     * Disposes of this event, preparing it to release from memory. Added here so children can
     * override emit and still call the base functionality.
     */
    disposeFn() {
        return this.assertNotDisposed(), this.isDisposed = !0, this.subscriptions = void 0, this.lazyEvent = void 0, Promise.resolve(!0);
    }
}
function Fu() {
    return "00-0-4-1-000".replace(/[^-]/g, (t) => (
    // @ts-expect-error ts(2363) this works fine
    // eslint-disable-next-line no-bitwise
    ((Math.random() + ~~t) * 65536 >> t).toString(16).padStart(4, "0")));
}
function Me(t) {
    return typeof t == "string" || t instanceof String;
}
function wt(t) {
    return JSON.parse(JSON.stringify(t));
}
function ku(t, e = 300) {
    if (Me(t))
        throw new Error("Tried to debounce a string! Could be XSS");
    let n;
    return (...i) => {
        clearTimeout(n), n = setTimeout(() => t(...i), e);
    };
}
function qu(t, e, n) {
    const i = /* @__PURE__ */ new Map();
    return t.forEach((o) => {
        const a = e(o), h = i.get(a), p = n ? n(o, a) : o;
        h ? h.push(p) : i.set(a, [p]);
    }), i;
}
function Qr(t) {
    return typeof t == "object" && // We're potentially dealing with objects we didn't create, so they might contain `null`
        // eslint-disable-next-line no-null/no-null
        t !== null && "message" in t && // Type assert `error` to check it's `message`.
        // eslint-disable-next-line no-type-assertion/no-type-assertion
        typeof t.message == "string";
}
function Zr(t) {
    if (Qr(t))
        return t;
    try {
        return new Error(JSON.stringify(t));
    }
    catch {
        return new Error(String(t));
    }
}
function Or(t) {
    return Zr(t).message;
}
function en(t) {
    return new Promise((e) => setTimeout(e, t));
}
function Uu(t, e) {
    const n = en(e).then(() => {
    });
    return Promise.any([n, t()]);
}
function ju(t, e = "obj") {
    const n = /* @__PURE__ */ new Set();
    Object.getOwnPropertyNames(t).forEach((o) => {
        try {
            typeof t[o] == "function" && n.add(o);
        }
        catch {
        }
    });
    let i = Object.getPrototypeOf(t);
    for (; i && Object.getPrototypeOf(i);)
        Object.getOwnPropertyNames(i).forEach((o) => {
            try {
                typeof t[o] == "function" && n.add(o);
            }
            catch {
            }
        }), i = Object.getPrototypeOf(i);
    return n;
}
function $u(t, e = {}) {
    return new Proxy(e, {
        get(n, i) {
            return i in n ? n[i] : async (...o) => (await t())[i](...o);
        }
    });
}
function Vu(t) {
    const e = "Bug in Paratext caused attempted access to Internet. Request has been blocked.";
    return Me(t) ? t.includes(e) : Or(t).includes(e);
}
function Gu(t) {
    const e = "401 Unauthorized error while getting shared projects.", n = "User registration is not valid. Cannot retrieve resources from DBL.", i = Me(t) ? t : Or(t);
    return i.includes(e) || i.includes(n);
}
class tn {
    /**
     * Create a DocumentCombiner instance
     *
     * @param baseDocument This is the first document that will be used when composing the output
     * @param options Options used by this object when combining documents
     */
    constructor(e, n) {
        W(this, "baseDocument");
        W(this, "contributions", /* @__PURE__ */ new Map());
        W(this, "latestOutput");
        W(this, "options");
        W(this, "onDidRebuildEmitter", new Kr());
        /** Event that emits to announce that the document has been rebuilt and the output has been updated */
        // Need `onDidRebuildEmitter` to be instantiated before this line
        // eslint-disable-next-line @typescript-eslint/member-ordering
        W(this, "onDidRebuild", this.onDidRebuildEmitter.subscribe);
        this.baseDocument = e, this.options = n, this.updateBaseDocument(e);
    }
    /**
     * Update the starting document for composition process
     *
     * @param baseDocument Base JSON document/JS object that all other documents are added to
     * @returns Recalculated output document given the new starting state and existing other documents
     */
    updateBaseDocument(e) {
        return this.validateBaseDocument(e), this.baseDocument = this.options.copyDocuments ? wt(e) : e, this.baseDocument = this.transformBaseDocumentAfterValidation(this.baseDocument), this.rebuild();
    }
    /**
     * Add or update one of the contribution documents for the composition process
     *
     * Note: the order in which contribution documents are added can be considered indeterminate as it
     * depends on the order in which `Map.forEach` iterates over the contributions. However, the order
     * matters when merging two arrays into one. Also, when `options.ignoreDuplicateProperties` is is
     * `true`, the order also matters when adding the same property to an object that is already
     * provided previously. Please let us know if you have trouble because of indeterminate
     * contribution ordering.
     *
     * @param documentName Name of the contributed document to combine
     * @param document Content of the contributed document to combine
     * @returns Recalculated output document given the new or updated contribution and existing other
     *   documents
     */
    addOrUpdateContribution(e, n) {
        this.validateContribution(e, n);
        const i = this.contributions.get(e);
        let o = this.options.copyDocuments && n ? wt(n) : n;
        o = this.transformContributionAfterValidation(e, o), this.contributions.set(e, o);
        try {
            return this.rebuild();
        }
        catch (a) {
            throw i ? this.contributions.set(e, i) : this.contributions.delete(e), new Error(`Error when setting the document named ${e}: ${a}`);
        }
    }
    /**
     * Delete one of the contribution documents for the composition process
     *
     * @param documentName Name of the contributed document to delete
     * @returns Recalculated output document given the remaining other documents
     */
    deleteContribution(e) {
        const n = this.contributions.get(e);
        if (!n)
            throw new Error(`${e} does not exist`);
        this.contributions.delete(e);
        try {
            return this.rebuild();
        }
        catch (i) {
            throw this.contributions.set(e, n), new Error(`Error when deleting the document named ${e}: ${i}`);
        }
    }
    /**
     * Delete all present contribution documents for the composition process and return to the base
     * document
     *
     * @returns Recalculated output document consisting only of the base document
     */
    deleteAllContributions() {
        if (this.contributions.size <= 0)
            return this.latestOutput;
        const e = [...this.contributions.entries()];
        e.forEach(([n]) => this.contributions.delete(n));
        try {
            return this.rebuild();
        }
        catch (n) {
            throw e.forEach(([i, o]) => this.contributions.set(i, o)), new Error(`Error when deleting all contributions: ${n}`);
        }
    }
    /**
     * Run the document composition process given the starting document and all contributions. Throws
     * if the output document fails to validate properly.
     *
     * @returns Recalculated output document given the starting and contributed documents
     */
    rebuild() {
        if (this.contributions.size === 0) {
            let n = wt(this.baseDocument);
            return n = this.transformFinalOutputBeforeValidation(n), this.validateOutput(n), this.latestOutput = n, this.onDidRebuildEmitter.emit(void 0), this.latestOutput;
        }
        let e = this.baseDocument;
        return this.contributions.forEach((n) => {
            e = rn(e, n, this.options.ignoreDuplicateProperties), this.validateOutput(e);
        }), e = this.transformFinalOutputBeforeValidation(e), this.validateOutput(e), this.latestOutput = e, this.onDidRebuildEmitter.emit(void 0), this.latestOutput;
    }
    /**
     * Transform the starting document that is given to the combiner. This transformation occurs after
     * validating the base document and before combining any contributions.
     *
     * WARNING: If you do not create the combiner with option `copyDocuments: true` or clone inside
     * this method, this method will directly modify the `baseDocument` passed in.
     *
     * @param baseDocument Initial input document. Already validated via `validateBaseDocument`
     * @returns Transformed base document
     */
    // We just don't need `this` here. This is basically a no-op function that is available to child
    // classes to override
    // eslint-disable-next-line @typescript-eslint/class-methods-use-this
    transformBaseDocumentAfterValidation(e) {
        return e;
    }
    /**
     * Transform the contributed document associated with `documentName`. This transformation occurs
     * after validating the contributed document and before combining with other documents.
     *
     * WARNING: If you do not create the combiner with option `copyDocuments: true` or clone inside
     * this method, this method will directly modify the contributed `document` passed in.
     *
     * @param documentName Name of the contributed document to combine
     * @param document Content of the contributed document to combine. Already validated via
     *   `validateContribution`
     * @returns Transformed contributed document
     */
    // We just don't need `this` here. This is basically a no-op function that is available to child
    // classes to override
    // eslint-disable-next-line @typescript-eslint/class-methods-use-this
    transformContributionAfterValidation(e, n) {
        return n;
    }
    /**
     * Throw an error if the provided document is not a valid starting document.
     *
     * @param baseDocument Base JSON document/JS object that all other documents are added to
     */
    // no-op intended to be overridden by child classes. Can't be static
    // @ts-expect-error ts(6133) parameter doesn't need to be used but still needs the right name
    // eslint-disable-next-line @typescript-eslint/class-methods-use-this, @typescript-eslint/no-unused-vars
    validateBaseDocument(e) {
    }
    /**
     * Throw an error if the provided document is not a valid contribution document.
     *
     * @param documentName Name of the contributed document to combine
     * @param document Content of the contributed document to combine
     */
    // no-op intended to be overridden by child classes. Can't be static
    // @ts-expect-error ts(6133) parameter doesn't need to be used but still needs the right name
    // eslint-disable-next-line @typescript-eslint/class-methods-use-this, @typescript-eslint/no-unused-vars
    validateContribution(e, n) {
    }
    /**
     * Throw an error if the provided output is not valid.
     *
     * @param output Output document that could potentially be returned to callers
     */
    // no-op intended to be overridden by child classes. Can't be static
    // @ts-expect-error ts(6133) parameter doesn't need to be used but still needs the right name
    // eslint-disable-next-line @typescript-eslint/class-methods-use-this, @typescript-eslint/no-unused-vars
    validateOutput(e) {
    }
    /**
     * Transform the document that is the composition of the base document and all contribution
     * documents. This is the last step that will be run prior to validation via `validateOutput`
     * before `this.latestOutput` is updated to the new output.
     *
     * @param finalOutput Final output document that could potentially be returned to callers. "Final"
     *   means no further contribution documents will be merged.
     */
    // no-op intended to be overridden by child classes. Can't be static
    // eslint-disable-next-line @typescript-eslint/class-methods-use-this
    transformFinalOutputBeforeValidation(e) {
        return e;
    }
}
function Kt(...t) {
    let e = !0;
    return t.forEach((n) => {
        (!n || typeof n != "object" || Array.isArray(n)) && (e = !1);
    }), e;
}
function Qt(...t) {
    let e = !0;
    return t.forEach((n) => {
        (!n || typeof n != "object" || !Array.isArray(n)) && (e = !1);
    }), e;
}
function rn(t, e, n) {
    const i = wt(t);
    return e ? Ir(i, wt(e), n) : i;
}
function Ir(t, e, n) {
    if (!e)
        return t;
    if (Kt(t, e)) {
        const i = t, o = e;
        Object.keys(o).forEach((a) => {
            if (Object.hasOwn(i, a)) {
                if (Kt(i[a], o[a]))
                    i[a] = Ir(
                    // We know these are objects from the `if` check
                    /* eslint-disable no-type-assertion/no-type-assertion */
                    i[a], o[a], n
                    /* eslint-enable no-type-assertion/no-type-assertion */
                    );
                else if (Qt(i[a], o[a]))
                    i[a] = i[a].concat(o[a]);
                else if (!n)
                    throw new Error(`Cannot merge objects: key "${a}" already exists in the target object`);
            }
            else
                i[a] = o[a];
        });
    }
    else
        Qt(t, e) && t.push(...e);
    return t;
}
class zu {
    /**
     * Create a new instance of the InstanceTimeCounter class
     *
     * @param bufferSize - Maximum number of instances to track
     */
    constructor(e) {
        /** The ring buffer to store times */
        W(this, "ringBuffer");
        /** The size of the ring buffer */
        W(this, "bufferSize");
        /** The next location where a time will be written */
        W(this, "writerIndex");
        /** The location where the first time in the buffer will be read */
        W(this, "readerIndex");
        /** The most recent difference in time between the newest and oldest events */
        W(this, "lastTimeDifference");
        /** How many instances in total have been recorded */
        W(this, "totalInstanceCount");
        this.bufferSize = e, this.ringBuffer = new Array(e).fill(0), this.writerIndex = 0, this.readerIndex = 0, this.lastTimeDifference = 0, this.totalInstanceCount = 0;
    }
    /** Get the total number of instances that have been recorded */
    get totalInstances() {
        return this.totalInstanceCount;
    }
    /** Add a new time measurement for an instance of an event */
    recordInstance() {
        this.totalInstanceCount += 1;
        const e = performance.now();
        this.lastTimeDifference = e - this.ringBuffer[this.readerIndex], this.ringBuffer[this.writerIndex] = e, this.writerIndex += 1, this.writerIndex >= this.bufferSize && (this.writerIndex %= this.bufferSize), this.writerIndex === this.readerIndex && (this.readerIndex += 1, this.readerIndex >= this.bufferSize && (this.readerIndex %= this.bufferSize));
    }
    /**
     * Check if the time between the last N events is less than the provided threshold
     *
     * @param minRollingTimeMs - Minimum time that must have passed when the last N events occurred
     * @returns - True if the threshold is violated, false otherwise
     */
    hasViolatedThreshold(e) {
        return this.totalInstanceCount >= this.bufferSize && this.lastTimeDifference < e;
    }
}
class nn extends async_mutex__WEBPACK_IMPORTED_MODULE_0__.Mutex {
}
class Hu {
    constructor() {
        W(this, "mutexesByID", /* @__PURE__ */ new Map());
    }
    get(e) {
        let n = this.mutexesByID.get(e);
        return n || (n = new nn(), this.mutexesByID.set(e, n), n);
    }
}
class Ju extends tn {
    // Making the protected base constructor public
    // eslint-disable-next-line @typescript-eslint/no-useless-constructor
    constructor(e, n) {
        super(e, n);
    }
    get output() {
        return this.latestOutput;
    }
}
class un {
    constructor(e, n) {
        W(this, "numberFormatter");
        this.numberFormatter = new Intl.NumberFormat(e, n);
    }
    /**
     * Formats a number according to the locale and formatting options of this NumberFormat object
     *
     * @param value Number or BigInt to format
     * @returns String representing the given number formatted according to the locale and formatting
     *   options of this NumberFormat object
     */
    format(e) {
        return this.numberFormatter.format(e);
    }
    /**
     * Formats a range of numbers according to the locale and formatting options of this NumberFormat
     * object
     *
     * @param startRange Number or bigint representing the start of the range
     * @param endRange Number or bigint representing the end of the range
     * @returns String representing the given range of numbers formatted according to the locale and
     *   formatting options of this NumberFormat object
     */
    formatRange(e, n) {
        return this.numberFormatter.formatRange(e, n);
    }
    /**
     * Returns an array of objects containing the locale-specific tokens from which it is possible to
     * build custom strings while preserving the locale-specific parts.
     *
     * @param startRange Number or bigint representing start of the range
     * @param endRange Number or bigint representing end of the range
     * @returns Array of NumberRangeFormatPart objects containing the formatted range of numbers in
     *   parts
     */
    formatRangeToParts(e, n) {
        return this.numberFormatter.formatRangeToParts(e, n);
    }
    /**
     * Allows locale-aware formatting of strings produced by this NumberFormat object
     *
     * @param value Number or bigint to format
     * @returns Array of NumberFormatPart objects containing the formatted number in parts
     */
    formatToParts(e) {
        return this.numberFormatter.formatToParts(e);
    }
    /**
     * Returns a new object with properties reflecting the locale and number formatting options
     * computed during initialization of this NumberFormat object
     *
     * @returns ResolvedNumberFormatOptions object
     */
    resolvedOptions() {
        return this.numberFormatter.resolvedOptions();
    }
}
const on = Promise.resolve();
class Xu {
    /**
     * Creates a new PromiseChainingMap
     *
     * @param logger Object with a `warn` method that will be called when a promise rejects. This
     *   defaults to `console`.
     */
    constructor(e = console) {
        W(this, "map", /* @__PURE__ */ new Map());
        W(this, "logger");
        this.logger = e;
    }
    /**
     * Adds a promise function to the map for a given key. If a promise is already running for the
     * key, the new promise will be chained to the existing one. Once all promises for a key have
     * settled, the map will be cleared for that key.
     *
     * @param key Unique key to identify a distinct promise chain
     * @param promiseFunction Function that returns a promise to add to the chain
     */
    addPromiseFunction(e, n) {
        const i = this.map.get(e);
        this.map.set(e, i ? i.then(n) : n()), this.cleanupPromiseChain(e);
    }
    /**
     * Gets the current promise chain for the given key. This is mostly useful for testing. Normally
     * you should just call {@link addPromiseFunction} and let the map handle the rest.
     *
     * @param key Unique key to identify a distinct promise chain
     * @returns The current promise chain for the key
     */
    get(e) {
        return this.map.get(e);
    }
    /**
     * Configures a promise chain to be removed from the map for the given key after all the promises
     * have settled
     *
     * @param key Unique key to identify a distinct promise chain
     */
    cleanupPromiseChain(e) {
        const n = this.map.get(e);
        if (!n)
            return;
        const i = { promise: on }, o = n.catch((a) => this.logger.warn(`Error in promise for ${e}: ${a.message}`)).finally(() => {
            this.map.get(e) === i.promise && this.map.delete(e);
        });
        i.promise = o, this.map.set(e, o);
    }
}
class Yu {
    constructor(e = "Anonymous") {
        W(this, "unsubscribers", /* @__PURE__ */ new Set());
        this.name = e;
    }
    /**
     * Add unsubscribers to the list. Note that duplicates are not added twice.
     *
     * @param unsubscribers - Objects that were returned from a registration process.
     */
    add(...e) {
        e.forEach((n) => {
            "dispose" in n ? this.unsubscribers.add(n.dispose.bind(n)) : this.unsubscribers.add(n);
        });
    }
    /**
     * Run all unsubscribers added to this list and then clear the list.
     *
     * @returns `true` if all unsubscribers succeeded, `false` otherwise.
     */
    async runAllUnsubscribers() {
        const e = [...this.unsubscribers].map((i) => i()), n = await Promise.all(e);
        return this.unsubscribers.clear(), n.every((i, o) => (i || console.error(`UnsubscriberAsyncList ${this.name}: Unsubscriber at index ${o} failed!`), i));
    }
}
const It = 1;
function Wu(t) {
    if (!t)
        return { message: "", platformErrorVersion: It };
    if (Me(t))
        return { message: t, platformErrorVersion: It };
    if (typeof t == "object" && "message" in t && typeof t.message == "string") {
        const e = {
            message: t.message,
            platformErrorVersion: It
        };
        return Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)), Object.defineProperty(e, "message", { enumerable: !0 }), "stack" in e && Object.defineProperty(e, "stack", { enumerable: !0 }), "cause" in e && Object.defineProperty(e, "cause", { enumerable: !0 }), e;
    }
    return { cause: t, message: "", platformErrorVersion: It };
}
function Ku(t) {
    return !!t && typeof t == "object" && "platformErrorVersion" in t;
}
var an = Object.defineProperty, sn = (t, e, n) => e in t ? an(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, z = (t, e, n) => sn(t, typeof e != "symbol" ? e + "" : e, n);
const it = [
    "GEN",
    "EXO",
    "LEV",
    "NUM",
    "DEU",
    "JOS",
    "JDG",
    "RUT",
    "1SA",
    "2SA",
    // 10
    "1KI",
    "2KI",
    "1CH",
    "2CH",
    "EZR",
    "NEH",
    "EST",
    "JOB",
    "PSA",
    "PRO",
    // 20
    "ECC",
    "SNG",
    "ISA",
    "JER",
    "LAM",
    "EZK",
    "DAN",
    "HOS",
    "JOL",
    "AMO",
    // 30
    "OBA",
    "JON",
    "MIC",
    "NAM",
    "HAB",
    "ZEP",
    "HAG",
    "ZEC",
    "MAL",
    "MAT",
    // 40
    "MRK",
    "LUK",
    "JHN",
    "ACT",
    "ROM",
    "1CO",
    "2CO",
    "GAL",
    "EPH",
    "PHP",
    // 50
    "COL",
    "1TH",
    "2TH",
    "1TI",
    "2TI",
    "TIT",
    "PHM",
    "HEB",
    "JAS",
    "1PE",
    // 60
    "2PE",
    "1JN",
    "2JN",
    "3JN",
    "JUD",
    "REV",
    "TOB",
    "JDT",
    "ESG",
    "WIS",
    // 70
    "SIR",
    "BAR",
    "LJE",
    "S3Y",
    "SUS",
    "BEL",
    "1MA",
    "2MA",
    "3MA",
    "4MA",
    // 80
    "1ES",
    "2ES",
    "MAN",
    "PS2",
    "ODA",
    "PSS",
    "JSA",
    // actual variant text for JOS, now in LXA text
    "JDB",
    // actual variant text for JDG, now in LXA text
    "TBS",
    // actual variant text for TOB, now in LXA text
    "SST",
    // actual variant text for SUS, now in LXA text // 90
    "DNT",
    // actual variant text for DAN, now in LXA text
    "BLT",
    // actual variant text for BEL, now in LXA text
    "XXA",
    "XXB",
    "XXC",
    "XXD",
    "XXE",
    "XXF",
    "XXG",
    "FRT",
    // 100
    "BAK",
    "OTH",
    "3ES",
    // Used previously but really should be 2ES
    "EZA",
    // Used to be called 4ES, but not actually in any known project
    "5EZ",
    // Used to be called 5ES, but not actually in any known project
    "6EZ",
    // Used to be called 6ES, but not actually in any known project
    "INT",
    "CNC",
    "GLO",
    "TDX",
    // 110
    "NDX",
    "DAG",
    "PS3",
    "2BA",
    "LBA",
    "JUB",
    "ENO",
    "1MQ",
    "2MQ",
    "3MQ",
    // 120
    "REP",
    "4BA",
    "LAO"
], $t = [
    "XXA",
    "XXB",
    "XXC",
    "XXD",
    "XXE",
    "XXF",
    "XXG",
    "FRT",
    "BAK",
    "OTH",
    "INT",
    "CNC",
    "GLO",
    "TDX",
    "NDX"
], xr = [
    "Genesis",
    "Exodus",
    "Leviticus",
    "Numbers",
    "Deuteronomy",
    "Joshua",
    "Judges",
    "Ruth",
    "1 Samuel",
    "2 Samuel",
    "1 Kings",
    "2 Kings",
    "1 Chronicles",
    "2 Chronicles",
    "Ezra",
    "Nehemiah",
    "Esther (Hebrew)",
    "Job",
    "Psalms",
    "Proverbs",
    "Ecclesiastes",
    "Song of Songs",
    "Isaiah",
    "Jeremiah",
    "Lamentations",
    "Ezekiel",
    "Daniel (Hebrew)",
    "Hosea",
    "Joel",
    "Amos",
    "Obadiah",
    "Jonah",
    "Micah",
    "Nahum",
    "Habakkuk",
    "Zephaniah",
    "Haggai",
    "Zechariah",
    "Malachi",
    "Matthew",
    "Mark",
    "Luke",
    "John",
    "Acts",
    "Romans",
    "1 Corinthians",
    "2 Corinthians",
    "Galatians",
    "Ephesians",
    "Philippians",
    "Colossians",
    "1 Thessalonians",
    "2 Thessalonians",
    "1 Timothy",
    "2 Timothy",
    "Titus",
    "Philemon",
    "Hebrews",
    "James",
    "1 Peter",
    "2 Peter",
    "1 John",
    "2 John",
    "3 John",
    "Jude",
    "Revelation",
    "Tobit",
    "Judith",
    "Esther Greek",
    "Wisdom of Solomon",
    "Sirach (Ecclesiasticus)",
    "Baruch",
    "Letter of Jeremiah",
    "Song of 3 Young Men",
    "Susanna",
    "Bel and the Dragon",
    "1 Maccabees",
    "2 Maccabees",
    "3 Maccabees",
    "4 Maccabees",
    "1 Esdras (Greek)",
    "2 Esdras (Latin)",
    "Prayer of Manasseh",
    "Psalm 151",
    "Odes",
    "Psalms of Solomon",
    // WARNING, if you change the spelling of the *obsolete* tag be sure to update
    // IsObsolete routine
    "Joshua A. *obsolete*",
    "Judges B. *obsolete*",
    "Tobit S. *obsolete*",
    "Susanna Th. *obsolete*",
    "Daniel Th. *obsolete*",
    "Bel Th. *obsolete*",
    "Extra A",
    "Extra B",
    "Extra C",
    "Extra D",
    "Extra E",
    "Extra F",
    "Extra G",
    "Front Matter",
    "Back Matter",
    "Other Matter",
    "3 Ezra *obsolete*",
    "Apocalypse of Ezra",
    "5 Ezra (Latin Prologue)",
    "6 Ezra (Latin Epilogue)",
    "Introduction",
    "Concordance ",
    "Glossary ",
    "Topical Index",
    "Names Index",
    "Daniel Greek",
    "Psalms 152-155",
    "2 Baruch (Apocalypse)",
    "Letter of Baruch",
    "Jubilees",
    "Enoch",
    "1 Meqabyan",
    "2 Meqabyan",
    "3 Meqabyan",
    "Reproof (Proverbs 25-31)",
    "4 Baruch (Rest of Baruch)",
    "Laodiceans"
], Zt = Dn();
function gt(t, e = !0) {
    return e && (t = t.toUpperCase()), t in Zt ? Zt[t] : 0;
}
function Vt(t) {
    return gt(t) > 0;
}
function cn(t) {
    const e = typeof t == "string" ? gt(t) : t;
    return e >= 40 && e <= 66;
}
function ln(t) {
    return (typeof t == "string" ? gt(t) : t) <= 39;
}
function Mr(t) {
    return t <= 66;
}
function fn(t) {
    const e = typeof t == "string" ? gt(t) : t;
    return _r(e) && !Mr(e);
}
function* pn() {
    for (let t = 1; t <= it.length; t++)
        yield t;
}
const hn = 1, Br = it.length;
function dn() {
    return ["XXA", "XXB", "XXC", "XXD", "XXE", "XXF", "XXG"];
}
function Gt(t, e = "***") {
    const n = t - 1;
    return n < 0 || n >= it.length ? e : it[n];
}
function Rr(t) {
    return t <= 0 || t > Br ? "******" : xr[t - 1];
}
function mn(t) {
    return Rr(gt(t));
}
function _r(t) {
    const e = typeof t == "number" ? Gt(t) : t;
    return Vt(e) && !$t.includes(e);
}
function En(t) {
    const e = typeof t == "number" ? Gt(t) : t;
    return Vt(e) && $t.includes(e);
}
function gn(t) {
    return xr[t - 1].includes("*obsolete*");
}
function Dn() {
    const t = {};
    for (let e = 0; e < it.length; e++)
        t[it[e]] = e + 1;
    return t;
}
const be = {
    allBookIds: it,
    nonCanonicalIds: $t,
    bookIdToNumber: gt,
    isBookIdValid: Vt,
    isBookNT: cn,
    isBookOT: ln,
    isBookOTNT: Mr,
    isBookDC: fn,
    allBookNumbers: pn,
    firstBook: hn,
    lastBook: Br,
    extraBooks: dn,
    bookNumberToId: Gt,
    bookNumberToEnglishName: Rr,
    bookIdToEnglishName: mn,
    isCanonical: _r,
    isExtraMaterial: En,
    isObsolete: gn
};
var Le = /* @__PURE__ */ ((t) => (t[t.Unknown = 0] = "Unknown", t[t.Original = 1] = "Original", t[t.Septuagint = 2] = "Septuagint", t[t.Vulgate = 3] = "Vulgate", t[t.English = 4] = "English", t[t.RussianProtestant = 5] = "RussianProtestant", t[t.RussianOrthodox = 6] = "RussianOrthodox", t))(Le || {});
const Te = class {
    // private versInfo: Versification;
    constructor(e) {
        if (z(this, "name"), z(this, "fullPath"), z(this, "isPresent"), z(this, "hasVerseSegments"), z(this, "isCustomized"), z(this, "baseVersification"), z(this, "scriptureBooks"), z(this, "_type"), e == null)
            throw new Error("Argument undefined");
        typeof e == "string" ? (this.name = e, this._type = Le[e]) : (this._type = e, this.name = Le[e]);
    }
    get type() {
        return this._type;
    }
    equals(e) {
        return !e.type || !this.type ? !1 : e.type === this.type;
    }
};
z(Te, "Original", new Te(Le.Original)), z(Te, "Septuagint", new Te(Le.Septuagint)), z(Te, "Vulgate", new Te(Le.Vulgate)), z(Te, "English", new Te(Le.English)), z(Te, "RussianProtestant", new Te(Le.RussianProtestant)), z(Te, "RussianOrthodox", new Te(Le.RussianOrthodox));
let nt = Te;
function er(t, e) {
    const n = e[0];
    for (let i = 1; i < e.length; i++)
        t = t.split(e[i]).join(n);
    return t.split(n);
}
var Pr = /* @__PURE__ */ ((t) => (t[t.Valid = 0] = "Valid", t[t.UnknownVersification = 1] = "UnknownVersification", t[t.OutOfRange = 2] = "OutOfRange", t[t.VerseOutOfOrder = 3] = "VerseOutOfOrder", t[t.VerseRepeated = 4] = "VerseRepeated", t))(Pr || {});
const De = class Y {
    constructor(e, n, i, o) {
        if (z(this, "firstChapter"), z(this, "lastChapter"), z(this, "lastVerse"), z(this, "hasSegmentsDefined"), z(this, "text"), z(this, "BBBCCCVVVS"), z(this, "longHashCode"), z(this, "versification"), z(this, "rtlMark", "‏"), z(this, "_bookNum", 0), z(this, "_chapterNum", 0), z(this, "_verseNum", 0), z(this, "_verse"), i == null && o == null)
            if (e != null && typeof e == "string") {
                const a = e, h = n != null && n instanceof nt ? n : void 0;
                this.setEmpty(h), this.parse(a);
            }
            else if (e != null && typeof e == "number") {
                const a = n != null && n instanceof nt ? n : void 0;
                this.setEmpty(a), this._verseNum = e % Y.chapterDigitShifter, this._chapterNum = Math.floor(e % Y.bookDigitShifter / Y.chapterDigitShifter), this._bookNum = Math.floor(e / Y.bookDigitShifter);
            }
            else if (n == null)
                if (e != null && e instanceof Y) {
                    const a = e;
                    this._bookNum = a.bookNum, this._chapterNum = a.chapterNum, this._verseNum = a.verseNum, this._verse = a.verse, this.versification = a.versification;
                }
                else {
                    if (e == null)
                        return;
                    const a = e instanceof nt ? e : Y.defaultVersification;
                    this.setEmpty(a);
                }
            else
                throw new Error("VerseRef constructor not supported.");
        else if (e != null && n != null && i != null)
            if (typeof e == "string" && typeof n == "string" && typeof i == "string")
                this.setEmpty(o), this.updateInternal(e, n, i);
            else if (typeof e == "number" && typeof n == "number" && typeof i == "number")
                this._bookNum = e, this._chapterNum = n, this._verseNum = i, this.versification = o ?? Y.defaultVersification;
            else
                throw new Error("VerseRef constructor not supported.");
        else
            throw new Error("VerseRef constructor not supported.");
    }
    /**
     * Determines if the verse string is in a valid format (does not consider versification).
     */
    static isVerseParseable(e) {
        return e.length > 0 && "0123456789".includes(e[0]) && !e.endsWith(this.verseRangeSeparator) && !e.endsWith(this.verseSequenceIndicator);
    }
    /**
     * Tries to parse the specified string into a verse reference.
     * @param str - The string to attempt to parse.
     * @returns success: `true` if the specified string was successfully parsed, `false` otherwise.
     * @returns verseRef: The result of the parse if successful, or empty VerseRef if it failed
     */
    static tryParse(e) {
        let n;
        try {
            return n = new Y(e), { success: !0, verseRef: n };
        }
        catch (i) {
            if (i instanceof Ct)
                return n = new Y(), { success: !1, verseRef: n };
            throw i;
        }
    }
    /**
     * Gets the reference as a comparable integer where the book, chapter, and verse each occupy 3
     * digits.
     * @param bookNum - Book number (this is 1-based, not an index).
     * @param chapterNum - Chapter number.
     * @param verseNum - Verse number.
     * @returns The reference as a comparable integer where the book, chapter, and verse each occupy 3
     * digits.
     */
    static getBBBCCCVVV(e, n, i) {
        return e % Y.bcvMaxValue * Y.bookDigitShifter + (n >= 0 ? n % Y.bcvMaxValue * Y.chapterDigitShifter : 0) + (i >= 0 ? i % Y.bcvMaxValue : 0);
    }
    /**
     * Deserializes a serialized VerseRef.
     * @param serializedVerseRef - Serialized VerseRef to create from.
     * @returns the deserialized VerseRef.
     */
    static fromJSON(e) {
        const { book: n, chapterNum: i, verseNum: o, verse: a, versificationStr: h } = e, p = a || o.toString();
        let f;
        return h && (f = new nt(h)), n ? new Y(n, i.toString(), p, f) : new Y();
    }
    /**
     * Parses a verse string and gets the leading numeric portion as a number.
     * @param verseStr - verse string to parse
     * @returns true if the entire string could be parsed as a single, simple verse number (1-999);
     *    false if the verse string represented a verse bridge, contained segment letters, or was invalid
     */
    static tryGetVerseNum(e) {
        let n;
        if (!e)
            return n = -1, { success: !0, vNum: n };
        n = 0;
        let i;
        for (let o = 0; o < e.length; o++) {
            if (i = e[o], i < "0" || i > "9")
                return o === 0 && (n = -1), { success: !1, vNum: n };
            if (n = n * 10 + +i - 0, n > Y.bcvMaxValue)
                return n = -1, { success: !1, vNum: n };
        }
        return { success: !0, vNum: n };
    }
    /**
     * Checks to see if a VerseRef hasn't been set - all values are the default.
     */
    get isDefault() {
        return this.bookNum === 0 && this.chapterNum === 0 && this.verseNum === 0 && this.versification == null;
    }
    /**
     * Gets whether the verse contains multiple verses.
     */
    get hasMultiple() {
        return this._verse != null && (this._verse.includes(Y.verseRangeSeparator) || this._verse.includes(Y.verseSequenceIndicator));
    }
    /**
     * Gets or sets the book of the reference. Book is the 3-letter abbreviation in capital letters,
     * e.g. `'MAT'`.
     */
    get book() {
        return be.bookNumberToId(this.bookNum, "");
    }
    set book(e) {
        this.bookNum = be.bookIdToNumber(e);
    }
    /**
     * Gets or sets the chapter of the reference,. e.g. `'3'`.
     */
    get chapter() {
        return this.isDefault || this._chapterNum < 0 ? "" : this._chapterNum.toString();
    }
    set chapter(e) {
        const n = +e;
        this._chapterNum = Number.isInteger(n) ? n : -1;
    }
    /**
     * Gets or sets the verse of the reference, including range, segments, and sequences, e.g. `'4'`,
     * or `'4b-5a, 7'`.
     */
    get verse() {
        return this._verse != null ? this._verse : this.isDefault || this._verseNum < 0 ? "" : this._verseNum.toString();
    }
    set verse(e) {
        const { success: n, vNum: i } = Y.tryGetVerseNum(e);
        this._verse = n ? void 0 : e.replace(this.rtlMark, ""), this._verseNum = i, !(this._verseNum >= 0) && ({ vNum: this._verseNum } = Y.tryGetVerseNum(this._verse));
    }
    /**
     * Get or set Book based on book number, e.g. `42`.
     */
    get bookNum() {
        return this._bookNum;
    }
    set bookNum(e) {
        if (e <= 0 || e > be.lastBook)
            throw new Ct("BookNum must be greater than zero and less than or equal to last book");
        this._bookNum = e;
    }
    /**
     * Gets or sets the chapter number, e.g. `3`. `-1` if not valid.
     */
    get chapterNum() {
        return this._chapterNum;
    }
    set chapterNum(e) {
        this.chapterNum = e;
    }
    /**
     * Gets or sets verse start number, e.g. `4`. `-1` if not valid.
     */
    get verseNum() {
        return this._verseNum;
    }
    set verseNum(e) {
        this._verseNum = e;
    }
    /**
     * String representing the versification (should ONLY be used for serialization/deserialization).
     *
     * @remarks This is for backwards compatibility when ScrVers was an enumeration.
     */
    get versificationStr() {
        var e;
        return (e = this.versification) == null ? void 0 : e.name;
    }
    set versificationStr(e) {
        this.versification = this.versification != null ? new nt(e) : void 0;
    }
    /**
     * Determines if the reference is valid.
     */
    get valid() {
        return this.validStatus === 0;
    }
    /**
     * Get the valid status for this reference.
     */
    get validStatus() {
        return this.validateVerse(Y.verseRangeSeparators, Y.verseSequenceIndicators);
    }
    /**
     * Gets the reference as a comparable integer where the book,
     * chapter, and verse each occupy three digits and the verse is 0.
     */
    get BBBCCC() {
        return Y.getBBBCCCVVV(this._bookNum, this._chapterNum, 0);
    }
    /**
     * Gets the reference as a comparable integer where the book,
     * chapter, and verse each occupy three digits. If verse is not null
     * (i.e., this reference represents a complex reference with verse
     * segments or bridge) this cannot be used for an exact comparison.
     */
    get BBBCCCVVV() {
        return Y.getBBBCCCVVV(this._bookNum, this._chapterNum, this._verseNum);
    }
    /**
     * Gets whether the verse is defined as an excluded verse in the versification.
     * Does not handle verse ranges.
     */
    // eslint-disable-next-line @typescript-eslint/class-literal-property-style
    get isExcluded() {
        return !1;
    }
    /**
     * Parses the reference in the specified string.
     * Optionally versification can follow reference as in GEN 3:11/4
     * Throw an exception if
     * - invalid book name
     * - chapter number is missing or not a number
     * - verse number is missing or does not start with a number
     * - versification is invalid
     * @param verseStr - string to parse e.g. 'MAT 3:11'
     */
    parse(e) {
        if (e = e.replace(this.rtlMark, ""), e.includes("/")) {
            const a = e.split("/");
            if (e = a[0], a.length > 1)
                try {
                    const h = +a[1].trim();
                    this.versification = new nt(Le[h]);
                }
                catch {
                    throw new Ct("Invalid reference : " + e);
                }
        }
        const n = e.trim().split(" ");
        if (n.length !== 2)
            throw new Ct("Invalid reference : " + e);
        const i = n[1].split(":"), o = +i[0];
        if (i.length !== 2 || be.bookIdToNumber(n[0]) === 0 || !Number.isInteger(o) || o < 0 || !Y.isVerseParseable(i[1]))
            throw new Ct("Invalid reference : " + e);
        this.updateInternal(n[0], i[0], i[1]);
    }
    /**
     * Simplifies this verse ref so that it has no bridging of verses or
     * verse segments like `'1a'`.
     */
    simplify() {
        this._verse = void 0;
    }
    /**
     * Makes a clone of the reference.
     *
     * @returns The cloned VerseRef.
     */
    clone() {
        return new Y(this);
    }
    toString() {
        const e = this.book;
        return e === "" ? "" : `${e} ${this.chapter}:${this.verse}`;
    }
    toJSON() {
        let e = this.verse;
        (e === "" || e === this.verseNum.toString()) && (e = void 0);
        const n = {
            book: this.book,
            chapterNum: this.chapterNum,
            verseNum: this.verseNum,
            verse: e,
            versificationStr: this.versificationStr
        };
        return e || delete n.verse, n;
    }
    /**
     * Compares this `VerseRef` with supplied one.
     * @param verseRef - object to compare this one to.
     * @returns `true` if this `VerseRef` is equal to the supplied one, `false` otherwise.
     */
    equals(e) {
        return e instanceof Y ? e._bookNum === this._bookNum && e._chapterNum === this._chapterNum && e._verseNum === this._verseNum && e.verse === this.verse && (e.versification == null && this.versification == null || e.versification != null && this.versification != null && e.versification.equals(this.versification)) : !1;
    }
    /**
     * Enumerate all individual verses contained in a VerseRef.
     * Verse ranges are indicated by "-" and consecutive verses by ","s.
     * Examples:
     * GEN 1:2 returns GEN 1:2
     * GEN 1:1a-3b,5 returns GEN 1:1a, GEN 1:2, GEN 1:3b, GEN 1:5
     * GEN 1:2a-2c returns //! ??????
     *
     * @param specifiedVersesOnly - if set to <c>true</c> return only verses that are
     * explicitly specified only, not verses within a range. Defaults to `false`.
     * @param verseRangeSeparators - Verse range separators.
     * Defaults to `VerseRef.verseRangeSeparators`.
     * @param verseSequenceSeparators - Verse sequence separators.
     * Defaults to `VerseRef.verseSequenceIndicators`.
     * @returns An array of all single verse references in this VerseRef.
     */
    allVerses(e = !1, n = Y.verseRangeSeparators, i = Y.verseSequenceIndicators) {
        if (this._verse == null || this.chapterNum <= 0)
            return [this.clone()];
        const o = [], a = er(this._verse, i);
        for (const h of a.map((p) => er(p, n))) {
            const p = this.clone();
            p.verse = h[0];
            const f = p.verseNum;
            if (o.push(p), h.length > 1) {
                const m = this.clone();
                if (m.verse = h[1], !e)
                    for (let E = f + 1; E < m.verseNum; E++) {
                        const l = new Y(this._bookNum, this._chapterNum, E, this.versification);
                        this.isExcluded || o.push(l);
                    }
                o.push(m);
            }
        }
        return o;
    }
    /**
     * Validates a verse number using the supplied separators rather than the defaults.
     */
    validateVerse(e, n) {
        if (!this.verse)
            return this.internalValid;
        let i = 0;
        for (const o of this.allVerses(!0, e, n)) {
            const a = o.internalValid;
            if (a !== 0)
                return a;
            const h = o.BBBCCCVVV;
            if (i > h)
                return 3;
            if (i === h)
                return 4;
            i = h;
        }
        return 0;
    }
    /**
     * Gets whether a single verse reference is valid.
     */
    get internalValid() {
        return this.versification == null ? 1 : this._bookNum <= 0 || this._bookNum > be.lastBook ? 2 : (be.isCanonical(this._bookNum), 0);
    }
    setEmpty(e = Y.defaultVersification) {
        this._bookNum = 0, this._chapterNum = -1, this._verse = void 0, this.versification = e;
    }
    updateInternal(e, n, i) {
        this.bookNum = be.bookIdToNumber(e), this.chapter = n, this.verse = i;
    }
};
z(De, "defaultVersification", nt.English), z(De, "verseRangeSeparator", "-"), z(De, "verseSequenceIndicator", ","), z(De, "verseRangeSeparators", [De.verseRangeSeparator]), z(De, "verseSequenceIndicators", [De.verseSequenceIndicator]), z(De, "chapterDigitShifter", 1e3), z(De, "bookDigitShifter", De.chapterDigitShifter * De.chapterDigitShifter), z(De, "bcvMaxValue", De.chapterDigitShifter - 1), /**
* The valid status of the VerseRef.
*/
    z(De, "ValidStatusType", Pr);
let Lr = De;
class Ct extends Error {
}
var H = {}, se = {}, tr;
function Dt() {
    if (tr)
        return se;
    tr = 1;
    function t(R, k, $) {
        if ($ === void 0 && ($ = Array.prototype), R && typeof $.find == "function")
            return $.find.call(R, k);
        for (var ne = 0; ne < R.length; ne++)
            if (n(R, ne)) {
                var le = R[ne];
                if (k.call(void 0, le, ne, R))
                    return le;
            }
    }
    function e(R, k) {
        return k === void 0 && (k = Object), k && typeof k.getOwnPropertyDescriptors == "function" && (R = k.create(null, k.getOwnPropertyDescriptors(R))), k && typeof k.freeze == "function" ? k.freeze(R) : R;
    }
    function n(R, k) {
        return Object.prototype.hasOwnProperty.call(R, k);
    }
    function i(R, k) {
        if (R === null || typeof R != "object")
            throw new TypeError("target is not an object");
        for (var $ in k)
            n(k, $) && (R[$] = k[$]);
        return R;
    }
    var o = e({
        allowfullscreen: !0,
        async: !0,
        autofocus: !0,
        autoplay: !0,
        checked: !0,
        controls: !0,
        default: !0,
        defer: !0,
        disabled: !0,
        formnovalidate: !0,
        hidden: !0,
        ismap: !0,
        itemscope: !0,
        loop: !0,
        multiple: !0,
        muted: !0,
        nomodule: !0,
        novalidate: !0,
        open: !0,
        playsinline: !0,
        readonly: !0,
        required: !0,
        reversed: !0,
        selected: !0
    });
    function a(R) {
        return n(o, R.toLowerCase());
    }
    var h = e({
        area: !0,
        base: !0,
        br: !0,
        col: !0,
        embed: !0,
        hr: !0,
        img: !0,
        input: !0,
        link: !0,
        meta: !0,
        param: !0,
        source: !0,
        track: !0,
        wbr: !0
    });
    function p(R) {
        return n(h, R.toLowerCase());
    }
    var f = e({
        script: !1,
        style: !1,
        textarea: !0,
        title: !0
    });
    function m(R) {
        var k = R.toLowerCase();
        return n(f, k) && !f[k];
    }
    function E(R) {
        var k = R.toLowerCase();
        return n(f, k) && f[k];
    }
    function l(R) {
        return R === O.HTML;
    }
    function v(R) {
        return l(R) || R === O.XML_XHTML_APPLICATION;
    }
    var O = e({
        /**
         * `text/html`, the only mime type that triggers treating an XML document as HTML.
         *
         * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
         * @see https://en.wikipedia.org/wiki/HTML Wikipedia
         * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
         * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring
         *      WHATWG HTML Spec
         */
        HTML: "text/html",
        /**
         * `application/xml`, the standard mime type for XML documents.
         *
         * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType
         *      registration
         * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
         * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
         */
        XML_APPLICATION: "application/xml",
        /**
         * `text/xml`, an alias for `application/xml`.
         *
         * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
         * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
         * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
         */
        XML_TEXT: "text/xml",
        /**
         * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
         * but is parsed as an XML document.
         *
         * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType
         *      registration
         * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
         * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
         */
        XML_XHTML_APPLICATION: "application/xhtml+xml",
        /**
         * `image/svg+xml`,
         *
         * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
         * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
         * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
         */
        XML_SVG_IMAGE: "image/svg+xml"
    }), b = Object.keys(O).map(function (R) {
        return O[R];
    });
    function C(R) {
        return b.indexOf(R) > -1;
    }
    var j = e({
        /**
         * The XHTML namespace.
         *
         * @see http://www.w3.org/1999/xhtml
         */
        HTML: "http://www.w3.org/1999/xhtml",
        /**
         * The SVG namespace.
         *
         * @see http://www.w3.org/2000/svg
         */
        SVG: "http://www.w3.org/2000/svg",
        /**
         * The `xml:` namespace.
         *
         * @see http://www.w3.org/XML/1998/namespace
         */
        XML: "http://www.w3.org/XML/1998/namespace",
        /**
         * The `xmlns:` namespace.
         *
         * @see https://www.w3.org/2000/xmlns/
         */
        XMLNS: "http://www.w3.org/2000/xmlns/"
    });
    return se.assign = i, se.find = t, se.freeze = e, se.HTML_BOOLEAN_ATTRIBUTES = o, se.HTML_RAW_TEXT_ELEMENTS = f, se.HTML_VOID_ELEMENTS = h, se.hasDefaultHTMLNamespace = v, se.hasOwn = n, se.isHTMLBooleanAttribute = a, se.isHTMLRawTextElement = m, se.isHTMLEscapableRawTextElement = E, se.isHTMLMimeType = l, se.isHTMLVoidElement = p, se.isValidMimeType = C, se.MIME_TYPE = O, se.NAMESPACE = j, se;
}
var dt = {}, rr;
function _t() {
    if (rr)
        return dt;
    rr = 1;
    var t = Dt();
    function e(v, O) {
        v.prototype = Object.create(Error.prototype, {
            constructor: { value: v },
            name: { value: v.name, enumerable: !0, writable: O }
        });
    }
    var n = t.freeze({
        /**
         * the default value as defined by the spec
         */
        Error: "Error",
        /**
         * @deprecated
         * Use RangeError instead.
         */
        IndexSizeError: "IndexSizeError",
        /**
         * @deprecated
         * Just to match the related static code, not part of the spec.
         */
        DomstringSizeError: "DomstringSizeError",
        HierarchyRequestError: "HierarchyRequestError",
        WrongDocumentError: "WrongDocumentError",
        InvalidCharacterError: "InvalidCharacterError",
        /**
         * @deprecated
         * Just to match the related static code, not part of the spec.
         */
        NoDataAllowedError: "NoDataAllowedError",
        NoModificationAllowedError: "NoModificationAllowedError",
        NotFoundError: "NotFoundError",
        NotSupportedError: "NotSupportedError",
        InUseAttributeError: "InUseAttributeError",
        InvalidStateError: "InvalidStateError",
        SyntaxError: "SyntaxError",
        InvalidModificationError: "InvalidModificationError",
        NamespaceError: "NamespaceError",
        /**
         * @deprecated
         * Use TypeError for invalid arguments,
         * "NotSupportedError" DOMException for unsupported operations,
         * and "NotAllowedError" DOMException for denied requests instead.
         */
        InvalidAccessError: "InvalidAccessError",
        /**
         * @deprecated
         * Just to match the related static code, not part of the spec.
         */
        ValidationError: "ValidationError",
        /**
         * @deprecated
         * Use TypeError instead.
         */
        TypeMismatchError: "TypeMismatchError",
        SecurityError: "SecurityError",
        NetworkError: "NetworkError",
        AbortError: "AbortError",
        /**
         * @deprecated
         * Just to match the related static code, not part of the spec.
         */
        URLMismatchError: "URLMismatchError",
        QuotaExceededError: "QuotaExceededError",
        TimeoutError: "TimeoutError",
        InvalidNodeTypeError: "InvalidNodeTypeError",
        DataCloneError: "DataCloneError",
        EncodingError: "EncodingError",
        NotReadableError: "NotReadableError",
        UnknownError: "UnknownError",
        ConstraintError: "ConstraintError",
        DataError: "DataError",
        TransactionInactiveError: "TransactionInactiveError",
        ReadOnlyError: "ReadOnlyError",
        VersionError: "VersionError",
        OperationError: "OperationError",
        NotAllowedError: "NotAllowedError",
        OptOutError: "OptOutError"
    }), i = Object.keys(n);
    function o(v) {
        return typeof v == "number" && v >= 1 && v <= 25;
    }
    function a(v) {
        return typeof v == "string" && v.substring(v.length - n.Error.length) === n.Error;
    }
    function h(v, O) {
        o(v) ? (this.name = i[v], this.message = O || "") : (this.message = v, this.name = a(O) ? O : n.Error), Error.captureStackTrace && Error.captureStackTrace(this, h);
    }
    e(h, !0), Object.defineProperties(h.prototype, {
        code: {
            enumerable: !0,
            get: function () {
                var v = i.indexOf(this.name);
                return o(v) ? v : 0;
            }
        }
    });
    for (var p = {
        INDEX_SIZE_ERR: 1,
        DOMSTRING_SIZE_ERR: 2,
        HIERARCHY_REQUEST_ERR: 3,
        WRONG_DOCUMENT_ERR: 4,
        INVALID_CHARACTER_ERR: 5,
        NO_DATA_ALLOWED_ERR: 6,
        NO_MODIFICATION_ALLOWED_ERR: 7,
        NOT_FOUND_ERR: 8,
        NOT_SUPPORTED_ERR: 9,
        INUSE_ATTRIBUTE_ERR: 10,
        INVALID_STATE_ERR: 11,
        SYNTAX_ERR: 12,
        INVALID_MODIFICATION_ERR: 13,
        NAMESPACE_ERR: 14,
        INVALID_ACCESS_ERR: 15,
        VALIDATION_ERR: 16,
        TYPE_MISMATCH_ERR: 17,
        SECURITY_ERR: 18,
        NETWORK_ERR: 19,
        ABORT_ERR: 20,
        URL_MISMATCH_ERR: 21,
        QUOTA_EXCEEDED_ERR: 22,
        TIMEOUT_ERR: 23,
        INVALID_NODE_TYPE_ERR: 24,
        DATA_CLONE_ERR: 25
    }, f = Object.entries(p), m = 0; m < f.length; m++) {
        var E = f[m][0];
        h[E] = f[m][1];
    }
    function l(v, O) {
        this.message = v, this.locator = O, Error.captureStackTrace && Error.captureStackTrace(this, l);
    }
    return e(l), dt.DOMException = h, dt.DOMExceptionName = n, dt.ExceptionCode = p, dt.ParseError = l, dt;
}
var re = {}, U = {}, nr;
function Fr() {
    if (nr)
        return U;
    nr = 1;
    function t(ue) {
        try {
            typeof ue != "function" && (ue = RegExp);
            var he = new ue("𝌆", "u").exec("𝌆");
            return !!he && he[0].length === 2;
        }
        catch {
        }
        return !1;
    }
    var e = t();
    function n(ue) {
        if (ue.source[0] !== "[")
            throw new Error(ue + " can not be used with chars");
        return ue.source.slice(1, ue.source.lastIndexOf("]"));
    }
    function i(ue, he) {
        if (ue.source[0] !== "[")
            throw new Error("/" + ue.source + "/ can not be used with chars_without");
        if (!he || typeof he != "string")
            throw new Error(JSON.stringify(he) + " is not a valid search");
        if (ue.source.indexOf(he) === -1)
            throw new Error('"' + he + '" is not is /' + ue.source + "/");
        if (he === "-" && ue.source.indexOf(he) !== 1)
            throw new Error('"' + he + '" is not at the first postion of /' + ue.source + "/");
        return new RegExp(ue.source.replace(he, ""), e ? "u" : "");
    }
    function o(ue) {
        var he = this;
        return new RegExp(Array.prototype.slice.call(arguments).map(function (ke) {
            var qe = typeof ke == "string";
            if (qe && he === void 0 && ke === "|")
                throw new Error("use regg instead of reg to wrap expressions with `|`!");
            return qe ? ke : ke.source;
        }).join(""), e ? "mu" : "m");
    }
    function a(ue) {
        if (arguments.length === 0)
            throw new Error("no parameters provided");
        return o.apply(a, ["(?:"].concat(Array.prototype.slice.call(arguments), [")"]));
    }
    var h = "�", p = /[-\x09\x0A\x0D\x20-\x2C\x2E-\uD7FF\uE000-\uFFFD]/;
    e && (p = o("[", n(p), "\\u{10000}-\\u{10FFFF}", "]"));
    var f = /[\x20\x09\x0D\x0A]/, m = n(f), E = o(f, "+"), l = o(f, "*"), v = /[:_a-zA-Z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    e && (v = o("[", n(v), "\\u{10000}-\\u{10FFFF}", "]"));
    var O = n(v), b = o("[", O, n(/[-.0-9\xB7]/), n(/[\u0300-\u036F\u203F-\u2040]/), "]"), C = o(v, b, "*"), j = o(b, "+"), R = o("&", C, ";"), k = a(/&#[0-9]+;|&#x[0-9a-fA-F]+;/), $ = a(R, "|", k), ne = o("%", C, ";"), le = a(o('"', a(/[^%&"]/, "|", ne, "|", $), "*", '"'), "|", o("'", a(/[^%&']/, "|", ne, "|", $), "*", "'")), g = a('"', a(/[^<&"]/, "|", $), "*", '"', "|", "'", a(/[^<&']/, "|", $), "*", "'"), x = i(v, ":"), F = i(b, ":"), G = o(x, F, "*"), K = o(G, a(":", G), "?"), ee = o("^", K, "$"), Ie = o("(", K, ")"), te = a(/"[^"]*"|'[^']*'/), Be = o(/^<\?/, "(", C, ")", a(E, "(", p, "*?)"), "?", /\?>/), d = /[\x20\x0D\x0Aa-zA-Z0-9-'()+,./:=?;!*#@$_%]/, N = a('"', d, '*"', "|", "'", i(d, "'"), "*'"), w = "<!--", y = "-->", M = o(w, a(i(p, "-"), "|", o("-", i(p, "-"))), "*", y), A = "#PCDATA", B = a(o(/\(/, l, A, a(l, /\|/, l, K), "*", l, /\)\*/), "|", o(/\(/, l, A, l, /\)/)), J = /[?*+]?/, _ = o(/\([^>]+\)/, J
    /*regg(choice, '|', seq), _children_quantity*/
    ), T = a("EMPTY", "|", "ANY", "|", B, "|", _), I = "<!ELEMENT", L = o(I, E, a(K, "|", ne), E, a(T, "|", ne), l, ">"), V = o("NOTATION", E, /\(/, l, C, a(l, /\|/, l, C), "*", l, /\)/), fe = o(/\(/, l, j, a(l, /\|/, l, j), "*", l, /\)/), we = a(V, "|", fe), ve = a(/CDATA|ID|IDREF|IDREFS|ENTITY|ENTITIES|NMTOKEN|NMTOKENS/, "|", we), ie = a(/#REQUIRED|#IMPLIED/, "|", a(a("#FIXED", E), "?", g)), P = a(E, C, E, ve, E, ie), $e = "<!ATTLIST", Re = o($e, E, C, P, "*", l, ">"), pe = "about:legacy-compat", Ve = a('"' + pe + '"', "|", "'" + pe + "'"), _e = "SYSTEM", Se = "PUBLIC", Fe = a(a(_e, E, te), "|", a(Se, E, N, E, te)), He = o("^", a(a(_e, E, "(?<SystemLiteralOnly>", te, ")"), "|", a(Se, E, "(?<PubidLiteral>", N, ")", E, "(?<SystemLiteral>", te, ")"))), Je = a(E, "NDATA", E, C), Ce = a(le, "|", a(Fe, Je, "?")), Q = "<!ENTITY", Ge = o(Q, E, C, E, Ce, l, ">"), oe = a(le, "|", Fe), Xe = o(Q, E, "%", E, C, E, oe, l, ">"), vt = a(Ge, "|", Xe), Ye = o(Se, E, N), We = o("<!NOTATION", E, C, E, a(Fe, "|", Ye), l, ">"), q = o(l, "=", l), Z = /1[.]\d+/, Ae = o(E, "version", q, a("'", Z, "'", "|", '"', Z, '"')), Ne = /[A-Za-z][-A-Za-z0-9._]*/, Ke = a(E, "encoding", q, a('"', Ne, '"', "|", "'", Ne, "'")), st = a(E, "standalone", q, a("'", a("yes", "|", "no"), "'", "|", '"', a("yes", "|", "no"), '"')), ct = o(/^<\?xml/, Ae, Ke, "?", st, "?", l, /\?>/), lt = "<!DOCTYPE", At = "<![CDATA[", Nt = "]]>", ft = /<!\[CDATA\[/, Qe = /\]\]>/, pt = o(p, "*?", Qe), Ot = o(ft, pt);
    return U.chars = n, U.chars_without = i, U.detectUnicodeSupport = t, U.reg = o, U.regg = a, U.ABOUT_LEGACY_COMPAT = pe, U.ABOUT_LEGACY_COMPAT_SystemLiteral = Ve, U.AttlistDecl = Re, U.CDATA_START = At, U.CDATA_END = Nt, U.CDSect = Ot, U.Char = p, U.Comment = M, U.COMMENT_START = w, U.COMMENT_END = y, U.DOCTYPE_DECL_START = lt, U.elementdecl = L, U.EntityDecl = vt, U.EntityValue = le, U.ExternalID = Fe, U.ExternalID_match = He, U.Name = C, U.NotationDecl = We, U.Reference = $, U.PEReference = ne, U.PI = Be, U.PUBLIC = Se, U.PubidLiteral = N, U.QName = K, U.QName_exact = ee, U.QName_group = Ie, U.S = E, U.SChar_s = m, U.S_OPT = l, U.SYSTEM = _e, U.SystemLiteral = te, U.UNICODE_REPLACEMENT_CHARACTER = h, U.UNICODE_SUPPORT = e, U.XMLDecl = ct, U;
}
var ur;
function kr() {
    if (ur)
        return re;
    ur = 1;
    var t = Dt(), e = t.find, n = t.hasDefaultHTMLNamespace, i = t.hasOwn, o = t.isHTMLMimeType, a = t.isHTMLRawTextElement, h = t.isHTMLVoidElement, p = t.MIME_TYPE, f = t.NAMESPACE, m = Symbol(), E = _t(), l = E.DOMException, v = E.DOMExceptionName, O = Fr();
    function b(r) {
        if (r !== m)
            throw new TypeError("Illegal constructor");
    }
    function C(r) {
        return r !== "";
    }
    function j(r) {
        return r ? r.split(/[\t\n\f\r ]+/).filter(C) : [];
    }
    function R(r, u) {
        return i(r, u) || (r[u] = !0), r;
    }
    function k(r) {
        if (!r)
            return [];
        var u = j(r);
        return Object.keys(u.reduce(R, {}));
    }
    function $(r) {
        return function (u) {
            return r && r.indexOf(u) !== -1;
        };
    }
    function ne(r) {
        if (!O.QName_exact.test(r))
            throw new l(l.INVALID_CHARACTER_ERR, 'invalid character in qualified name "' + r + '"');
    }
    function le(r, u) {
        ne(u), r = r || null;
        var s = null, c = u;
        if (u.indexOf(":") >= 0) {
            var D = u.split(":");
            s = D[0], c = D[1];
        }
        if (s !== null && r === null)
            throw new l(l.NAMESPACE_ERR, "prefix is non-null and namespace is null");
        if (s === "xml" && r !== t.NAMESPACE.XML)
            throw new l(l.NAMESPACE_ERR, 'prefix is "xml" and namespace is not the XML namespace');
        if ((s === "xmlns" || u === "xmlns") && r !== t.NAMESPACE.XMLNS)
            throw new l(l.NAMESPACE_ERR, 'either qualifiedName or prefix is "xmlns" and namespace is not the XMLNS namespace');
        if (r === t.NAMESPACE.XMLNS && s !== "xmlns" && u !== "xmlns")
            throw new l(l.NAMESPACE_ERR, 'namespace is the XMLNS namespace and neither qualifiedName nor prefix is "xmlns"');
        return [r, s, c];
    }
    function g(r, u) {
        for (var s in r)
            i(r, s) && (u[s] = r[s]);
    }
    function x(r, u) {
        var s = r.prototype;
        if (!(s instanceof u)) {
            let c = function () {
            };
            c.prototype = u.prototype, c = new c(), g(s, c), r.prototype = s = c;
        }
        s.constructor != r && (typeof r != "function" && console.error("unknown Class:" + r), s.constructor = r);
    }
    var F = {}, G = F.ELEMENT_NODE = 1, K = F.ATTRIBUTE_NODE = 2, ee = F.TEXT_NODE = 3, Ie = F.CDATA_SECTION_NODE = 4, te = F.ENTITY_REFERENCE_NODE = 5, Be = F.ENTITY_NODE = 6, d = F.PROCESSING_INSTRUCTION_NODE = 7, N = F.COMMENT_NODE = 8, w = F.DOCUMENT_NODE = 9, y = F.DOCUMENT_TYPE_NODE = 10, M = F.DOCUMENT_FRAGMENT_NODE = 11, A = F.NOTATION_NODE = 12, B = t.freeze({
        DOCUMENT_POSITION_DISCONNECTED: 1,
        DOCUMENT_POSITION_PRECEDING: 2,
        DOCUMENT_POSITION_FOLLOWING: 4,
        DOCUMENT_POSITION_CONTAINS: 8,
        DOCUMENT_POSITION_CONTAINED_BY: 16,
        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32
    });
    function J(r, u) {
        if (u.length < r.length)
            return J(u, r);
        var s = null;
        for (var c in r) {
            if (r[c] !== u[c])
                return s;
            s = r[c];
        }
        return s;
    }
    function _(r) {
        return r.guid || (r.guid = Math.random()), r.guid;
    }
    function T() {
    }
    T.prototype = {
        /**
         * The number of nodes in the list. The range of valid child node indices is 0 to length-1
         * inclusive.
         *
         * @type {number}
         */
        length: 0,
        /**
         * Returns the item at `index`. If index is greater than or equal to the number of nodes in
         * the list, this returns null.
         *
         * @param index
         * Unsigned long Index into the collection.
         * @returns {Node | null}
         * The node at position `index` in the NodeList,
         * or null if that is not a valid index.
         */
        item: function (r) {
            return r >= 0 && r < this.length ? this[r] : null;
        },
        /**
         * Returns a string representation of the NodeList.
         *
         * @param {unknown} nodeFilter
         * __A filter function? Not implemented according to the spec?__.
         * @returns {string}
         * A string representation of the NodeList.
         */
        toString: function (r) {
            for (var u = [], s = 0; s < this.length; s++)
                qe(this[s], u, r);
            return u.join("");
        },
        /**
         * Filters the NodeList based on a predicate.
         *
         * @param {function(Node): boolean} predicate
         * - A predicate function to filter the NodeList.
         * @returns {Node[]}
         * An array of nodes that satisfy the predicate.
         * @private
         */
        filter: function (r) {
            return Array.prototype.filter.call(this, r);
        },
        /**
         * Returns the first index at which a given node can be found in the NodeList, or -1 if it is
         * not present.
         *
         * @param {Node} item
         * - The Node item to locate in the NodeList.
         * @returns {number}
         * The first index of the node in the NodeList; -1 if not found.
         * @private
         */
        indexOf: function (r) {
            return Array.prototype.indexOf.call(this, r);
        }
    }, T.prototype[Symbol.iterator] = function () {
        var r = this, u = 0;
        return {
            next: function () {
                return u < r.length ? {
                    value: r[u++],
                    done: !1
                } : {
                    done: !0
                };
            },
            return: function () {
                return {
                    done: !0
                };
            }
        };
    };
    function I(r, u) {
        this._node = r, this._refresh = u, L(this);
    }
    function L(r) {
        var u = r._node._inc || r._node.ownerDocument._inc;
        if (r._inc !== u) {
            var s = r._refresh(r._node);
            if (Xt(r, "length", s.length), !r.$$length || s.length < r.$$length)
                for (var c = s.length; c in r; c++)
                    i(r, c) && delete r[c];
            g(s, r), r._inc = u;
        }
    }
    I.prototype.item = function (r) {
        return L(this), this[r] || null;
    }, x(I, T);
    function V() {
    }
    function fe(r, u) {
        for (var s = 0; s < r.length;) {
            if (r[s] === u)
                return s;
            s++;
        }
    }
    function we(r, u, s, c) {
        if (c ? u[fe(u, c)] = s : (u[u.length] = s, u.length++), r) {
            s.ownerElement = r;
            var D = r.ownerDocument;
            D && (c && _e(D, r, c), Ve(D, r, s));
        }
    }
    function ve(r, u, s) {
        var c = fe(u, s);
        if (c >= 0) {
            for (var D = u.length - 1; c <= D;)
                u[c] = u[++c];
            if (u.length = D, r) {
                var S = r.ownerDocument;
                S && _e(S, r, s), s.ownerElement = null;
            }
        }
    }
    V.prototype = {
        length: 0,
        item: T.prototype.item,
        /**
         * Get an attribute by name. Note: Name is in lower case in case of HTML namespace and
         * document.
         *
         * @param {string} localName
         * The local name of the attribute.
         * @returns {Attr | null}
         * The attribute with the given local name, or null if no such attribute exists.
         * @see https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name
         */
        getNamedItem: function (r) {
            this._ownerElement && this._ownerElement._isInHTMLDocumentAndNamespace() && (r = r.toLowerCase());
            for (var u = 0; u < this.length;) {
                var s = this[u];
                if (s.nodeName === r)
                    return s;
                u++;
            }
            return null;
        },
        /**
         * Set an attribute.
         *
         * @param {Attr} attr
         * The attribute to set.
         * @returns {Attr | null}
         * The old attribute with the same local name and namespace URI as the new one, or null if no
         * such attribute exists.
         * @throws {DOMException}
         * With code:
         * - {@link INUSE_ATTRIBUTE_ERR} - If the attribute is already an attribute of another
         * element.
         * @see https://dom.spec.whatwg.org/#concept-element-attributes-set
         */
        setNamedItem: function (r) {
            var u = r.ownerElement;
            if (u && u !== this._ownerElement)
                throw new l(l.INUSE_ATTRIBUTE_ERR);
            var s = this.getNamedItemNS(r.namespaceURI, r.localName);
            return s === r ? r : (we(this._ownerElement, this, r, s), s);
        },
        /**
         * Set an attribute, replacing an existing attribute with the same local name and namespace
         * URI if one exists.
         *
         * @param {Attr} attr
         * The attribute to set.
         * @returns {Attr | null}
         * The old attribute with the same local name and namespace URI as the new one, or null if no
         * such attribute exists.
         * @throws {DOMException}
         * Throws a DOMException with the name "InUseAttributeError" if the attribute is already an
         * attribute of another element.
         * @see https://dom.spec.whatwg.org/#concept-element-attributes-set
         */
        setNamedItemNS: function (r) {
            return this.setNamedItem(r);
        },
        /**
         * Removes an attribute specified by the local name.
         *
         * @param {string} localName
         * The local name of the attribute to be removed.
         * @returns {Attr}
         * The attribute node that was removed.
         * @throws {DOMException}
         * With code:
         * - {@link DOMException.NOT_FOUND_ERR} if no attribute with the given name is found.
         * @see https://dom.spec.whatwg.org/#dom-namednodemap-removenameditem
         * @see https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-name
         */
        removeNamedItem: function (r) {
            var u = this.getNamedItem(r);
            if (!u)
                throw new l(l.NOT_FOUND_ERR, r);
            return ve(this._ownerElement, this, u), u;
        },
        /**
         * Removes an attribute specified by the namespace and local name.
         *
         * @param {string | null} namespaceURI
         * The namespace URI of the attribute to be removed.
         * @param {string} localName
         * The local name of the attribute to be removed.
         * @returns {Attr}
         * The attribute node that was removed.
         * @throws {DOMException}
         * With code:
         * - {@link DOMException.NOT_FOUND_ERR} if no attribute with the given namespace URI and local
         * name is found.
         * @see https://dom.spec.whatwg.org/#dom-namednodemap-removenameditemns
         * @see https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-namespace
         */
        removeNamedItemNS: function (r, u) {
            var s = this.getNamedItemNS(r, u);
            if (!s)
                throw new l(l.NOT_FOUND_ERR, r ? r + " : " + u : u);
            return ve(this._ownerElement, this, s), s;
        },
        /**
         * Get an attribute by namespace and local name.
         *
         * @param {string | null} namespaceURI
         * The namespace URI of the attribute.
         * @param {string} localName
         * The local name of the attribute.
         * @returns {Attr | null}
         * The attribute with the given namespace URI and local name, or null if no such attribute
         * exists.
         * @see https://dom.spec.whatwg.org/#concept-element-attributes-get-by-namespace
         */
        getNamedItemNS: function (r, u) {
            r || (r = null);
            for (var s = 0; s < this.length;) {
                var c = this[s];
                if (c.localName === u && c.namespaceURI === r)
                    return c;
                s++;
            }
            return null;
        }
    }, V.prototype[Symbol.iterator] = function () {
        var r = this, u = 0;
        return {
            next: function () {
                return u < r.length ? {
                    value: r[u++],
                    done: !1
                } : {
                    done: !0
                };
            },
            return: function () {
                return {
                    done: !0
                };
            }
        };
    };
    function ie() {
    }
    ie.prototype = {
        /**
         * Test if the DOM implementation implements a specific feature and version, as specified in
         * {@link https://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures DOM Features}.
         *
         * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given
         * feature is supported. The different implementations fairly diverged in what kind of
         * features were reported. The latest version of the spec settled to force this method to
         * always return true, where the functionality was accurate and in use.
         *
         * @deprecated
         * It is deprecated and modern browsers return true in all cases.
         * @function DOMImplementation#hasFeature
         * @param {string} feature
         * The name of the feature to test.
         * @param {string} [version]
         * This is the version number of the feature to test.
         * @returns {boolean}
         * Always returns true.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
         * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
         * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
         * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5CED94D7 DOM Level 3 Core
         */
        hasFeature: function (r, u) {
            return !0;
        },
        /**
         * Creates a DOM Document object of the specified type with its document element. Note that
         * based on the {@link DocumentType}
         * given to create the document, the implementation may instantiate specialized
         * {@link Document} objects that support additional features than the "Core", such as "HTML"
         * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#DOM2HTML DOM Level 2 HTML}.
         * On the other hand, setting the {@link DocumentType} after the document was created makes
         * this very unlikely to happen. Alternatively, specialized {@link Document} creation methods,
         * such as createHTMLDocument
         * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#DOM2HTML DOM Level 2 HTML},
         * can be used to obtain specific types of {@link Document} objects.
         *
         * __It behaves slightly different from the description in the living standard__:
         * - There is no interface/class `XMLDocument`, it returns a `Document`
         * instance (with it's `type` set to `'xml'`).
         * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.
         *
         * @function DOMImplementation.createDocument
         * @param {string | null} namespaceURI
         * The
         * {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-namespaceURI namespace URI}
         * of the document element to create or null.
         * @param {string | null} qualifiedName
         * The
         * {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-qualifiedname qualified name}
         * of the document element to be created or null.
         * @param {DocumentType | null} [doctype=null]
         * The type of document to be created or null. When doctype is not null, its
         * {@link Node#ownerDocument} attribute is set to the document being created. Default is
         * `null`
         * @returns {Document}
         * A new {@link Document} object with its document element. If the NamespaceURI,
         * qualifiedName, and doctype are null, the returned {@link Document} is empty with no
         * document element.
         * @throws {DOMException}
         * With code:
         *
         * - `INVALID_CHARACTER_ERR`: Raised if the specified qualified name is not an XML name
         * according to {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#XML XML 1.0}.
         * - `NAMESPACE_ERR`: Raised if the qualifiedName is malformed, if the qualifiedName has a
         * prefix and the namespaceURI is null, or if the qualifiedName is null and the namespaceURI
         * is different from null, or if the qualifiedName has a prefix that is "xml" and the
         * namespaceURI is different from "{@link http://www.w3.org/XML/1998/namespace}"
         * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#Namespaces XML Namespaces},
         * or if the DOM implementation does not support the "XML" feature but a non-null namespace
         * URI was provided, since namespaces were defined by XML.
         * - `WRONG_DOCUMENT_ERR`: Raised if doctype has already been used with a different document
         * or was created from a different implementation.
         * - `NOT_SUPPORTED_ERR`: May be raised if the implementation does not support the feature
         * "XML" and the language exposed through the Document does not support XML Namespaces (such
         * as {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#HTML40 HTML 4.01}).
         * @since DOM Level 2.
         * @see {@link #createHTMLDocument}
         * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
         * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument DOM Living Standard
         * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-DOM-createDocument DOM
         *      Level 3 Core
         * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM
         *      Level 2 Core (initial)
         */
        createDocument: function (r, u, s) {
            var c = p.XML_APPLICATION;
            r === f.HTML ? c = p.XML_XHTML_APPLICATION : r === f.SVG && (c = p.XML_SVG_IMAGE);
            var D = new pe(m, { contentType: c });
            if (D.implementation = this, D.childNodes = new T(), D.doctype = s || null, s && D.appendChild(s), u) {
                var S = D.createElementNS(r, u);
                D.appendChild(S);
            }
            return D;
        },
        /**
         * Creates an empty DocumentType node. Entity declarations and notations are not made
         * available. Entity reference expansions and default attribute additions do not occur.
         *
         * **This behavior is slightly different from the one in the specs**:
         * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.
         * - `publicId` and `systemId` contain the raw data including any possible quotes,
         *   so they can always be serialized back to the original value
         * - `internalSubset` contains the raw string between `[` and `]` if present,
         *   but is not parsed or validated in any form.
         *
         * @function DOMImplementation#createDocumentType
         * @param {string} qualifiedName
         * The {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-qualifiedname qualified
         * name} of the document type to be created.
         * @param {string} [publicId]
         * The external subset public identifier.
         * @param {string} [systemId]
         * The external subset system identifier.
         * @param {string} [internalSubset]
         * the internal subset or an empty string if it is not present
         * @returns {DocumentType}
         * A new {@link DocumentType} node with {@link Node#ownerDocument} set to null.
         * @throws {DOMException}
         * With code:
         *
         * - `INVALID_CHARACTER_ERR`: Raised if the specified qualified name is not an XML name
         * according to {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#XML XML 1.0}.
         * - `NAMESPACE_ERR`: Raised if the qualifiedName is malformed.
         * - `NOT_SUPPORTED_ERR`: May be raised if the implementation does not support the feature
         * "XML" and the language exposed through the Document does not support XML Namespaces (such
         * as {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#HTML40 HTML 4.01}).
         * @since DOM Level 2.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType
         *      MDN
         * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living
         *      Standard
         * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-3-Core-DOM-createDocType DOM
         *      Level 3 Core
         * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM
         *      Level 2 Core
         * @see https://github.com/xmldom/xmldom/blob/master/CHANGELOG.md#050
         * @see https://www.w3.org/TR/DOM-Level-2-Core/#core-ID-Core-DocType-internalSubset
         * @prettierignore
         */
        createDocumentType: function (r, u, s, c) {
            ne(r);
            var D = new lt(m);
            return D.name = r, D.nodeName = r, D.publicId = u || "", D.systemId = s || "", D.internalSubset = c || "", D.childNodes = new T(), D;
        },
        /**
         * Returns an HTML document, that might already have a basic DOM structure.
         *
         * __It behaves slightly different from the description in the living standard__:
         * - If the first argument is `false` no initial nodes are added (steps 3-7 in the specs are
         * omitted)
         * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.
         *
         * @param {string | false} [title]
         * A string containing the title to give the new HTML document.
         * @returns {Document}
         * The HTML document.
         * @since WHATWG Living Standard.
         * @see {@link #createDocument}
         * @see https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument
         * @see https://dom.spec.whatwg.org/#html-document
         */
        createHTMLDocument: function (r) {
            var u = new pe(m, { contentType: p.HTML });
            if (u.implementation = this, u.childNodes = new T(), r !== !1) {
                u.doctype = this.createDocumentType("html"), u.doctype.ownerDocument = u, u.appendChild(u.doctype);
                var s = u.createElement("html");
                u.appendChild(s);
                var c = u.createElement("head");
                if (s.appendChild(c), typeof r == "string") {
                    var D = u.createElement("title");
                    D.appendChild(u.createTextNode(r)), c.appendChild(D);
                }
                s.appendChild(u.createElement("body"));
            }
            return u;
        }
    };
    function P(r) {
        b(r);
    }
    P.prototype = {
        /**
         * The first child of this node.
         *
         * @type {Node | null}
         */
        firstChild: null,
        /**
         * The last child of this node.
         *
         * @type {Node | null}
         */
        lastChild: null,
        /**
         * The previous sibling of this node.
         *
         * @type {Node | null}
         */
        previousSibling: null,
        /**
         * The next sibling of this node.
         *
         * @type {Node | null}
         */
        nextSibling: null,
        /**
         * The parent node of this node.
         *
         * @type {Node | null}
         */
        parentNode: null,
        /**
         * The parent element of this node.
         *
         * @type {Element | null}
         */
        get parentElement() {
            return this.parentNode && this.parentNode.nodeType === this.ELEMENT_NODE ? this.parentNode : null;
        },
        /**
         * The child nodes of this node.
         *
         * @type {NodeList}
         */
        childNodes: null,
        /**
         * The document object associated with this node.
         *
         * @type {Document | null}
         */
        ownerDocument: null,
        /**
         * The value of this node.
         *
         * @type {string | null}
         */
        nodeValue: null,
        /**
         * The namespace URI of this node.
         *
         * @type {string | null}
         */
        namespaceURI: null,
        /**
         * The prefix of the namespace for this node.
         *
         * @type {string | null}
         */
        prefix: null,
        /**
         * The local part of the qualified name of this node.
         *
         * @type {string | null}
         */
        localName: null,
        /**
         * The baseURI is currently always `about:blank`,
         * since that's what happens when you create a document from scratch.
         *
         * @type {'about:blank'}
         */
        baseURI: "about:blank",
        /**
         * Is true if this node is part of a document.
         *
         * @type {boolean}
         */
        get isConnected() {
            var r = this.getRootNode();
            return r && r.nodeType === r.DOCUMENT_NODE;
        },
        /**
         * Checks whether `other` is an inclusive descendant of this node.
         *
         * @param {Node | null | undefined} other
         * The node to check.
         * @returns {boolean}
         * True if `other` is an inclusive descendant of this node; false otherwise.
         * @see https://dom.spec.whatwg.org/#dom-node-contains
         */
        contains: function (r) {
            if (!r)
                return !1;
            var u = r;
            do {
                if (this === u)
                    return !0;
                u = r.parentNode;
            } while (u);
            return !1;
        },
        /**
         * @typedef GetRootNodeOptions
         * @property {boolean} [composed=false]
         */
        /**
         * Searches for the root node of this node.
         *
         * **This behavior is slightly different from the in the specs**:
         * - ignores `options.composed`, since `ShadowRoot`s are unsupported, always returns root.
         *
         * @param {GetRootNodeOptions} [options]
         * @returns {Node}
         * Root node.
         * @see https://dom.spec.whatwg.org/#dom-node-getrootnode
         * @see https://dom.spec.whatwg.org/#concept-shadow-including-root
         */
        getRootNode: function (r) {
            var u = this;
            do {
                if (!u.parentNode)
                    return u;
                u = u.parentNode;
            } while (u);
        },
        /**
         * Checks whether the given node is equal to this node.
         *
         * @param {Node} [otherNode]
         * @see https://dom.spec.whatwg.org/#concept-node-equals
         */
        isEqualNode: function (r) {
            if (!r || this.nodeType !== r.nodeType)
                return !1;
            switch (this.nodeType) {
                case this.DOCUMENT_TYPE_NODE:
                    if (this.name !== r.name || this.publicId !== r.publicId || this.systemId !== r.systemId)
                        return !1;
                    break;
                case this.ELEMENT_NODE:
                    if (this.namespaceURI !== r.namespaceURI || this.prefix !== r.prefix || this.localName !== r.localName || this.attributes.length !== r.attributes.length)
                        return !1;
                    for (var u = 0; u < this.attributes.length; u++) {
                        var s = this.attributes.item(u);
                        if (!s.isEqualNode(r.getAttributeNodeNS(s.namespaceURI, s.localName)))
                            return !1;
                    }
                    break;
                case this.ATTRIBUTE_NODE:
                    if (this.namespaceURI !== r.namespaceURI || this.localName !== r.localName || this.value !== r.value)
                        return !1;
                    break;
                case this.PROCESSING_INSTRUCTION_NODE:
                    if (this.target !== r.target || this.data !== r.data)
                        return !1;
                    break;
                case this.TEXT_NODE:
                case this.COMMENT_NODE:
                    if (this.data !== r.data)
                        return !1;
                    break;
            }
            if (this.childNodes.length !== r.childNodes.length)
                return !1;
            for (var u = 0; u < this.childNodes.length; u++)
                if (!this.childNodes[u].isEqualNode(r.childNodes[u]))
                    return !1;
            return !0;
        },
        /**
         * Checks whether or not the given node is this node.
         *
         * @param {Node} [otherNode]
         */
        isSameNode: function (r) {
            return this === r;
        },
        /**
         * Inserts a node before a reference node as a child of this node.
         *
         * @param {Node} newChild
         * The new child node to be inserted.
         * @param {Node | null} refChild
         * The reference node before which newChild will be inserted.
         * @returns {Node}
         * The new child node successfully inserted.
         * @throws {DOMException}
         * Throws a DOMException if inserting the node would result in a DOM tree that is not
         * well-formed, or if `child` is provided but is not a child of `parent`.
         * See {@link _insertBefore} for more details.
         * @since Modified in DOM L2
         */
        insertBefore: function (r, u) {
            return q(this, r, u);
        },
        /**
         * Replaces an old child node with a new child node within this node.
         *
         * @param {Node} newChild
         * The new node that is to replace the old node.
         * If it already exists in the DOM, it is removed from its original position.
         * @param {Node} oldChild
         * The existing child node to be replaced.
         * @returns {Node}
         * Returns the replaced child node.
         * @throws {DOMException}
         * Throws a DOMException if replacing the node would result in a DOM tree that is not
         * well-formed, or if `oldChild` is not a child of `this`.
         * This can also occur if the pre-replacement validity assertion fails.
         * See {@link _insertBefore}, {@link Node.removeChild}, and
         * {@link assertPreReplacementValidityInDocument} for more details.
         * @see https://dom.spec.whatwg.org/#concept-node-replace
         */
        replaceChild: function (r, u) {
            q(this, r, u, We), u && this.removeChild(u);
        },
        /**
         * Removes an existing child node from this node.
         *
         * @param {Node} oldChild
         * The child node to be removed.
         * @returns {Node}
         * Returns the removed child node.
         * @throws {DOMException}
         * Throws a DOMException if `oldChild` is not a child of `this`.
         * See {@link _removeChild} for more details.
         */
        removeChild: function (r) {
            return Fe(this, r);
        },
        /**
         * Appends a child node to this node.
         *
         * @param {Node} newChild
         * The child node to be appended to this node.
         * If it already exists in the DOM, it is removed from its original position.
         * @returns {Node}
         * Returns the appended child node.
         * @throws {DOMException}
         * Throws a DOMException if appending the node would result in a DOM tree that is not
         * well-formed, or if `newChild` is not a valid Node.
         * See {@link insertBefore} for more details.
         */
        appendChild: function (r) {
            return this.insertBefore(r, null);
        },
        /**
         * Determines whether this node has any child nodes.
         *
         * @returns {boolean}
         * Returns true if this node has any child nodes, and false otherwise.
         */
        hasChildNodes: function () {
            return this.firstChild != null;
        },
        /**
         * Creates a copy of the calling node.
         *
         * @param {boolean} deep
         * If true, the contents of the node are recursively copied.
         * If false, only the node itself (and its attributes, if it is an element) are copied.
         * @returns {Node}
         * Returns the newly created copy of the node.
         * @throws {DOMException}
         * May throw a DOMException if operations within {@link Element#setAttributeNode} or
         * {@link Node#appendChild} (which are potentially invoked in this method) do not meet their
         * specific constraints.
         * @see {@link cloneNode}
         */
        cloneNode: function (r) {
            return Lt(this.ownerDocument || this, this, r);
        },
        /**
         * Puts the specified node and all of its subtree into a "normalized" form. In a normalized
         * subtree, no text nodes in the subtree are empty and there are no adjacent text nodes.
         *
         * Specifically, this method merges any adjacent text nodes (i.e., nodes for which `nodeType`
         * is `TEXT_NODE`) into a single node with the combined data. It also removes any empty text
         * nodes.
         *
         * This method operates recursively, so it also normalizes any and all descendent nodes within
         * the subtree.
         *
         * @throws {DOMException}
         * May throw a DOMException if operations within removeChild or appendData (which are
         * potentially invoked in this method) do not meet their specific constraints.
         * @since Modified in DOM Level 2
         * @see {@link Node.removeChild}
         * @see {@link CharacterData.appendData}
         */
        normalize: function () {
            for (var r = this.firstChild; r;) {
                var u = r.nextSibling;
                u && u.nodeType == ee && r.nodeType == ee ? (this.removeChild(u), r.appendData(u.data)) : (r.normalize(), r = u);
            }
        },
        /**
         * Checks whether the DOM implementation implements a specific feature and its version.
         *
         * @deprecated
         * Since `DOMImplementation.hasFeature` is deprecated and always returns true.
         * @param {string} feature
         * The package name of the feature to test. This is the same name that can be passed to the
         * method `hasFeature` on `DOMImplementation`.
         * @param {string} version
         * This is the version number of the package name to test.
         * @returns {boolean}
         * Returns true in all cases in the current implementation.
         * @since Introduced in DOM Level 2
         * @see {@link DOMImplementation.hasFeature}
         */
        isSupported: function (r, u) {
            return this.ownerDocument.implementation.hasFeature(r, u);
        },
        /**
         * Look up the prefix associated to the given namespace URI, starting from this node.
         * **The default namespace declarations are ignored by this method.**
         * See Namespace Prefix Lookup for details on the algorithm used by this method.
         *
         * **This behavior is different from the in the specs**:
         * - no node type specific handling
         * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes
         *
         * @param {string | null} namespaceURI
         * The namespace URI for which to find the associated prefix.
         * @returns {string | null}
         * The associated prefix, if found; otherwise, null.
         * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
         * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
         * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
         * @see https://github.com/xmldom/xmldom/issues/322
         * @prettierignore
         */
        lookupPrefix: function (r) {
            for (var u = this; u;) {
                var s = u._nsMap;
                if (s) {
                    for (var c in s)
                        if (i(s, c) && s[c] === r)
                            return c;
                }
                u = u.nodeType == K ? u.ownerDocument : u.parentNode;
            }
            return null;
        },
        /**
         * This function is used to look up the namespace URI associated with the given prefix,
         * starting from this node.
         *
         * **This behavior is different from the in the specs**:
         * - no node type specific handling
         * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes
         *
         * @param {string | null} prefix
         * The prefix for which to find the associated namespace URI.
         * @returns {string | null}
         * The associated namespace URI, if found; otherwise, null.
         * @since DOM Level 3
         * @see https://dom.spec.whatwg.org/#dom-node-lookupnamespaceuri
         * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespaceURI
         * @prettierignore
         */
        lookupNamespaceURI: function (r) {
            for (var u = this; u;) {
                var s = u._nsMap;
                if (s && i(s, r))
                    return s[r];
                u = u.nodeType == K ? u.ownerDocument : u.parentNode;
            }
            return null;
        },
        /**
         * Determines whether the given namespace URI is the default namespace.
         *
         * The function works by looking up the prefix associated with the given namespace URI. If no
         * prefix is found (i.e., the namespace URI is not registered in the namespace map of this
         * node or any of its ancestors), it returns `true`, implying the namespace URI is considered
         * the default.
         *
         * **This behavior is different from the in the specs**:
         * - no node type specific handling
         * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes
         *
         * @param {string | null} namespaceURI
         * The namespace URI to be checked.
         * @returns {boolean}
         * Returns true if the given namespace URI is the default namespace, false otherwise.
         * @since DOM Level 3
         * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isDefaultNamespace
         * @see https://dom.spec.whatwg.org/#dom-node-isdefaultnamespace
         * @prettierignore
         */
        isDefaultNamespace: function (r) {
            var u = this.lookupPrefix(r);
            return u == null;
        },
        /**
         * Compares the reference node with a node with regard to their position in the document and
         * according to the document order.
         *
         * @param {Node} other
         * The node to compare the reference node to.
         * @returns {number}
         * Returns how the node is positioned relatively to the reference node according to the
         * bitmask. 0 if reference node and given node are the same.
         * @since DOM Level 3
         * @see https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-compare
         * @see https://dom.spec.whatwg.org/#dom-node-comparedocumentposition
         */
        compareDocumentPosition: function (r) {
            if (this === r)
                return 0;
            var u = r, s = this, c = null, D = null;
            if (u instanceof Ae && (c = u, u = c.ownerElement), s instanceof Ae && (D = s, s = D.ownerElement, c && u && s === u))
                for (var S = 0, X; X = s.attributes[S]; S++) {
                    if (X === c)
                        return B.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + B.DOCUMENT_POSITION_PRECEDING;
                    if (X === D)
                        return B.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + B.DOCUMENT_POSITION_FOLLOWING;
                }
            if (!u || !s || s.ownerDocument !== u.ownerDocument)
                return B.DOCUMENT_POSITION_DISCONNECTED + B.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + (_(s.ownerDocument) > _(u.ownerDocument) ? B.DOCUMENT_POSITION_FOLLOWING : B.DOCUMENT_POSITION_PRECEDING);
            if (D && u === s)
                return B.DOCUMENT_POSITION_CONTAINS + B.DOCUMENT_POSITION_PRECEDING;
            if (c && u === s)
                return B.DOCUMENT_POSITION_CONTAINED_BY + B.DOCUMENT_POSITION_FOLLOWING;
            for (var ae = [], de = u.parentNode; de;) {
                if (!D && de === s)
                    return B.DOCUMENT_POSITION_CONTAINED_BY + B.DOCUMENT_POSITION_FOLLOWING;
                ae.push(de), de = de.parentNode;
            }
            ae.reverse();
            for (var ye = [], ge = s.parentNode; ge;) {
                if (!c && ge === u)
                    return B.DOCUMENT_POSITION_CONTAINS + B.DOCUMENT_POSITION_PRECEDING;
                ye.push(ge), ge = ge.parentNode;
            }
            ye.reverse();
            var Ze = J(ae, ye);
            for (var Ue in Ze.childNodes) {
                var Oe = Ze.childNodes[Ue];
                if (Oe === s)
                    return B.DOCUMENT_POSITION_FOLLOWING;
                if (Oe === u)
                    return B.DOCUMENT_POSITION_PRECEDING;
                if (ye.indexOf(Oe) >= 0)
                    return B.DOCUMENT_POSITION_FOLLOWING;
                if (ae.indexOf(Oe) >= 0)
                    return B.DOCUMENT_POSITION_PRECEDING;
            }
            return 0;
        }
    };
    function $e(r) {
        return r == "<" && "&lt;" || r == ">" && "&gt;" || r == "&" && "&amp;" || r == '"' && "&quot;" || "&#" + r.charCodeAt() + ";";
    }
    g(F, P), g(F, P.prototype), g(B, P), g(B, P.prototype);
    function Re(r, u) {
        if (u(r))
            return !0;
        if (r = r.firstChild)
            do
                if (Re(r, u))
                    return !0;
            while (r = r.nextSibling);
    }
    function pe(r, u) {
        b(r);
        var s = u || {};
        this.ownerDocument = this, this.contentType = s.contentType || p.XML_APPLICATION, this.type = o(this.contentType) ? "html" : "xml";
    }
    function Ve(r, u, s) {
        r && r._inc++;
        var c = s.namespaceURI;
        c === f.XMLNS && (u._nsMap[s.prefix ? s.localName : ""] = s.value);
    }
    function _e(r, u, s, c) {
        r && r._inc++;
        var D = s.namespaceURI;
        D === f.XMLNS && delete u._nsMap[s.prefix ? s.localName : ""];
    }
    function Se(r, u, s) {
        if (r && r._inc) {
            r._inc++;
            var c = u.childNodes;
            if (s && !s.nextSibling)
                c[c.length++] = s;
            else {
                for (var D = u.firstChild, S = 0; D;)
                    c[S++] = D, D = D.nextSibling;
                c.length = S, delete c[c.length];
            }
        }
    }
    function Fe(r, u) {
        if (r !== u.parentNode)
            throw new l(l.NOT_FOUND_ERR, "child's parent is not parent");
        var s = u.previousSibling, c = u.nextSibling;
        return s ? s.nextSibling = c : r.firstChild = c, c ? c.previousSibling = s : r.lastChild = s, Se(r.ownerDocument, r), u.parentNode = null, u.previousSibling = null, u.nextSibling = null, u;
    }
    function He(r) {
        return r && (r.nodeType === P.DOCUMENT_NODE || r.nodeType === P.DOCUMENT_FRAGMENT_NODE || r.nodeType === P.ELEMENT_NODE);
    }
    function Je(r) {
        return r && (r.nodeType === P.CDATA_SECTION_NODE || r.nodeType === P.COMMENT_NODE || r.nodeType === P.DOCUMENT_FRAGMENT_NODE || r.nodeType === P.DOCUMENT_TYPE_NODE || r.nodeType === P.ELEMENT_NODE || r.nodeType === P.PROCESSING_INSTRUCTION_NODE || r.nodeType === P.TEXT_NODE);
    }
    function Ce(r) {
        return r && r.nodeType === P.DOCUMENT_TYPE_NODE;
    }
    function Q(r) {
        return r && r.nodeType === P.ELEMENT_NODE;
    }
    function Ge(r) {
        return r && r.nodeType === P.TEXT_NODE;
    }
    function oe(r, u) {
        var s = r.childNodes || [];
        if (e(s, Q) || Ce(u))
            return !1;
        var c = e(s, Ce);
        return !(u && c && s.indexOf(c) > s.indexOf(u));
    }
    function Xe(r, u) {
        var s = r.childNodes || [];
        function c(S) {
            return Q(S) && S !== u;
        }
        if (e(s, c))
            return !1;
        var D = e(s, Ce);
        return !(u && D && s.indexOf(D) > s.indexOf(u));
    }
    function vt(r, u, s) {
        if (!He(r))
            throw new l(l.HIERARCHY_REQUEST_ERR, "Unexpected parent node type " + r.nodeType);
        if (s && s.parentNode !== r)
            throw new l(l.NOT_FOUND_ERR, "child not in parent");
        if (
        // 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
        !Je(u) || // 5. If either `node` is a Text node and `parent` is a document,
            // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
            // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
            // or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
            Ce(u) && r.nodeType !== P.DOCUMENT_NODE)
            throw new l(l.HIERARCHY_REQUEST_ERR, "Unexpected node type " + u.nodeType + " for parent node type " + r.nodeType);
    }
    function Ye(r, u, s) {
        var c = r.childNodes || [], D = u.childNodes || [];
        if (u.nodeType === P.DOCUMENT_FRAGMENT_NODE) {
            var S = D.filter(Q);
            if (S.length > 1 || e(D, Ge))
                throw new l(l.HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
            if (S.length === 1 && !oe(r, s))
                throw new l(l.HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
        }
        if (Q(u) && !oe(r, s))
            throw new l(l.HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
        if (Ce(u)) {
            if (e(c, Ce))
                throw new l(l.HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
            var X = e(c, Q);
            if (s && c.indexOf(X) < c.indexOf(s))
                throw new l(l.HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
            if (!s && X)
                throw new l(l.HIERARCHY_REQUEST_ERR, "Doctype can not be appended since element is present");
        }
    }
    function We(r, u, s) {
        var c = r.childNodes || [], D = u.childNodes || [];
        if (u.nodeType === P.DOCUMENT_FRAGMENT_NODE) {
            var S = D.filter(Q);
            if (S.length > 1 || e(D, Ge))
                throw new l(l.HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
            if (S.length === 1 && !Xe(r, s))
                throw new l(l.HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
        }
        if (Q(u) && !Xe(r, s))
            throw new l(l.HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
        if (Ce(u)) {
            if (e(c, function (de) {
                return Ce(de) && de !== s;
            }))
                throw new l(l.HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
            var X = e(c, Q);
            if (s && c.indexOf(X) < c.indexOf(s))
                throw new l(l.HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
        }
    }
    function q(r, u, s, c) {
        vt(r, u, s), r.nodeType === P.DOCUMENT_NODE && (c || Ye)(r, u, s);
        var D = u.parentNode;
        if (D && D.removeChild(u), u.nodeType === M) {
            var S = u.firstChild;
            if (S == null)
                return u;
            var X = u.lastChild;
        }
        else
            S = X = u;
        var ae = s ? s.previousSibling : r.lastChild;
        S.previousSibling = ae, X.nextSibling = s, ae ? ae.nextSibling = S : r.firstChild = S, s == null ? r.lastChild = X : s.previousSibling = X;
        do
            S.parentNode = r;
        while (S !== X && (S = S.nextSibling));
        return Se(r.ownerDocument || r, r, u), u.nodeType == M && (u.firstChild = u.lastChild = null), u;
    }
    pe.prototype = {
        /**
         * The implementation that created this document.
         *
         * @type DOMImplementation
         * @readonly
         */
        implementation: null,
        nodeName: "#document",
        nodeType: w,
        /**
         * The DocumentType node of the document.
         *
         * @type DocumentType
         * @readonly
         */
        doctype: null,
        documentElement: null,
        _inc: 1,
        insertBefore: function (r, u) {
            if (r.nodeType === M) {
                for (var s = r.firstChild; s;) {
                    var c = s.nextSibling;
                    this.insertBefore(s, u), s = c;
                }
                return r;
            }
            return q(this, r, u), r.ownerDocument = this, this.documentElement === null && r.nodeType === G && (this.documentElement = r), r;
        },
        removeChild: function (r) {
            var u = Fe(this, r);
            return u === this.documentElement && (this.documentElement = null), u;
        },
        replaceChild: function (r, u) {
            q(this, r, u, We), r.ownerDocument = this, u && this.removeChild(u), Q(r) && (this.documentElement = r);
        },
        // Introduced in DOM Level 2:
        importNode: function (r, u) {
            return Jt(this, r, u);
        },
        // Introduced in DOM Level 2:
        getElementById: function (r) {
            var u = null;
            return Re(this.documentElement, function (s) {
                if (s.nodeType == G && s.getAttribute("id") == r)
                    return u = s, !0;
            }), u;
        },
        /**
         * Creates a new `Element` that is owned by this `Document`.
         * In HTML Documents `localName` is the lower cased `tagName`,
         * otherwise no transformation is being applied.
         * When `contentType` implies the HTML namespace, it will be set as `namespaceURI`.
         *
         * __This implementation differs from the specification:__ - The provided name is not checked
         * against the `Name` production,
         * so no related error will be thrown.
         * - There is no interface `HTMLElement`, it is always an `Element`.
         * - There is no support for a second argument to indicate using custom elements.
         *
         * @param {string} tagName
         * @returns {Element}
         * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
         * @see https://dom.spec.whatwg.org/#dom-document-createelement
         * @see https://dom.spec.whatwg.org/#concept-create-element
         */
        createElement: function (r) {
            var u = new Z(m);
            u.ownerDocument = this, this.type === "html" && (r = r.toLowerCase()), n(this.contentType) && (u.namespaceURI = f.HTML), u.nodeName = r, u.tagName = r, u.localName = r, u.childNodes = new T();
            var s = u.attributes = new V();
            return s._ownerElement = u, u;
        },
        /**
         * @returns {DocumentFragment}
         */
        createDocumentFragment: function () {
            var r = new Qe(m);
            return r.ownerDocument = this, r.childNodes = new T(), r;
        },
        /**
         * @param {string} data
         * @returns {Text}
         */
        createTextNode: function (r) {
            var u = new Ke(m);
            return u.ownerDocument = this, u.childNodes = new T(), u.appendData(r), u;
        },
        /**
         * @param {string} data
         * @returns {Comment}
         */
        createComment: function (r) {
            var u = new st(m);
            return u.ownerDocument = this, u.childNodes = new T(), u.appendData(r), u;
        },
        /**
         * @param {string} data
         * @returns {CDATASection}
         */
        createCDATASection: function (r) {
            var u = new ct(m);
            return u.ownerDocument = this, u.childNodes = new T(), u.appendData(r), u;
        },
        /**
         * @param {string} target
         * @param {string} data
         * @returns {ProcessingInstruction}
         */
        createProcessingInstruction: function (r, u) {
            var s = new pt(m);
            return s.ownerDocument = this, s.childNodes = new T(), s.nodeName = s.target = r, s.nodeValue = s.data = u, s;
        },
        /**
         * Creates an `Attr` node that is owned by this document.
         * In HTML Documents `localName` is the lower cased `name`,
         * otherwise no transformation is being applied.
         *
         * __This implementation differs from the specification:__ - The provided name is not checked
         * against the `Name` production,
         * so no related error will be thrown.
         *
         * @param {string} name
         * @returns {Attr}
         * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute
         * @see https://dom.spec.whatwg.org/#dom-document-createattribute
         */
        createAttribute: function (r) {
            if (!O.QName_exact.test(r))
                throw new l(l.INVALID_CHARACTER_ERR, 'invalid character in name "' + r + '"');
            return this.type === "html" && (r = r.toLowerCase()), this._createAttribute(r);
        },
        _createAttribute: function (r) {
            var u = new Ae(m);
            return u.ownerDocument = this, u.childNodes = new T(), u.name = r, u.nodeName = r, u.localName = r, u.specified = !0, u;
        },
        /**
         * Creates an EntityReference object.
         * The current implementation does not fill the `childNodes` with those of the corresponding
         * `Entity`
         *
         * @deprecated
         * In DOM Level 4.
         * @param {string} name
         * The name of the entity to reference. No namespace well-formedness checks are performed.
         * @returns {EntityReference}
         * @throws {DOMException}
         * With code `INVALID_CHARACTER_ERR` when `name` is not valid.
         * @throws {DOMException}
         * with code `NOT_SUPPORTED_ERR` when the document is of type `html`
         * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-392B75AE
         */
        createEntityReference: function (r) {
            if (!O.Name.test(r))
                throw new l(l.INVALID_CHARACTER_ERR, 'not a valid xml name "' + r + '"');
            if (this.type === "html")
                throw new l("document is an html document", v.NotSupportedError);
            var u = new ft(m);
            return u.ownerDocument = this, u.childNodes = new T(), u.nodeName = r, u;
        },
        // Introduced in DOM Level 2:
        /**
         * @param {string} namespaceURI
         * @param {string} qualifiedName
         * @returns {Element}
         */
        createElementNS: function (r, u) {
            var s = le(r, u), c = new Z(m), D = c.attributes = new V();
            return c.childNodes = new T(), c.ownerDocument = this, c.nodeName = u, c.tagName = u, c.namespaceURI = s[0], c.prefix = s[1], c.localName = s[2], D._ownerElement = c, c;
        },
        // Introduced in DOM Level 2:
        /**
         * @param {string} namespaceURI
         * @param {string} qualifiedName
         * @returns {Attr}
         */
        createAttributeNS: function (r, u) {
            var s = le(r, u), c = new Ae(m);
            return c.ownerDocument = this, c.childNodes = new T(), c.nodeName = u, c.name = u, c.specified = !0, c.namespaceURI = s[0], c.prefix = s[1], c.localName = s[2], c;
        }
    }, x(pe, P);
    function Z(r) {
        b(r), this._nsMap = /* @__PURE__ */ Object.create(null);
    }
    Z.prototype = {
        nodeType: G,
        /**
         * The attributes of this element.
         *
         * @type {NamedNodeMap | null}
         */
        attributes: null,
        getQualifiedName: function () {
            return this.prefix ? this.prefix + ":" + this.localName : this.localName;
        },
        _isInHTMLDocumentAndNamespace: function () {
            return this.ownerDocument.type === "html" && this.namespaceURI === f.HTML;
        },
        /**
         * Implementaton of Level2 Core function hasAttributes.
         *
         * @returns {boolean}
         * True if attribute list is not empty.
         * @see https://www.w3.org/TR/DOM-Level-2-Core/#core-ID-NodeHasAttrs
         */
        hasAttributes: function () {
            return !!(this.attributes && this.attributes.length);
        },
        hasAttribute: function (r) {
            return !!this.getAttributeNode(r);
        },
        /**
         * Returns element’s first attribute whose qualified name is `name`, and `null`
         * if there is no such attribute.
         *
         * @param {string} name
         * @returns {string | null}
         */
        getAttribute: function (r) {
            var u = this.getAttributeNode(r);
            return u ? u.value : null;
        },
        getAttributeNode: function (r) {
            return this._isInHTMLDocumentAndNamespace() && (r = r.toLowerCase()), this.attributes.getNamedItem(r);
        },
        /**
         * Sets the value of element’s first attribute whose qualified name is qualifiedName to value.
         *
         * @param {string} name
         * @param {string} value
         */
        setAttribute: function (r, u) {
            this._isInHTMLDocumentAndNamespace() && (r = r.toLowerCase());
            var s = this.getAttributeNode(r);
            s ? s.value = s.nodeValue = "" + u : (s = this.ownerDocument._createAttribute(r), s.value = s.nodeValue = "" + u, this.setAttributeNode(s));
        },
        removeAttribute: function (r) {
            var u = this.getAttributeNode(r);
            u && this.removeAttributeNode(u);
        },
        setAttributeNode: function (r) {
            return this.attributes.setNamedItem(r);
        },
        setAttributeNodeNS: function (r) {
            return this.attributes.setNamedItemNS(r);
        },
        removeAttributeNode: function (r) {
            return this.attributes.removeNamedItem(r.nodeName);
        },
        //get real attribute name,and remove it by removeAttributeNode
        removeAttributeNS: function (r, u) {
            var s = this.getAttributeNodeNS(r, u);
            s && this.removeAttributeNode(s);
        },
        hasAttributeNS: function (r, u) {
            return this.getAttributeNodeNS(r, u) != null;
        },
        /**
         * Returns element’s attribute whose namespace is `namespaceURI` and local name is
         * `localName`,
         * or `null` if there is no such attribute.
         *
         * @param {string} namespaceURI
         * @param {string} localName
         * @returns {string | null}
         */
        getAttributeNS: function (r, u) {
            var s = this.getAttributeNodeNS(r, u);
            return s ? s.value : null;
        },
        /**
         * Sets the value of element’s attribute whose namespace is `namespaceURI` and local name is
         * `localName` to value.
         *
         * @param {string} namespaceURI
         * @param {string} qualifiedName
         * @param {string} value
         * @see https://dom.spec.whatwg.org/#dom-element-setattributens
         */
        setAttributeNS: function (r, u, s) {
            var c = le(r, u), D = c[2], S = this.getAttributeNodeNS(r, D);
            S ? S.value = S.nodeValue = "" + s : (S = this.ownerDocument.createAttributeNS(r, u), S.value = S.nodeValue = "" + s, this.setAttributeNode(S));
        },
        getAttributeNodeNS: function (r, u) {
            return this.attributes.getNamedItemNS(r, u);
        },
        /**
         * Returns a LiveNodeList of all child elements which have **all** of the given class name(s).
         *
         * Returns an empty list if `classNames` is an empty string or only contains HTML white space
         * characters.
         *
         * Warning: This returns a live LiveNodeList.
         * Changes in the DOM will reflect in the array as the changes occur.
         * If an element selected by this array no longer qualifies for the selector,
         * it will automatically be removed. Be aware of this for iteration purposes.
         *
         * @param {string} classNames
         * Is a string representing the class name(s) to match; multiple class names are separated by
         * (ASCII-)whitespace.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName
         * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
         * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
         */
        getElementsByClassName: function (r) {
            var u = k(r);
            return new I(this, function (s) {
                var c = [];
                return u.length > 0 && Re(s, function (D) {
                    if (D !== s && D.nodeType === G) {
                        var S = D.getAttribute("class");
                        if (S) {
                            var X = r === S;
                            if (!X) {
                                var ae = k(S);
                                X = u.every($(ae));
                            }
                            X && c.push(D);
                        }
                    }
                }), c;
            });
        },
        /**
         * Returns a LiveNodeList of elements with the given qualifiedName.
         * Searching for all descendants can be done by passing `*` as `qualifiedName`.
         *
         * All descendants of the specified element are searched, but not the element itself.
         * The returned list is live, which means it updates itself with the DOM tree automatically.
         * Therefore, there is no need to call `Element.getElementsByTagName()`
         * with the same element and arguments repeatedly if the DOM changes in between calls.
         *
         * When called on an HTML element in an HTML document,
         * `getElementsByTagName` lower-cases the argument before searching for it.
         * This is undesirable when trying to match camel-cased SVG elements (such as
         * `<linearGradient>`) in an HTML document.
         * Instead, use `Element.getElementsByTagNameNS()`,
         * which preserves the capitalization of the tag name.
         *
         * `Element.getElementsByTagName` is similar to `Document.getElementsByTagName()`,
         * except that it only searches for elements that are descendants of the specified element.
         *
         * @param {string} qualifiedName
         * @returns {LiveNodeList}
         * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName
         * @see https://dom.spec.whatwg.org/#concept-getelementsbytagname
         */
        getElementsByTagName: function (r) {
            var u = (this.nodeType === w ? this : this.ownerDocument).type === "html", s = r.toLowerCase();
            return new I(this, function (c) {
                var D = [];
                return Re(c, function (S) {
                    if (!(S === c || S.nodeType !== G))
                        if (r === "*")
                            D.push(S);
                        else {
                            var X = S.getQualifiedName(), ae = u && S.namespaceURI === f.HTML ? s : r;
                            X === ae && D.push(S);
                        }
                }), D;
            });
        },
        getElementsByTagNameNS: function (r, u) {
            return new I(this, function (s) {
                var c = [];
                return Re(s, function (D) {
                    D !== s && D.nodeType === G && (r === "*" || D.namespaceURI === r) && (u === "*" || D.localName == u) && c.push(D);
                }), c;
            });
        }
    }, pe.prototype.getElementsByClassName = Z.prototype.getElementsByClassName, pe.prototype.getElementsByTagName = Z.prototype.getElementsByTagName, pe.prototype.getElementsByTagNameNS = Z.prototype.getElementsByTagNameNS, x(Z, P);
    function Ae(r) {
        b(r), this.namespaceURI = null, this.prefix = null, this.ownerElement = null;
    }
    Ae.prototype.nodeType = K, x(Ae, P);
    function Ne(r) {
        b(r);
    }
    Ne.prototype = {
        data: "",
        substringData: function (r, u) {
            return this.data.substring(r, r + u);
        },
        appendData: function (r) {
            r = this.data + r, this.nodeValue = this.data = r, this.length = r.length;
        },
        insertData: function (r, u) {
            this.replaceData(r, 0, u);
        },
        deleteData: function (r, u) {
            this.replaceData(r, u, "");
        },
        replaceData: function (r, u, s) {
            var c = this.data.substring(0, r), D = this.data.substring(r + u);
            s = c + s + D, this.nodeValue = this.data = s, this.length = s.length;
        }
    }, x(Ne, P);
    function Ke(r) {
        b(r);
    }
    Ke.prototype = {
        nodeName: "#text",
        nodeType: ee,
        splitText: function (r) {
            var u = this.data, s = u.substring(r);
            u = u.substring(0, r), this.data = this.nodeValue = u, this.length = u.length;
            var c = this.ownerDocument.createTextNode(s);
            return this.parentNode && this.parentNode.insertBefore(c, this.nextSibling), c;
        }
    }, x(Ke, Ne);
    function st(r) {
        b(r);
    }
    st.prototype = {
        nodeName: "#comment",
        nodeType: N
    }, x(st, Ne);
    function ct(r) {
        b(r);
    }
    ct.prototype = {
        nodeName: "#cdata-section",
        nodeType: Ie
    }, x(ct, Ke);
    function lt(r) {
        b(r);
    }
    lt.prototype.nodeType = y, x(lt, P);
    function At(r) {
        b(r);
    }
    At.prototype.nodeType = A, x(At, P);
    function Nt(r) {
        b(r);
    }
    Nt.prototype.nodeType = Be, x(Nt, P);
    function ft(r) {
        b(r);
    }
    ft.prototype.nodeType = te, x(ft, P);
    function Qe(r) {
        b(r);
    }
    Qe.prototype.nodeName = "#document-fragment", Qe.prototype.nodeType = M, x(Qe, P);
    function pt(r) {
        b(r);
    }
    pt.prototype.nodeType = d, x(pt, Ne);
    function Ot() {
    }
    Ot.prototype.serializeToString = function (r, u) {
        return ue.call(r, u);
    }, P.prototype.toString = ue;
    function ue(r) {
        var u = [], s = this.nodeType === w && this.documentElement || this, c = s.prefix, D = s.namespaceURI;
        if (D && c == null) {
            var c = s.lookupPrefix(D);
            if (c == null)
                var S = [
                    { namespace: D, prefix: null }
                    //{namespace:uri,prefix:''}
                ];
        }
        return qe(this, u, r, S), u.join("");
    }
    function he(r, u, s) {
        var c = r.prefix || "", D = r.namespaceURI;
        if (!D || c === "xml" && D === f.XML || D === f.XMLNS)
            return !1;
        for (var S = s.length; S--;) {
            var X = s[S];
            if (X.prefix === c)
                return X.namespace !== D;
        }
        return !0;
    }
    function ke(r, u, s) {
        r.push(" ", u, '="', s.replace(/[<>&"\t\n\r]/g, $e), '"');
    }
    function qe(r, u, s, c) {
        c || (c = []);
        var D = r.nodeType === w ? r : r.ownerDocument, S = D.type === "html";
        if (s)
            if (r = s(r), r) {
                if (typeof r == "string") {
                    u.push(r);
                    return;
                }
            }
            else
                return;
        switch (r.nodeType) {
            case G:
                var X = r.attributes, ae = X.length, me = r.firstChild, de = r.tagName, ye = de;
                if (!S && !r.prefix && r.namespaceURI) {
                    for (var ge, Ze = 0; Ze < X.length; Ze++)
                        if (X.item(Ze).name === "xmlns") {
                            ge = X.item(Ze).value;
                            break;
                        }
                    if (!ge)
                        for (var Ue = c.length - 1; Ue >= 0; Ue--) {
                            var Oe = c[Ue];
                            if (Oe.prefix === "" && Oe.namespace === r.namespaceURI) {
                                ge = Oe.namespace;
                                break;
                            }
                        }
                    if (ge !== r.namespaceURI)
                        for (var Ue = c.length - 1; Ue >= 0; Ue--) {
                            var Oe = c[Ue];
                            if (Oe.namespace === r.namespaceURI) {
                                Oe.prefix && (ye = Oe.prefix + ":" + de);
                                break;
                            }
                        }
                }
                u.push("<", ye);
                for (var et = 0; et < ae; et++) {
                    var Pe = X.item(et);
                    Pe.prefix == "xmlns" ? c.push({
                        prefix: Pe.localName,
                        namespace: Pe.value
                    }) : Pe.nodeName == "xmlns" && c.push({ prefix: "", namespace: Pe.value });
                }
                for (var et = 0; et < ae; et++) {
                    var Pe = X.item(et);
                    if (he(Pe, S, c)) {
                        var tt = Pe.prefix || "", bt = Pe.namespaceURI;
                        ke(u, tt ? "xmlns:" + tt : "xmlns", bt), c.push({ prefix: tt, namespace: bt });
                    }
                    qe(Pe, u, s, c);
                }
                if (de === ye && he(r, S, c)) {
                    var tt = r.prefix || "", bt = r.namespaceURI;
                    ke(u, tt ? "xmlns:" + tt : "xmlns", bt), c.push({ prefix: tt, namespace: bt });
                }
                var Ft = !me;
                if (Ft && (S || r.namespaceURI === f.HTML) && (Ft = h(de)), Ft)
                    u.push("/>");
                else {
                    if (u.push(">"), S && a(de))
                        for (; me;)
                            me.data ? u.push(me.data) : qe(me, u, s, c.slice()), me = me.nextSibling;
                    else
                        for (; me;)
                            qe(me, u, s, c.slice()), me = me.nextSibling;
                    u.push("</", ye, ">");
                }
                return;
            case w:
            case M:
                for (var me = r.firstChild; me;)
                    qe(me, u, s, c.slice()), me = me.nextSibling;
                return;
            case K:
                return ke(u, r.name, r.value);
            case ee:
                return u.push(r.data.replace(/[<&>]/g, $e));
            case Ie:
                return u.push(O.CDATA_START, r.data, O.CDATA_END);
            case N:
                return u.push(O.COMMENT_START, r.data, O.COMMENT_END);
            case y:
                var Yt = r.publicId, ht = r.systemId;
                u.push(O.DOCTYPE_DECL_START, " ", r.name), Yt ? (u.push(" ", O.PUBLIC, " ", Yt), ht && ht !== "." && u.push(" ", ht)) : ht && ht !== "." && u.push(" ", O.SYSTEM, " ", ht), r.internalSubset && u.push(" [", r.internalSubset, "]"), u.push(">");
                return;
            case d:
                return u.push("<?", r.target, " ", r.data, "?>");
            case te:
                return u.push("&", r.nodeName, ";");
            //case ENTITY_NODE:
            //case NOTATION_NODE:
            default:
                u.push("??", r.nodeName);
        }
    }
    function Jt(r, u, s) {
        var c;
        switch (u.nodeType) {
            case G:
                c = u.cloneNode(!1), c.ownerDocument = r;
            //var attrs = node2.attributes;
            //var len = attrs.length;
            //for(var i=0;i<len;i++){
            //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
            //}
            case M:
                break;
            case K:
                s = !0;
                break;
        }
        if (c || (c = u.cloneNode(!1)), c.ownerDocument = r, c.parentNode = null, s)
            for (var D = u.firstChild; D;)
                c.appendChild(Jt(r, D, s)), D = D.nextSibling;
        return c;
    }
    function Lt(r, u, s) {
        var c = new u.constructor(m);
        for (var D in u)
            if (i(u, D)) {
                var S = u[D];
                typeof S != "object" && S != c[D] && (c[D] = S);
            }
        switch (u.childNodes && (c.childNodes = new T()), c.ownerDocument = r, c.nodeType) {
            case G:
                var X = u.attributes, ae = c.attributes = new V(), de = X.length;
                ae._ownerElement = c;
                for (var ye = 0; ye < de; ye++)
                    c.setAttributeNode(Lt(r, X.item(ye), !0));
                break;
            case K:
                s = !0;
        }
        if (s)
            for (var ge = u.firstChild; ge;)
                c.appendChild(Lt(r, ge, s)), ge = ge.nextSibling;
        return c;
    }
    function Xt(r, u, s) {
        r[u] = s;
    }
    try {
        if (Object.defineProperty) {
            let r = function (u) {
                switch (u.nodeType) {
                    case G:
                    case M:
                        var s = [];
                        for (u = u.firstChild; u;)
                            u.nodeType !== 7 && u.nodeType !== 8 && s.push(r(u)), u = u.nextSibling;
                        return s.join("");
                    default:
                        return u.nodeValue;
                }
            };
            Object.defineProperty(I.prototype, "length", {
                get: function () {
                    return L(this), this.$$length;
                }
            }), Object.defineProperty(P.prototype, "textContent", {
                get: function () {
                    return r(this);
                },
                set: function (u) {
                    switch (this.nodeType) {
                        case G:
                        case M:
                            for (; this.firstChild;)
                                this.removeChild(this.firstChild);
                            (u || String(u)) && this.appendChild(this.ownerDocument.createTextNode(u));
                            break;
                        default:
                            this.data = u, this.value = u, this.nodeValue = u;
                    }
                }
            }), Xt = function (u, s, c) {
                u["$$" + s] = c;
            };
        }
    }
    catch {
    }
    return re._updateLiveList = L, re.Attr = Ae, re.CDATASection = ct, re.CharacterData = Ne, re.Comment = st, re.Document = pe, re.DocumentFragment = Qe, re.DocumentType = lt, re.DOMImplementation = ie, re.Element = Z, re.Entity = Nt, re.EntityReference = ft, re.LiveNodeList = I, re.NamedNodeMap = V, re.Node = P, re.NodeList = T, re.Notation = At, re.Text = Ke, re.ProcessingInstruction = pt, re.XMLSerializer = Ot, re;
}
var rt = {}, kt = {}, ir;
function vn() {
    return ir || (ir = 1, function (t) {
        var e = Dt().freeze;
        t.XML_ENTITIES = e({
            amp: "&",
            apos: "'",
            gt: ">",
            lt: "<",
            quot: '"'
        }), t.HTML_ENTITIES = e({
            Aacute: "Á",
            aacute: "á",
            Abreve: "Ă",
            abreve: "ă",
            ac: "∾",
            acd: "∿",
            acE: "∾̳",
            Acirc: "Â",
            acirc: "â",
            acute: "´",
            Acy: "А",
            acy: "а",
            AElig: "Æ",
            aelig: "æ",
            af: "⁡",
            Afr: "𝔄",
            afr: "𝔞",
            Agrave: "À",
            agrave: "à",
            alefsym: "ℵ",
            aleph: "ℵ",
            Alpha: "Α",
            alpha: "α",
            Amacr: "Ā",
            amacr: "ā",
            amalg: "⨿",
            AMP: "&",
            amp: "&",
            And: "⩓",
            and: "∧",
            andand: "⩕",
            andd: "⩜",
            andslope: "⩘",
            andv: "⩚",
            ang: "∠",
            ange: "⦤",
            angle: "∠",
            angmsd: "∡",
            angmsdaa: "⦨",
            angmsdab: "⦩",
            angmsdac: "⦪",
            angmsdad: "⦫",
            angmsdae: "⦬",
            angmsdaf: "⦭",
            angmsdag: "⦮",
            angmsdah: "⦯",
            angrt: "∟",
            angrtvb: "⊾",
            angrtvbd: "⦝",
            angsph: "∢",
            angst: "Å",
            angzarr: "⍼",
            Aogon: "Ą",
            aogon: "ą",
            Aopf: "𝔸",
            aopf: "𝕒",
            ap: "≈",
            apacir: "⩯",
            apE: "⩰",
            ape: "≊",
            apid: "≋",
            apos: "'",
            ApplyFunction: "⁡",
            approx: "≈",
            approxeq: "≊",
            Aring: "Å",
            aring: "å",
            Ascr: "𝒜",
            ascr: "𝒶",
            Assign: "≔",
            ast: "*",
            asymp: "≈",
            asympeq: "≍",
            Atilde: "Ã",
            atilde: "ã",
            Auml: "Ä",
            auml: "ä",
            awconint: "∳",
            awint: "⨑",
            backcong: "≌",
            backepsilon: "϶",
            backprime: "‵",
            backsim: "∽",
            backsimeq: "⋍",
            Backslash: "∖",
            Barv: "⫧",
            barvee: "⊽",
            Barwed: "⌆",
            barwed: "⌅",
            barwedge: "⌅",
            bbrk: "⎵",
            bbrktbrk: "⎶",
            bcong: "≌",
            Bcy: "Б",
            bcy: "б",
            bdquo: "„",
            becaus: "∵",
            Because: "∵",
            because: "∵",
            bemptyv: "⦰",
            bepsi: "϶",
            bernou: "ℬ",
            Bernoullis: "ℬ",
            Beta: "Β",
            beta: "β",
            beth: "ℶ",
            between: "≬",
            Bfr: "𝔅",
            bfr: "𝔟",
            bigcap: "⋂",
            bigcirc: "◯",
            bigcup: "⋃",
            bigodot: "⨀",
            bigoplus: "⨁",
            bigotimes: "⨂",
            bigsqcup: "⨆",
            bigstar: "★",
            bigtriangledown: "▽",
            bigtriangleup: "△",
            biguplus: "⨄",
            bigvee: "⋁",
            bigwedge: "⋀",
            bkarow: "⤍",
            blacklozenge: "⧫",
            blacksquare: "▪",
            blacktriangle: "▴",
            blacktriangledown: "▾",
            blacktriangleleft: "◂",
            blacktriangleright: "▸",
            blank: "␣",
            blk12: "▒",
            blk14: "░",
            blk34: "▓",
            block: "█",
            bne: "=⃥",
            bnequiv: "≡⃥",
            bNot: "⫭",
            bnot: "⌐",
            Bopf: "𝔹",
            bopf: "𝕓",
            bot: "⊥",
            bottom: "⊥",
            bowtie: "⋈",
            boxbox: "⧉",
            boxDL: "╗",
            boxDl: "╖",
            boxdL: "╕",
            boxdl: "┐",
            boxDR: "╔",
            boxDr: "╓",
            boxdR: "╒",
            boxdr: "┌",
            boxH: "═",
            boxh: "─",
            boxHD: "╦",
            boxHd: "╤",
            boxhD: "╥",
            boxhd: "┬",
            boxHU: "╩",
            boxHu: "╧",
            boxhU: "╨",
            boxhu: "┴",
            boxminus: "⊟",
            boxplus: "⊞",
            boxtimes: "⊠",
            boxUL: "╝",
            boxUl: "╜",
            boxuL: "╛",
            boxul: "┘",
            boxUR: "╚",
            boxUr: "╙",
            boxuR: "╘",
            boxur: "└",
            boxV: "║",
            boxv: "│",
            boxVH: "╬",
            boxVh: "╫",
            boxvH: "╪",
            boxvh: "┼",
            boxVL: "╣",
            boxVl: "╢",
            boxvL: "╡",
            boxvl: "┤",
            boxVR: "╠",
            boxVr: "╟",
            boxvR: "╞",
            boxvr: "├",
            bprime: "‵",
            Breve: "˘",
            breve: "˘",
            brvbar: "¦",
            Bscr: "ℬ",
            bscr: "𝒷",
            bsemi: "⁏",
            bsim: "∽",
            bsime: "⋍",
            bsol: "\\",
            bsolb: "⧅",
            bsolhsub: "⟈",
            bull: "•",
            bullet: "•",
            bump: "≎",
            bumpE: "⪮",
            bumpe: "≏",
            Bumpeq: "≎",
            bumpeq: "≏",
            Cacute: "Ć",
            cacute: "ć",
            Cap: "⋒",
            cap: "∩",
            capand: "⩄",
            capbrcup: "⩉",
            capcap: "⩋",
            capcup: "⩇",
            capdot: "⩀",
            CapitalDifferentialD: "ⅅ",
            caps: "∩︀",
            caret: "⁁",
            caron: "ˇ",
            Cayleys: "ℭ",
            ccaps: "⩍",
            Ccaron: "Č",
            ccaron: "č",
            Ccedil: "Ç",
            ccedil: "ç",
            Ccirc: "Ĉ",
            ccirc: "ĉ",
            Cconint: "∰",
            ccups: "⩌",
            ccupssm: "⩐",
            Cdot: "Ċ",
            cdot: "ċ",
            cedil: "¸",
            Cedilla: "¸",
            cemptyv: "⦲",
            cent: "¢",
            CenterDot: "·",
            centerdot: "·",
            Cfr: "ℭ",
            cfr: "𝔠",
            CHcy: "Ч",
            chcy: "ч",
            check: "✓",
            checkmark: "✓",
            Chi: "Χ",
            chi: "χ",
            cir: "○",
            circ: "ˆ",
            circeq: "≗",
            circlearrowleft: "↺",
            circlearrowright: "↻",
            circledast: "⊛",
            circledcirc: "⊚",
            circleddash: "⊝",
            CircleDot: "⊙",
            circledR: "®",
            circledS: "Ⓢ",
            CircleMinus: "⊖",
            CirclePlus: "⊕",
            CircleTimes: "⊗",
            cirE: "⧃",
            cire: "≗",
            cirfnint: "⨐",
            cirmid: "⫯",
            cirscir: "⧂",
            ClockwiseContourIntegral: "∲",
            CloseCurlyDoubleQuote: "”",
            CloseCurlyQuote: "’",
            clubs: "♣",
            clubsuit: "♣",
            Colon: "∷",
            colon: ":",
            Colone: "⩴",
            colone: "≔",
            coloneq: "≔",
            comma: ",",
            commat: "@",
            comp: "∁",
            compfn: "∘",
            complement: "∁",
            complexes: "ℂ",
            cong: "≅",
            congdot: "⩭",
            Congruent: "≡",
            Conint: "∯",
            conint: "∮",
            ContourIntegral: "∮",
            Copf: "ℂ",
            copf: "𝕔",
            coprod: "∐",
            Coproduct: "∐",
            COPY: "©",
            copy: "©",
            copysr: "℗",
            CounterClockwiseContourIntegral: "∳",
            crarr: "↵",
            Cross: "⨯",
            cross: "✗",
            Cscr: "𝒞",
            cscr: "𝒸",
            csub: "⫏",
            csube: "⫑",
            csup: "⫐",
            csupe: "⫒",
            ctdot: "⋯",
            cudarrl: "⤸",
            cudarrr: "⤵",
            cuepr: "⋞",
            cuesc: "⋟",
            cularr: "↶",
            cularrp: "⤽",
            Cup: "⋓",
            cup: "∪",
            cupbrcap: "⩈",
            CupCap: "≍",
            cupcap: "⩆",
            cupcup: "⩊",
            cupdot: "⊍",
            cupor: "⩅",
            cups: "∪︀",
            curarr: "↷",
            curarrm: "⤼",
            curlyeqprec: "⋞",
            curlyeqsucc: "⋟",
            curlyvee: "⋎",
            curlywedge: "⋏",
            curren: "¤",
            curvearrowleft: "↶",
            curvearrowright: "↷",
            cuvee: "⋎",
            cuwed: "⋏",
            cwconint: "∲",
            cwint: "∱",
            cylcty: "⌭",
            Dagger: "‡",
            dagger: "†",
            daleth: "ℸ",
            Darr: "↡",
            dArr: "⇓",
            darr: "↓",
            dash: "‐",
            Dashv: "⫤",
            dashv: "⊣",
            dbkarow: "⤏",
            dblac: "˝",
            Dcaron: "Ď",
            dcaron: "ď",
            Dcy: "Д",
            dcy: "д",
            DD: "ⅅ",
            dd: "ⅆ",
            ddagger: "‡",
            ddarr: "⇊",
            DDotrahd: "⤑",
            ddotseq: "⩷",
            deg: "°",
            Del: "∇",
            Delta: "Δ",
            delta: "δ",
            demptyv: "⦱",
            dfisht: "⥿",
            Dfr: "𝔇",
            dfr: "𝔡",
            dHar: "⥥",
            dharl: "⇃",
            dharr: "⇂",
            DiacriticalAcute: "´",
            DiacriticalDot: "˙",
            DiacriticalDoubleAcute: "˝",
            DiacriticalGrave: "`",
            DiacriticalTilde: "˜",
            diam: "⋄",
            Diamond: "⋄",
            diamond: "⋄",
            diamondsuit: "♦",
            diams: "♦",
            die: "¨",
            DifferentialD: "ⅆ",
            digamma: "ϝ",
            disin: "⋲",
            div: "÷",
            divide: "÷",
            divideontimes: "⋇",
            divonx: "⋇",
            DJcy: "Ђ",
            djcy: "ђ",
            dlcorn: "⌞",
            dlcrop: "⌍",
            dollar: "$",
            Dopf: "𝔻",
            dopf: "𝕕",
            Dot: "¨",
            dot: "˙",
            DotDot: "⃜",
            doteq: "≐",
            doteqdot: "≑",
            DotEqual: "≐",
            dotminus: "∸",
            dotplus: "∔",
            dotsquare: "⊡",
            doublebarwedge: "⌆",
            DoubleContourIntegral: "∯",
            DoubleDot: "¨",
            DoubleDownArrow: "⇓",
            DoubleLeftArrow: "⇐",
            DoubleLeftRightArrow: "⇔",
            DoubleLeftTee: "⫤",
            DoubleLongLeftArrow: "⟸",
            DoubleLongLeftRightArrow: "⟺",
            DoubleLongRightArrow: "⟹",
            DoubleRightArrow: "⇒",
            DoubleRightTee: "⊨",
            DoubleUpArrow: "⇑",
            DoubleUpDownArrow: "⇕",
            DoubleVerticalBar: "∥",
            DownArrow: "↓",
            Downarrow: "⇓",
            downarrow: "↓",
            DownArrowBar: "⤓",
            DownArrowUpArrow: "⇵",
            DownBreve: "̑",
            downdownarrows: "⇊",
            downharpoonleft: "⇃",
            downharpoonright: "⇂",
            DownLeftRightVector: "⥐",
            DownLeftTeeVector: "⥞",
            DownLeftVector: "↽",
            DownLeftVectorBar: "⥖",
            DownRightTeeVector: "⥟",
            DownRightVector: "⇁",
            DownRightVectorBar: "⥗",
            DownTee: "⊤",
            DownTeeArrow: "↧",
            drbkarow: "⤐",
            drcorn: "⌟",
            drcrop: "⌌",
            Dscr: "𝒟",
            dscr: "𝒹",
            DScy: "Ѕ",
            dscy: "ѕ",
            dsol: "⧶",
            Dstrok: "Đ",
            dstrok: "đ",
            dtdot: "⋱",
            dtri: "▿",
            dtrif: "▾",
            duarr: "⇵",
            duhar: "⥯",
            dwangle: "⦦",
            DZcy: "Џ",
            dzcy: "џ",
            dzigrarr: "⟿",
            Eacute: "É",
            eacute: "é",
            easter: "⩮",
            Ecaron: "Ě",
            ecaron: "ě",
            ecir: "≖",
            Ecirc: "Ê",
            ecirc: "ê",
            ecolon: "≕",
            Ecy: "Э",
            ecy: "э",
            eDDot: "⩷",
            Edot: "Ė",
            eDot: "≑",
            edot: "ė",
            ee: "ⅇ",
            efDot: "≒",
            Efr: "𝔈",
            efr: "𝔢",
            eg: "⪚",
            Egrave: "È",
            egrave: "è",
            egs: "⪖",
            egsdot: "⪘",
            el: "⪙",
            Element: "∈",
            elinters: "⏧",
            ell: "ℓ",
            els: "⪕",
            elsdot: "⪗",
            Emacr: "Ē",
            emacr: "ē",
            empty: "∅",
            emptyset: "∅",
            EmptySmallSquare: "◻",
            emptyv: "∅",
            EmptyVerySmallSquare: "▫",
            emsp: " ",
            emsp13: " ",
            emsp14: " ",
            ENG: "Ŋ",
            eng: "ŋ",
            ensp: " ",
            Eogon: "Ę",
            eogon: "ę",
            Eopf: "𝔼",
            eopf: "𝕖",
            epar: "⋕",
            eparsl: "⧣",
            eplus: "⩱",
            epsi: "ε",
            Epsilon: "Ε",
            epsilon: "ε",
            epsiv: "ϵ",
            eqcirc: "≖",
            eqcolon: "≕",
            eqsim: "≂",
            eqslantgtr: "⪖",
            eqslantless: "⪕",
            Equal: "⩵",
            equals: "=",
            EqualTilde: "≂",
            equest: "≟",
            Equilibrium: "⇌",
            equiv: "≡",
            equivDD: "⩸",
            eqvparsl: "⧥",
            erarr: "⥱",
            erDot: "≓",
            Escr: "ℰ",
            escr: "ℯ",
            esdot: "≐",
            Esim: "⩳",
            esim: "≂",
            Eta: "Η",
            eta: "η",
            ETH: "Ð",
            eth: "ð",
            Euml: "Ë",
            euml: "ë",
            euro: "€",
            excl: "!",
            exist: "∃",
            Exists: "∃",
            expectation: "ℰ",
            ExponentialE: "ⅇ",
            exponentiale: "ⅇ",
            fallingdotseq: "≒",
            Fcy: "Ф",
            fcy: "ф",
            female: "♀",
            ffilig: "ﬃ",
            fflig: "ﬀ",
            ffllig: "ﬄ",
            Ffr: "𝔉",
            ffr: "𝔣",
            filig: "ﬁ",
            FilledSmallSquare: "◼",
            FilledVerySmallSquare: "▪",
            fjlig: "fj",
            flat: "♭",
            fllig: "ﬂ",
            fltns: "▱",
            fnof: "ƒ",
            Fopf: "𝔽",
            fopf: "𝕗",
            ForAll: "∀",
            forall: "∀",
            fork: "⋔",
            forkv: "⫙",
            Fouriertrf: "ℱ",
            fpartint: "⨍",
            frac12: "½",
            frac13: "⅓",
            frac14: "¼",
            frac15: "⅕",
            frac16: "⅙",
            frac18: "⅛",
            frac23: "⅔",
            frac25: "⅖",
            frac34: "¾",
            frac35: "⅗",
            frac38: "⅜",
            frac45: "⅘",
            frac56: "⅚",
            frac58: "⅝",
            frac78: "⅞",
            frasl: "⁄",
            frown: "⌢",
            Fscr: "ℱ",
            fscr: "𝒻",
            gacute: "ǵ",
            Gamma: "Γ",
            gamma: "γ",
            Gammad: "Ϝ",
            gammad: "ϝ",
            gap: "⪆",
            Gbreve: "Ğ",
            gbreve: "ğ",
            Gcedil: "Ģ",
            Gcirc: "Ĝ",
            gcirc: "ĝ",
            Gcy: "Г",
            gcy: "г",
            Gdot: "Ġ",
            gdot: "ġ",
            gE: "≧",
            ge: "≥",
            gEl: "⪌",
            gel: "⋛",
            geq: "≥",
            geqq: "≧",
            geqslant: "⩾",
            ges: "⩾",
            gescc: "⪩",
            gesdot: "⪀",
            gesdoto: "⪂",
            gesdotol: "⪄",
            gesl: "⋛︀",
            gesles: "⪔",
            Gfr: "𝔊",
            gfr: "𝔤",
            Gg: "⋙",
            gg: "≫",
            ggg: "⋙",
            gimel: "ℷ",
            GJcy: "Ѓ",
            gjcy: "ѓ",
            gl: "≷",
            gla: "⪥",
            glE: "⪒",
            glj: "⪤",
            gnap: "⪊",
            gnapprox: "⪊",
            gnE: "≩",
            gne: "⪈",
            gneq: "⪈",
            gneqq: "≩",
            gnsim: "⋧",
            Gopf: "𝔾",
            gopf: "𝕘",
            grave: "`",
            GreaterEqual: "≥",
            GreaterEqualLess: "⋛",
            GreaterFullEqual: "≧",
            GreaterGreater: "⪢",
            GreaterLess: "≷",
            GreaterSlantEqual: "⩾",
            GreaterTilde: "≳",
            Gscr: "𝒢",
            gscr: "ℊ",
            gsim: "≳",
            gsime: "⪎",
            gsiml: "⪐",
            Gt: "≫",
            GT: ">",
            gt: ">",
            gtcc: "⪧",
            gtcir: "⩺",
            gtdot: "⋗",
            gtlPar: "⦕",
            gtquest: "⩼",
            gtrapprox: "⪆",
            gtrarr: "⥸",
            gtrdot: "⋗",
            gtreqless: "⋛",
            gtreqqless: "⪌",
            gtrless: "≷",
            gtrsim: "≳",
            gvertneqq: "≩︀",
            gvnE: "≩︀",
            Hacek: "ˇ",
            hairsp: " ",
            half: "½",
            hamilt: "ℋ",
            HARDcy: "Ъ",
            hardcy: "ъ",
            hArr: "⇔",
            harr: "↔",
            harrcir: "⥈",
            harrw: "↭",
            Hat: "^",
            hbar: "ℏ",
            Hcirc: "Ĥ",
            hcirc: "ĥ",
            hearts: "♥",
            heartsuit: "♥",
            hellip: "…",
            hercon: "⊹",
            Hfr: "ℌ",
            hfr: "𝔥",
            HilbertSpace: "ℋ",
            hksearow: "⤥",
            hkswarow: "⤦",
            hoarr: "⇿",
            homtht: "∻",
            hookleftarrow: "↩",
            hookrightarrow: "↪",
            Hopf: "ℍ",
            hopf: "𝕙",
            horbar: "―",
            HorizontalLine: "─",
            Hscr: "ℋ",
            hscr: "𝒽",
            hslash: "ℏ",
            Hstrok: "Ħ",
            hstrok: "ħ",
            HumpDownHump: "≎",
            HumpEqual: "≏",
            hybull: "⁃",
            hyphen: "‐",
            Iacute: "Í",
            iacute: "í",
            ic: "⁣",
            Icirc: "Î",
            icirc: "î",
            Icy: "И",
            icy: "и",
            Idot: "İ",
            IEcy: "Е",
            iecy: "е",
            iexcl: "¡",
            iff: "⇔",
            Ifr: "ℑ",
            ifr: "𝔦",
            Igrave: "Ì",
            igrave: "ì",
            ii: "ⅈ",
            iiiint: "⨌",
            iiint: "∭",
            iinfin: "⧜",
            iiota: "℩",
            IJlig: "Ĳ",
            ijlig: "ĳ",
            Im: "ℑ",
            Imacr: "Ī",
            imacr: "ī",
            image: "ℑ",
            ImaginaryI: "ⅈ",
            imagline: "ℐ",
            imagpart: "ℑ",
            imath: "ı",
            imof: "⊷",
            imped: "Ƶ",
            Implies: "⇒",
            in: "∈",
            incare: "℅",
            infin: "∞",
            infintie: "⧝",
            inodot: "ı",
            Int: "∬",
            int: "∫",
            intcal: "⊺",
            integers: "ℤ",
            Integral: "∫",
            intercal: "⊺",
            Intersection: "⋂",
            intlarhk: "⨗",
            intprod: "⨼",
            InvisibleComma: "⁣",
            InvisibleTimes: "⁢",
            IOcy: "Ё",
            iocy: "ё",
            Iogon: "Į",
            iogon: "į",
            Iopf: "𝕀",
            iopf: "𝕚",
            Iota: "Ι",
            iota: "ι",
            iprod: "⨼",
            iquest: "¿",
            Iscr: "ℐ",
            iscr: "𝒾",
            isin: "∈",
            isindot: "⋵",
            isinE: "⋹",
            isins: "⋴",
            isinsv: "⋳",
            isinv: "∈",
            it: "⁢",
            Itilde: "Ĩ",
            itilde: "ĩ",
            Iukcy: "І",
            iukcy: "і",
            Iuml: "Ï",
            iuml: "ï",
            Jcirc: "Ĵ",
            jcirc: "ĵ",
            Jcy: "Й",
            jcy: "й",
            Jfr: "𝔍",
            jfr: "𝔧",
            jmath: "ȷ",
            Jopf: "𝕁",
            jopf: "𝕛",
            Jscr: "𝒥",
            jscr: "𝒿",
            Jsercy: "Ј",
            jsercy: "ј",
            Jukcy: "Є",
            jukcy: "є",
            Kappa: "Κ",
            kappa: "κ",
            kappav: "ϰ",
            Kcedil: "Ķ",
            kcedil: "ķ",
            Kcy: "К",
            kcy: "к",
            Kfr: "𝔎",
            kfr: "𝔨",
            kgreen: "ĸ",
            KHcy: "Х",
            khcy: "х",
            KJcy: "Ќ",
            kjcy: "ќ",
            Kopf: "𝕂",
            kopf: "𝕜",
            Kscr: "𝒦",
            kscr: "𝓀",
            lAarr: "⇚",
            Lacute: "Ĺ",
            lacute: "ĺ",
            laemptyv: "⦴",
            lagran: "ℒ",
            Lambda: "Λ",
            lambda: "λ",
            Lang: "⟪",
            lang: "⟨",
            langd: "⦑",
            langle: "⟨",
            lap: "⪅",
            Laplacetrf: "ℒ",
            laquo: "«",
            Larr: "↞",
            lArr: "⇐",
            larr: "←",
            larrb: "⇤",
            larrbfs: "⤟",
            larrfs: "⤝",
            larrhk: "↩",
            larrlp: "↫",
            larrpl: "⤹",
            larrsim: "⥳",
            larrtl: "↢",
            lat: "⪫",
            lAtail: "⤛",
            latail: "⤙",
            late: "⪭",
            lates: "⪭︀",
            lBarr: "⤎",
            lbarr: "⤌",
            lbbrk: "❲",
            lbrace: "{",
            lbrack: "[",
            lbrke: "⦋",
            lbrksld: "⦏",
            lbrkslu: "⦍",
            Lcaron: "Ľ",
            lcaron: "ľ",
            Lcedil: "Ļ",
            lcedil: "ļ",
            lceil: "⌈",
            lcub: "{",
            Lcy: "Л",
            lcy: "л",
            ldca: "⤶",
            ldquo: "“",
            ldquor: "„",
            ldrdhar: "⥧",
            ldrushar: "⥋",
            ldsh: "↲",
            lE: "≦",
            le: "≤",
            LeftAngleBracket: "⟨",
            LeftArrow: "←",
            Leftarrow: "⇐",
            leftarrow: "←",
            LeftArrowBar: "⇤",
            LeftArrowRightArrow: "⇆",
            leftarrowtail: "↢",
            LeftCeiling: "⌈",
            LeftDoubleBracket: "⟦",
            LeftDownTeeVector: "⥡",
            LeftDownVector: "⇃",
            LeftDownVectorBar: "⥙",
            LeftFloor: "⌊",
            leftharpoondown: "↽",
            leftharpoonup: "↼",
            leftleftarrows: "⇇",
            LeftRightArrow: "↔",
            Leftrightarrow: "⇔",
            leftrightarrow: "↔",
            leftrightarrows: "⇆",
            leftrightharpoons: "⇋",
            leftrightsquigarrow: "↭",
            LeftRightVector: "⥎",
            LeftTee: "⊣",
            LeftTeeArrow: "↤",
            LeftTeeVector: "⥚",
            leftthreetimes: "⋋",
            LeftTriangle: "⊲",
            LeftTriangleBar: "⧏",
            LeftTriangleEqual: "⊴",
            LeftUpDownVector: "⥑",
            LeftUpTeeVector: "⥠",
            LeftUpVector: "↿",
            LeftUpVectorBar: "⥘",
            LeftVector: "↼",
            LeftVectorBar: "⥒",
            lEg: "⪋",
            leg: "⋚",
            leq: "≤",
            leqq: "≦",
            leqslant: "⩽",
            les: "⩽",
            lescc: "⪨",
            lesdot: "⩿",
            lesdoto: "⪁",
            lesdotor: "⪃",
            lesg: "⋚︀",
            lesges: "⪓",
            lessapprox: "⪅",
            lessdot: "⋖",
            lesseqgtr: "⋚",
            lesseqqgtr: "⪋",
            LessEqualGreater: "⋚",
            LessFullEqual: "≦",
            LessGreater: "≶",
            lessgtr: "≶",
            LessLess: "⪡",
            lesssim: "≲",
            LessSlantEqual: "⩽",
            LessTilde: "≲",
            lfisht: "⥼",
            lfloor: "⌊",
            Lfr: "𝔏",
            lfr: "𝔩",
            lg: "≶",
            lgE: "⪑",
            lHar: "⥢",
            lhard: "↽",
            lharu: "↼",
            lharul: "⥪",
            lhblk: "▄",
            LJcy: "Љ",
            ljcy: "љ",
            Ll: "⋘",
            ll: "≪",
            llarr: "⇇",
            llcorner: "⌞",
            Lleftarrow: "⇚",
            llhard: "⥫",
            lltri: "◺",
            Lmidot: "Ŀ",
            lmidot: "ŀ",
            lmoust: "⎰",
            lmoustache: "⎰",
            lnap: "⪉",
            lnapprox: "⪉",
            lnE: "≨",
            lne: "⪇",
            lneq: "⪇",
            lneqq: "≨",
            lnsim: "⋦",
            loang: "⟬",
            loarr: "⇽",
            lobrk: "⟦",
            LongLeftArrow: "⟵",
            Longleftarrow: "⟸",
            longleftarrow: "⟵",
            LongLeftRightArrow: "⟷",
            Longleftrightarrow: "⟺",
            longleftrightarrow: "⟷",
            longmapsto: "⟼",
            LongRightArrow: "⟶",
            Longrightarrow: "⟹",
            longrightarrow: "⟶",
            looparrowleft: "↫",
            looparrowright: "↬",
            lopar: "⦅",
            Lopf: "𝕃",
            lopf: "𝕝",
            loplus: "⨭",
            lotimes: "⨴",
            lowast: "∗",
            lowbar: "_",
            LowerLeftArrow: "↙",
            LowerRightArrow: "↘",
            loz: "◊",
            lozenge: "◊",
            lozf: "⧫",
            lpar: "(",
            lparlt: "⦓",
            lrarr: "⇆",
            lrcorner: "⌟",
            lrhar: "⇋",
            lrhard: "⥭",
            lrm: "‎",
            lrtri: "⊿",
            lsaquo: "‹",
            Lscr: "ℒ",
            lscr: "𝓁",
            Lsh: "↰",
            lsh: "↰",
            lsim: "≲",
            lsime: "⪍",
            lsimg: "⪏",
            lsqb: "[",
            lsquo: "‘",
            lsquor: "‚",
            Lstrok: "Ł",
            lstrok: "ł",
            Lt: "≪",
            LT: "<",
            lt: "<",
            ltcc: "⪦",
            ltcir: "⩹",
            ltdot: "⋖",
            lthree: "⋋",
            ltimes: "⋉",
            ltlarr: "⥶",
            ltquest: "⩻",
            ltri: "◃",
            ltrie: "⊴",
            ltrif: "◂",
            ltrPar: "⦖",
            lurdshar: "⥊",
            luruhar: "⥦",
            lvertneqq: "≨︀",
            lvnE: "≨︀",
            macr: "¯",
            male: "♂",
            malt: "✠",
            maltese: "✠",
            Map: "⤅",
            map: "↦",
            mapsto: "↦",
            mapstodown: "↧",
            mapstoleft: "↤",
            mapstoup: "↥",
            marker: "▮",
            mcomma: "⨩",
            Mcy: "М",
            mcy: "м",
            mdash: "—",
            mDDot: "∺",
            measuredangle: "∡",
            MediumSpace: " ",
            Mellintrf: "ℳ",
            Mfr: "𝔐",
            mfr: "𝔪",
            mho: "℧",
            micro: "µ",
            mid: "∣",
            midast: "*",
            midcir: "⫰",
            middot: "·",
            minus: "−",
            minusb: "⊟",
            minusd: "∸",
            minusdu: "⨪",
            MinusPlus: "∓",
            mlcp: "⫛",
            mldr: "…",
            mnplus: "∓",
            models: "⊧",
            Mopf: "𝕄",
            mopf: "𝕞",
            mp: "∓",
            Mscr: "ℳ",
            mscr: "𝓂",
            mstpos: "∾",
            Mu: "Μ",
            mu: "μ",
            multimap: "⊸",
            mumap: "⊸",
            nabla: "∇",
            Nacute: "Ń",
            nacute: "ń",
            nang: "∠⃒",
            nap: "≉",
            napE: "⩰̸",
            napid: "≋̸",
            napos: "ŉ",
            napprox: "≉",
            natur: "♮",
            natural: "♮",
            naturals: "ℕ",
            nbsp: " ",
            nbump: "≎̸",
            nbumpe: "≏̸",
            ncap: "⩃",
            Ncaron: "Ň",
            ncaron: "ň",
            Ncedil: "Ņ",
            ncedil: "ņ",
            ncong: "≇",
            ncongdot: "⩭̸",
            ncup: "⩂",
            Ncy: "Н",
            ncy: "н",
            ndash: "–",
            ne: "≠",
            nearhk: "⤤",
            neArr: "⇗",
            nearr: "↗",
            nearrow: "↗",
            nedot: "≐̸",
            NegativeMediumSpace: "​",
            NegativeThickSpace: "​",
            NegativeThinSpace: "​",
            NegativeVeryThinSpace: "​",
            nequiv: "≢",
            nesear: "⤨",
            nesim: "≂̸",
            NestedGreaterGreater: "≫",
            NestedLessLess: "≪",
            NewLine: `
`,
            nexist: "∄",
            nexists: "∄",
            Nfr: "𝔑",
            nfr: "𝔫",
            ngE: "≧̸",
            nge: "≱",
            ngeq: "≱",
            ngeqq: "≧̸",
            ngeqslant: "⩾̸",
            nges: "⩾̸",
            nGg: "⋙̸",
            ngsim: "≵",
            nGt: "≫⃒",
            ngt: "≯",
            ngtr: "≯",
            nGtv: "≫̸",
            nhArr: "⇎",
            nharr: "↮",
            nhpar: "⫲",
            ni: "∋",
            nis: "⋼",
            nisd: "⋺",
            niv: "∋",
            NJcy: "Њ",
            njcy: "њ",
            nlArr: "⇍",
            nlarr: "↚",
            nldr: "‥",
            nlE: "≦̸",
            nle: "≰",
            nLeftarrow: "⇍",
            nleftarrow: "↚",
            nLeftrightarrow: "⇎",
            nleftrightarrow: "↮",
            nleq: "≰",
            nleqq: "≦̸",
            nleqslant: "⩽̸",
            nles: "⩽̸",
            nless: "≮",
            nLl: "⋘̸",
            nlsim: "≴",
            nLt: "≪⃒",
            nlt: "≮",
            nltri: "⋪",
            nltrie: "⋬",
            nLtv: "≪̸",
            nmid: "∤",
            NoBreak: "⁠",
            NonBreakingSpace: " ",
            Nopf: "ℕ",
            nopf: "𝕟",
            Not: "⫬",
            not: "¬",
            NotCongruent: "≢",
            NotCupCap: "≭",
            NotDoubleVerticalBar: "∦",
            NotElement: "∉",
            NotEqual: "≠",
            NotEqualTilde: "≂̸",
            NotExists: "∄",
            NotGreater: "≯",
            NotGreaterEqual: "≱",
            NotGreaterFullEqual: "≧̸",
            NotGreaterGreater: "≫̸",
            NotGreaterLess: "≹",
            NotGreaterSlantEqual: "⩾̸",
            NotGreaterTilde: "≵",
            NotHumpDownHump: "≎̸",
            NotHumpEqual: "≏̸",
            notin: "∉",
            notindot: "⋵̸",
            notinE: "⋹̸",
            notinva: "∉",
            notinvb: "⋷",
            notinvc: "⋶",
            NotLeftTriangle: "⋪",
            NotLeftTriangleBar: "⧏̸",
            NotLeftTriangleEqual: "⋬",
            NotLess: "≮",
            NotLessEqual: "≰",
            NotLessGreater: "≸",
            NotLessLess: "≪̸",
            NotLessSlantEqual: "⩽̸",
            NotLessTilde: "≴",
            NotNestedGreaterGreater: "⪢̸",
            NotNestedLessLess: "⪡̸",
            notni: "∌",
            notniva: "∌",
            notnivb: "⋾",
            notnivc: "⋽",
            NotPrecedes: "⊀",
            NotPrecedesEqual: "⪯̸",
            NotPrecedesSlantEqual: "⋠",
            NotReverseElement: "∌",
            NotRightTriangle: "⋫",
            NotRightTriangleBar: "⧐̸",
            NotRightTriangleEqual: "⋭",
            NotSquareSubset: "⊏̸",
            NotSquareSubsetEqual: "⋢",
            NotSquareSuperset: "⊐̸",
            NotSquareSupersetEqual: "⋣",
            NotSubset: "⊂⃒",
            NotSubsetEqual: "⊈",
            NotSucceeds: "⊁",
            NotSucceedsEqual: "⪰̸",
            NotSucceedsSlantEqual: "⋡",
            NotSucceedsTilde: "≿̸",
            NotSuperset: "⊃⃒",
            NotSupersetEqual: "⊉",
            NotTilde: "≁",
            NotTildeEqual: "≄",
            NotTildeFullEqual: "≇",
            NotTildeTilde: "≉",
            NotVerticalBar: "∤",
            npar: "∦",
            nparallel: "∦",
            nparsl: "⫽⃥",
            npart: "∂̸",
            npolint: "⨔",
            npr: "⊀",
            nprcue: "⋠",
            npre: "⪯̸",
            nprec: "⊀",
            npreceq: "⪯̸",
            nrArr: "⇏",
            nrarr: "↛",
            nrarrc: "⤳̸",
            nrarrw: "↝̸",
            nRightarrow: "⇏",
            nrightarrow: "↛",
            nrtri: "⋫",
            nrtrie: "⋭",
            nsc: "⊁",
            nsccue: "⋡",
            nsce: "⪰̸",
            Nscr: "𝒩",
            nscr: "𝓃",
            nshortmid: "∤",
            nshortparallel: "∦",
            nsim: "≁",
            nsime: "≄",
            nsimeq: "≄",
            nsmid: "∤",
            nspar: "∦",
            nsqsube: "⋢",
            nsqsupe: "⋣",
            nsub: "⊄",
            nsubE: "⫅̸",
            nsube: "⊈",
            nsubset: "⊂⃒",
            nsubseteq: "⊈",
            nsubseteqq: "⫅̸",
            nsucc: "⊁",
            nsucceq: "⪰̸",
            nsup: "⊅",
            nsupE: "⫆̸",
            nsupe: "⊉",
            nsupset: "⊃⃒",
            nsupseteq: "⊉",
            nsupseteqq: "⫆̸",
            ntgl: "≹",
            Ntilde: "Ñ",
            ntilde: "ñ",
            ntlg: "≸",
            ntriangleleft: "⋪",
            ntrianglelefteq: "⋬",
            ntriangleright: "⋫",
            ntrianglerighteq: "⋭",
            Nu: "Ν",
            nu: "ν",
            num: "#",
            numero: "№",
            numsp: " ",
            nvap: "≍⃒",
            nVDash: "⊯",
            nVdash: "⊮",
            nvDash: "⊭",
            nvdash: "⊬",
            nvge: "≥⃒",
            nvgt: ">⃒",
            nvHarr: "⤄",
            nvinfin: "⧞",
            nvlArr: "⤂",
            nvle: "≤⃒",
            nvlt: "<⃒",
            nvltrie: "⊴⃒",
            nvrArr: "⤃",
            nvrtrie: "⊵⃒",
            nvsim: "∼⃒",
            nwarhk: "⤣",
            nwArr: "⇖",
            nwarr: "↖",
            nwarrow: "↖",
            nwnear: "⤧",
            Oacute: "Ó",
            oacute: "ó",
            oast: "⊛",
            ocir: "⊚",
            Ocirc: "Ô",
            ocirc: "ô",
            Ocy: "О",
            ocy: "о",
            odash: "⊝",
            Odblac: "Ő",
            odblac: "ő",
            odiv: "⨸",
            odot: "⊙",
            odsold: "⦼",
            OElig: "Œ",
            oelig: "œ",
            ofcir: "⦿",
            Ofr: "𝔒",
            ofr: "𝔬",
            ogon: "˛",
            Ograve: "Ò",
            ograve: "ò",
            ogt: "⧁",
            ohbar: "⦵",
            ohm: "Ω",
            oint: "∮",
            olarr: "↺",
            olcir: "⦾",
            olcross: "⦻",
            oline: "‾",
            olt: "⧀",
            Omacr: "Ō",
            omacr: "ō",
            Omega: "Ω",
            omega: "ω",
            Omicron: "Ο",
            omicron: "ο",
            omid: "⦶",
            ominus: "⊖",
            Oopf: "𝕆",
            oopf: "𝕠",
            opar: "⦷",
            OpenCurlyDoubleQuote: "“",
            OpenCurlyQuote: "‘",
            operp: "⦹",
            oplus: "⊕",
            Or: "⩔",
            or: "∨",
            orarr: "↻",
            ord: "⩝",
            order: "ℴ",
            orderof: "ℴ",
            ordf: "ª",
            ordm: "º",
            origof: "⊶",
            oror: "⩖",
            orslope: "⩗",
            orv: "⩛",
            oS: "Ⓢ",
            Oscr: "𝒪",
            oscr: "ℴ",
            Oslash: "Ø",
            oslash: "ø",
            osol: "⊘",
            Otilde: "Õ",
            otilde: "õ",
            Otimes: "⨷",
            otimes: "⊗",
            otimesas: "⨶",
            Ouml: "Ö",
            ouml: "ö",
            ovbar: "⌽",
            OverBar: "‾",
            OverBrace: "⏞",
            OverBracket: "⎴",
            OverParenthesis: "⏜",
            par: "∥",
            para: "¶",
            parallel: "∥",
            parsim: "⫳",
            parsl: "⫽",
            part: "∂",
            PartialD: "∂",
            Pcy: "П",
            pcy: "п",
            percnt: "%",
            period: ".",
            permil: "‰",
            perp: "⊥",
            pertenk: "‱",
            Pfr: "𝔓",
            pfr: "𝔭",
            Phi: "Φ",
            phi: "φ",
            phiv: "ϕ",
            phmmat: "ℳ",
            phone: "☎",
            Pi: "Π",
            pi: "π",
            pitchfork: "⋔",
            piv: "ϖ",
            planck: "ℏ",
            planckh: "ℎ",
            plankv: "ℏ",
            plus: "+",
            plusacir: "⨣",
            plusb: "⊞",
            pluscir: "⨢",
            plusdo: "∔",
            plusdu: "⨥",
            pluse: "⩲",
            PlusMinus: "±",
            plusmn: "±",
            plussim: "⨦",
            plustwo: "⨧",
            pm: "±",
            Poincareplane: "ℌ",
            pointint: "⨕",
            Popf: "ℙ",
            popf: "𝕡",
            pound: "£",
            Pr: "⪻",
            pr: "≺",
            prap: "⪷",
            prcue: "≼",
            prE: "⪳",
            pre: "⪯",
            prec: "≺",
            precapprox: "⪷",
            preccurlyeq: "≼",
            Precedes: "≺",
            PrecedesEqual: "⪯",
            PrecedesSlantEqual: "≼",
            PrecedesTilde: "≾",
            preceq: "⪯",
            precnapprox: "⪹",
            precneqq: "⪵",
            precnsim: "⋨",
            precsim: "≾",
            Prime: "″",
            prime: "′",
            primes: "ℙ",
            prnap: "⪹",
            prnE: "⪵",
            prnsim: "⋨",
            prod: "∏",
            Product: "∏",
            profalar: "⌮",
            profline: "⌒",
            profsurf: "⌓",
            prop: "∝",
            Proportion: "∷",
            Proportional: "∝",
            propto: "∝",
            prsim: "≾",
            prurel: "⊰",
            Pscr: "𝒫",
            pscr: "𝓅",
            Psi: "Ψ",
            psi: "ψ",
            puncsp: " ",
            Qfr: "𝔔",
            qfr: "𝔮",
            qint: "⨌",
            Qopf: "ℚ",
            qopf: "𝕢",
            qprime: "⁗",
            Qscr: "𝒬",
            qscr: "𝓆",
            quaternions: "ℍ",
            quatint: "⨖",
            quest: "?",
            questeq: "≟",
            QUOT: '"',
            quot: '"',
            rAarr: "⇛",
            race: "∽̱",
            Racute: "Ŕ",
            racute: "ŕ",
            radic: "√",
            raemptyv: "⦳",
            Rang: "⟫",
            rang: "⟩",
            rangd: "⦒",
            range: "⦥",
            rangle: "⟩",
            raquo: "»",
            Rarr: "↠",
            rArr: "⇒",
            rarr: "→",
            rarrap: "⥵",
            rarrb: "⇥",
            rarrbfs: "⤠",
            rarrc: "⤳",
            rarrfs: "⤞",
            rarrhk: "↪",
            rarrlp: "↬",
            rarrpl: "⥅",
            rarrsim: "⥴",
            Rarrtl: "⤖",
            rarrtl: "↣",
            rarrw: "↝",
            rAtail: "⤜",
            ratail: "⤚",
            ratio: "∶",
            rationals: "ℚ",
            RBarr: "⤐",
            rBarr: "⤏",
            rbarr: "⤍",
            rbbrk: "❳",
            rbrace: "}",
            rbrack: "]",
            rbrke: "⦌",
            rbrksld: "⦎",
            rbrkslu: "⦐",
            Rcaron: "Ř",
            rcaron: "ř",
            Rcedil: "Ŗ",
            rcedil: "ŗ",
            rceil: "⌉",
            rcub: "}",
            Rcy: "Р",
            rcy: "р",
            rdca: "⤷",
            rdldhar: "⥩",
            rdquo: "”",
            rdquor: "”",
            rdsh: "↳",
            Re: "ℜ",
            real: "ℜ",
            realine: "ℛ",
            realpart: "ℜ",
            reals: "ℝ",
            rect: "▭",
            REG: "®",
            reg: "®",
            ReverseElement: "∋",
            ReverseEquilibrium: "⇋",
            ReverseUpEquilibrium: "⥯",
            rfisht: "⥽",
            rfloor: "⌋",
            Rfr: "ℜ",
            rfr: "𝔯",
            rHar: "⥤",
            rhard: "⇁",
            rharu: "⇀",
            rharul: "⥬",
            Rho: "Ρ",
            rho: "ρ",
            rhov: "ϱ",
            RightAngleBracket: "⟩",
            RightArrow: "→",
            Rightarrow: "⇒",
            rightarrow: "→",
            RightArrowBar: "⇥",
            RightArrowLeftArrow: "⇄",
            rightarrowtail: "↣",
            RightCeiling: "⌉",
            RightDoubleBracket: "⟧",
            RightDownTeeVector: "⥝",
            RightDownVector: "⇂",
            RightDownVectorBar: "⥕",
            RightFloor: "⌋",
            rightharpoondown: "⇁",
            rightharpoonup: "⇀",
            rightleftarrows: "⇄",
            rightleftharpoons: "⇌",
            rightrightarrows: "⇉",
            rightsquigarrow: "↝",
            RightTee: "⊢",
            RightTeeArrow: "↦",
            RightTeeVector: "⥛",
            rightthreetimes: "⋌",
            RightTriangle: "⊳",
            RightTriangleBar: "⧐",
            RightTriangleEqual: "⊵",
            RightUpDownVector: "⥏",
            RightUpTeeVector: "⥜",
            RightUpVector: "↾",
            RightUpVectorBar: "⥔",
            RightVector: "⇀",
            RightVectorBar: "⥓",
            ring: "˚",
            risingdotseq: "≓",
            rlarr: "⇄",
            rlhar: "⇌",
            rlm: "‏",
            rmoust: "⎱",
            rmoustache: "⎱",
            rnmid: "⫮",
            roang: "⟭",
            roarr: "⇾",
            robrk: "⟧",
            ropar: "⦆",
            Ropf: "ℝ",
            ropf: "𝕣",
            roplus: "⨮",
            rotimes: "⨵",
            RoundImplies: "⥰",
            rpar: ")",
            rpargt: "⦔",
            rppolint: "⨒",
            rrarr: "⇉",
            Rrightarrow: "⇛",
            rsaquo: "›",
            Rscr: "ℛ",
            rscr: "𝓇",
            Rsh: "↱",
            rsh: "↱",
            rsqb: "]",
            rsquo: "’",
            rsquor: "’",
            rthree: "⋌",
            rtimes: "⋊",
            rtri: "▹",
            rtrie: "⊵",
            rtrif: "▸",
            rtriltri: "⧎",
            RuleDelayed: "⧴",
            ruluhar: "⥨",
            rx: "℞",
            Sacute: "Ś",
            sacute: "ś",
            sbquo: "‚",
            Sc: "⪼",
            sc: "≻",
            scap: "⪸",
            Scaron: "Š",
            scaron: "š",
            sccue: "≽",
            scE: "⪴",
            sce: "⪰",
            Scedil: "Ş",
            scedil: "ş",
            Scirc: "Ŝ",
            scirc: "ŝ",
            scnap: "⪺",
            scnE: "⪶",
            scnsim: "⋩",
            scpolint: "⨓",
            scsim: "≿",
            Scy: "С",
            scy: "с",
            sdot: "⋅",
            sdotb: "⊡",
            sdote: "⩦",
            searhk: "⤥",
            seArr: "⇘",
            searr: "↘",
            searrow: "↘",
            sect: "§",
            semi: ";",
            seswar: "⤩",
            setminus: "∖",
            setmn: "∖",
            sext: "✶",
            Sfr: "𝔖",
            sfr: "𝔰",
            sfrown: "⌢",
            sharp: "♯",
            SHCHcy: "Щ",
            shchcy: "щ",
            SHcy: "Ш",
            shcy: "ш",
            ShortDownArrow: "↓",
            ShortLeftArrow: "←",
            shortmid: "∣",
            shortparallel: "∥",
            ShortRightArrow: "→",
            ShortUpArrow: "↑",
            shy: "­",
            Sigma: "Σ",
            sigma: "σ",
            sigmaf: "ς",
            sigmav: "ς",
            sim: "∼",
            simdot: "⩪",
            sime: "≃",
            simeq: "≃",
            simg: "⪞",
            simgE: "⪠",
            siml: "⪝",
            simlE: "⪟",
            simne: "≆",
            simplus: "⨤",
            simrarr: "⥲",
            slarr: "←",
            SmallCircle: "∘",
            smallsetminus: "∖",
            smashp: "⨳",
            smeparsl: "⧤",
            smid: "∣",
            smile: "⌣",
            smt: "⪪",
            smte: "⪬",
            smtes: "⪬︀",
            SOFTcy: "Ь",
            softcy: "ь",
            sol: "/",
            solb: "⧄",
            solbar: "⌿",
            Sopf: "𝕊",
            sopf: "𝕤",
            spades: "♠",
            spadesuit: "♠",
            spar: "∥",
            sqcap: "⊓",
            sqcaps: "⊓︀",
            sqcup: "⊔",
            sqcups: "⊔︀",
            Sqrt: "√",
            sqsub: "⊏",
            sqsube: "⊑",
            sqsubset: "⊏",
            sqsubseteq: "⊑",
            sqsup: "⊐",
            sqsupe: "⊒",
            sqsupset: "⊐",
            sqsupseteq: "⊒",
            squ: "□",
            Square: "□",
            square: "□",
            SquareIntersection: "⊓",
            SquareSubset: "⊏",
            SquareSubsetEqual: "⊑",
            SquareSuperset: "⊐",
            SquareSupersetEqual: "⊒",
            SquareUnion: "⊔",
            squarf: "▪",
            squf: "▪",
            srarr: "→",
            Sscr: "𝒮",
            sscr: "𝓈",
            ssetmn: "∖",
            ssmile: "⌣",
            sstarf: "⋆",
            Star: "⋆",
            star: "☆",
            starf: "★",
            straightepsilon: "ϵ",
            straightphi: "ϕ",
            strns: "¯",
            Sub: "⋐",
            sub: "⊂",
            subdot: "⪽",
            subE: "⫅",
            sube: "⊆",
            subedot: "⫃",
            submult: "⫁",
            subnE: "⫋",
            subne: "⊊",
            subplus: "⪿",
            subrarr: "⥹",
            Subset: "⋐",
            subset: "⊂",
            subseteq: "⊆",
            subseteqq: "⫅",
            SubsetEqual: "⊆",
            subsetneq: "⊊",
            subsetneqq: "⫋",
            subsim: "⫇",
            subsub: "⫕",
            subsup: "⫓",
            succ: "≻",
            succapprox: "⪸",
            succcurlyeq: "≽",
            Succeeds: "≻",
            SucceedsEqual: "⪰",
            SucceedsSlantEqual: "≽",
            SucceedsTilde: "≿",
            succeq: "⪰",
            succnapprox: "⪺",
            succneqq: "⪶",
            succnsim: "⋩",
            succsim: "≿",
            SuchThat: "∋",
            Sum: "∑",
            sum: "∑",
            sung: "♪",
            Sup: "⋑",
            sup: "⊃",
            sup1: "¹",
            sup2: "²",
            sup3: "³",
            supdot: "⪾",
            supdsub: "⫘",
            supE: "⫆",
            supe: "⊇",
            supedot: "⫄",
            Superset: "⊃",
            SupersetEqual: "⊇",
            suphsol: "⟉",
            suphsub: "⫗",
            suplarr: "⥻",
            supmult: "⫂",
            supnE: "⫌",
            supne: "⊋",
            supplus: "⫀",
            Supset: "⋑",
            supset: "⊃",
            supseteq: "⊇",
            supseteqq: "⫆",
            supsetneq: "⊋",
            supsetneqq: "⫌",
            supsim: "⫈",
            supsub: "⫔",
            supsup: "⫖",
            swarhk: "⤦",
            swArr: "⇙",
            swarr: "↙",
            swarrow: "↙",
            swnwar: "⤪",
            szlig: "ß",
            Tab: "	",
            target: "⌖",
            Tau: "Τ",
            tau: "τ",
            tbrk: "⎴",
            Tcaron: "Ť",
            tcaron: "ť",
            Tcedil: "Ţ",
            tcedil: "ţ",
            Tcy: "Т",
            tcy: "т",
            tdot: "⃛",
            telrec: "⌕",
            Tfr: "𝔗",
            tfr: "𝔱",
            there4: "∴",
            Therefore: "∴",
            therefore: "∴",
            Theta: "Θ",
            theta: "θ",
            thetasym: "ϑ",
            thetav: "ϑ",
            thickapprox: "≈",
            thicksim: "∼",
            ThickSpace: "  ",
            thinsp: " ",
            ThinSpace: " ",
            thkap: "≈",
            thksim: "∼",
            THORN: "Þ",
            thorn: "þ",
            Tilde: "∼",
            tilde: "˜",
            TildeEqual: "≃",
            TildeFullEqual: "≅",
            TildeTilde: "≈",
            times: "×",
            timesb: "⊠",
            timesbar: "⨱",
            timesd: "⨰",
            tint: "∭",
            toea: "⤨",
            top: "⊤",
            topbot: "⌶",
            topcir: "⫱",
            Topf: "𝕋",
            topf: "𝕥",
            topfork: "⫚",
            tosa: "⤩",
            tprime: "‴",
            TRADE: "™",
            trade: "™",
            triangle: "▵",
            triangledown: "▿",
            triangleleft: "◃",
            trianglelefteq: "⊴",
            triangleq: "≜",
            triangleright: "▹",
            trianglerighteq: "⊵",
            tridot: "◬",
            trie: "≜",
            triminus: "⨺",
            TripleDot: "⃛",
            triplus: "⨹",
            trisb: "⧍",
            tritime: "⨻",
            trpezium: "⏢",
            Tscr: "𝒯",
            tscr: "𝓉",
            TScy: "Ц",
            tscy: "ц",
            TSHcy: "Ћ",
            tshcy: "ћ",
            Tstrok: "Ŧ",
            tstrok: "ŧ",
            twixt: "≬",
            twoheadleftarrow: "↞",
            twoheadrightarrow: "↠",
            Uacute: "Ú",
            uacute: "ú",
            Uarr: "↟",
            uArr: "⇑",
            uarr: "↑",
            Uarrocir: "⥉",
            Ubrcy: "Ў",
            ubrcy: "ў",
            Ubreve: "Ŭ",
            ubreve: "ŭ",
            Ucirc: "Û",
            ucirc: "û",
            Ucy: "У",
            ucy: "у",
            udarr: "⇅",
            Udblac: "Ű",
            udblac: "ű",
            udhar: "⥮",
            ufisht: "⥾",
            Ufr: "𝔘",
            ufr: "𝔲",
            Ugrave: "Ù",
            ugrave: "ù",
            uHar: "⥣",
            uharl: "↿",
            uharr: "↾",
            uhblk: "▀",
            ulcorn: "⌜",
            ulcorner: "⌜",
            ulcrop: "⌏",
            ultri: "◸",
            Umacr: "Ū",
            umacr: "ū",
            uml: "¨",
            UnderBar: "_",
            UnderBrace: "⏟",
            UnderBracket: "⎵",
            UnderParenthesis: "⏝",
            Union: "⋃",
            UnionPlus: "⊎",
            Uogon: "Ų",
            uogon: "ų",
            Uopf: "𝕌",
            uopf: "𝕦",
            UpArrow: "↑",
            Uparrow: "⇑",
            uparrow: "↑",
            UpArrowBar: "⤒",
            UpArrowDownArrow: "⇅",
            UpDownArrow: "↕",
            Updownarrow: "⇕",
            updownarrow: "↕",
            UpEquilibrium: "⥮",
            upharpoonleft: "↿",
            upharpoonright: "↾",
            uplus: "⊎",
            UpperLeftArrow: "↖",
            UpperRightArrow: "↗",
            Upsi: "ϒ",
            upsi: "υ",
            upsih: "ϒ",
            Upsilon: "Υ",
            upsilon: "υ",
            UpTee: "⊥",
            UpTeeArrow: "↥",
            upuparrows: "⇈",
            urcorn: "⌝",
            urcorner: "⌝",
            urcrop: "⌎",
            Uring: "Ů",
            uring: "ů",
            urtri: "◹",
            Uscr: "𝒰",
            uscr: "𝓊",
            utdot: "⋰",
            Utilde: "Ũ",
            utilde: "ũ",
            utri: "▵",
            utrif: "▴",
            uuarr: "⇈",
            Uuml: "Ü",
            uuml: "ü",
            uwangle: "⦧",
            vangrt: "⦜",
            varepsilon: "ϵ",
            varkappa: "ϰ",
            varnothing: "∅",
            varphi: "ϕ",
            varpi: "ϖ",
            varpropto: "∝",
            vArr: "⇕",
            varr: "↕",
            varrho: "ϱ",
            varsigma: "ς",
            varsubsetneq: "⊊︀",
            varsubsetneqq: "⫋︀",
            varsupsetneq: "⊋︀",
            varsupsetneqq: "⫌︀",
            vartheta: "ϑ",
            vartriangleleft: "⊲",
            vartriangleright: "⊳",
            Vbar: "⫫",
            vBar: "⫨",
            vBarv: "⫩",
            Vcy: "В",
            vcy: "в",
            VDash: "⊫",
            Vdash: "⊩",
            vDash: "⊨",
            vdash: "⊢",
            Vdashl: "⫦",
            Vee: "⋁",
            vee: "∨",
            veebar: "⊻",
            veeeq: "≚",
            vellip: "⋮",
            Verbar: "‖",
            verbar: "|",
            Vert: "‖",
            vert: "|",
            VerticalBar: "∣",
            VerticalLine: "|",
            VerticalSeparator: "❘",
            VerticalTilde: "≀",
            VeryThinSpace: " ",
            Vfr: "𝔙",
            vfr: "𝔳",
            vltri: "⊲",
            vnsub: "⊂⃒",
            vnsup: "⊃⃒",
            Vopf: "𝕍",
            vopf: "𝕧",
            vprop: "∝",
            vrtri: "⊳",
            Vscr: "𝒱",
            vscr: "𝓋",
            vsubnE: "⫋︀",
            vsubne: "⊊︀",
            vsupnE: "⫌︀",
            vsupne: "⊋︀",
            Vvdash: "⊪",
            vzigzag: "⦚",
            Wcirc: "Ŵ",
            wcirc: "ŵ",
            wedbar: "⩟",
            Wedge: "⋀",
            wedge: "∧",
            wedgeq: "≙",
            weierp: "℘",
            Wfr: "𝔚",
            wfr: "𝔴",
            Wopf: "𝕎",
            wopf: "𝕨",
            wp: "℘",
            wr: "≀",
            wreath: "≀",
            Wscr: "𝒲",
            wscr: "𝓌",
            xcap: "⋂",
            xcirc: "◯",
            xcup: "⋃",
            xdtri: "▽",
            Xfr: "𝔛",
            xfr: "𝔵",
            xhArr: "⟺",
            xharr: "⟷",
            Xi: "Ξ",
            xi: "ξ",
            xlArr: "⟸",
            xlarr: "⟵",
            xmap: "⟼",
            xnis: "⋻",
            xodot: "⨀",
            Xopf: "𝕏",
            xopf: "𝕩",
            xoplus: "⨁",
            xotime: "⨂",
            xrArr: "⟹",
            xrarr: "⟶",
            Xscr: "𝒳",
            xscr: "𝓍",
            xsqcup: "⨆",
            xuplus: "⨄",
            xutri: "△",
            xvee: "⋁",
            xwedge: "⋀",
            Yacute: "Ý",
            yacute: "ý",
            YAcy: "Я",
            yacy: "я",
            Ycirc: "Ŷ",
            ycirc: "ŷ",
            Ycy: "Ы",
            ycy: "ы",
            yen: "¥",
            Yfr: "𝔜",
            yfr: "𝔶",
            YIcy: "Ї",
            yicy: "ї",
            Yopf: "𝕐",
            yopf: "𝕪",
            Yscr: "𝒴",
            yscr: "𝓎",
            YUcy: "Ю",
            yucy: "ю",
            Yuml: "Ÿ",
            yuml: "ÿ",
            Zacute: "Ź",
            zacute: "ź",
            Zcaron: "Ž",
            zcaron: "ž",
            Zcy: "З",
            zcy: "з",
            Zdot: "Ż",
            zdot: "ż",
            zeetrf: "ℨ",
            ZeroWidthSpace: "​",
            Zeta: "Ζ",
            zeta: "ζ",
            Zfr: "ℨ",
            zfr: "𝔷",
            ZHcy: "Ж",
            zhcy: "ж",
            zigrarr: "⇝",
            Zopf: "ℤ",
            zopf: "𝕫",
            Zscr: "𝒵",
            zscr: "𝓏",
            zwj: "‍",
            zwnj: "‌"
        }), t.entityMap = t.HTML_ENTITIES;
    }(kt)), kt;
}
var yt = {}, or;
function An() {
    if (or)
        return yt;
    or = 1;
    var t = Dt(), e = Fr(), n = _t(), i = t.isHTMLEscapableRawTextElement, o = t.isHTMLMimeType, a = t.isHTMLRawTextElement, h = t.hasOwn, p = t.NAMESPACE, f = n.ParseError, m = n.DOMException, E = 0, l = 1, v = 2, O = 3, b = 4, C = 5, j = 6, R = 7;
    function k() {
    }
    k.prototype = {
        parse: function (d, N, w) {
            var y = this.domBuilder;
            y.startDocument(), G(N, N = /* @__PURE__ */ Object.create(null)), ne(d, N, w, y, this.errorHandler), y.endDocument();
        }
    };
    var $ = /&#?\w+;?/g;
    function ne(d, N, w, y, M) {
        var A = o(y.mimeType);
        d.indexOf(e.UNICODE_REPLACEMENT_CHARACTER) >= 0 && M.warning("Unicode replacement character detected, source encoding issues?");
        function B(q) {
            if (q > 65535) {
                q -= 65536;
                var Z = 55296 + (q >> 10), Ae = 56320 + (q & 1023);
                return String.fromCharCode(Z, Ae);
            }
            else
                return String.fromCharCode(q);
        }
        function J(q) {
            var Z = q[q.length - 1] === ";" ? q : q + ";";
            if (!A && Z !== q)
                return M.error("EntityRef: expecting ;"), q;
            var Ae = e.Reference.exec(Z);
            if (!Ae || Ae[0].length !== Z.length)
                return M.error("entity not matching Reference production: " + q), q;
            var Ne = Z.slice(1, -1);
            return h(w, Ne) ? w[Ne] : Ne.charAt(0) === "#" ? B(parseInt(Ne.substring(1).replace("x", "0x"))) : (M.error("entity not found:" + q), q);
        }
        function _(q) {
            if (q > ie) {
                var Z = d.substring(ie, q).replace($, J);
                V && fe(ie), y.characters(Z, 0, q - ie), ie = q;
            }
        }
        var T = 0, I = 0, L = /\r\n?|\n|$/g, V = y.locator;
        function fe(q, Z) {
            for (; q >= I && (Z = L.exec(d));)
                T = I, I = Z.index + Z[0].length, V.lineNumber++;
            V.columnNumber = q - T + 1;
        }
        for (var we = [{ currentNSMap: N }], ve = [], ie = 0;;) {
            try {
                var P = d.indexOf("<", ie);
                if (P < 0) {
                    if (!A && ve.length > 0)
                        return M.fatalError("unclosed xml tag(s): " + ve.join(", "));
                    if (!d.substring(ie).match(/^\s*$/)) {
                        var $e = y.doc, Re = $e.createTextNode(d.substring(ie));
                        if ($e.documentElement)
                            return M.error("Extra content at the end of the document");
                        $e.appendChild(Re), y.currentElement = Re;
                    }
                    return;
                }
                if (P > ie) {
                    var pe = d.substring(ie, P);
                    !A && ve.length === 0 && (pe = pe.replace(new RegExp(e.S_OPT.source, "g"), ""), pe && M.error("Unexpected content outside root element: '" + pe + "'")), _(P);
                }
                switch (d.charAt(P + 1)) {
                    case "/":
                        var oe = d.indexOf(">", P + 2), Ve = d.substring(P + 2, oe > 0 ? oe : void 0);
                        if (!Ve)
                            return M.fatalError("end tag name missing");
                        var _e = oe > 0 && e.reg("^", e.QName_group, e.S_OPT, "$").exec(Ve);
                        if (!_e)
                            return M.fatalError('end tag name contains invalid characters: "' + Ve + '"');
                        if (!y.currentElement && !y.doc.documentElement)
                            return;
                        var Se = ve[ve.length - 1] || y.currentElement.tagName || y.doc.documentElement.tagName || "";
                        if (Se !== _e[1]) {
                            var Fe = _e[1].toLowerCase();
                            if (!A || Se.toLowerCase() !== Fe)
                                return M.fatalError('Opening and ending tag mismatch: "' + Se + '" != "' + Ve + '"');
                        }
                        var He = we.pop();
                        ve.pop();
                        var Je = He.localNSMap;
                        if (y.endElement(He.uri, He.localName, Se), Je)
                            for (var Ce in Je)
                                h(Je, Ce) && y.endPrefixMapping(Ce);
                        oe++;
                        break;
                    // end element
                    case "?":
                        V && fe(P), oe = te(d, P, y, M);
                        break;
                    case "!":
                        V && fe(P), oe = Ie(d, P, y, M, A);
                        break;
                    default:
                        V && fe(P);
                        var Q = new Be(), Ge = we[we.length - 1].currentNSMap, oe = g(d, P, Q, Ge, J, M, A), Xe = Q.length;
                        if (Q.closed || (A && t.isHTMLVoidElement(Q.tagName) ? Q.closed = !0 : ve.push(Q.tagName)), V && Xe) {
                            for (var vt = le(V, {}), Ye = 0; Ye < Xe; Ye++) {
                                var We = Q[Ye];
                                fe(We.offset), We.locator = le(V, {});
                            }
                            y.locator = vt, x(Q, y, Ge) && we.push(Q), y.locator = V;
                        }
                        else
                            x(Q, y, Ge) && we.push(Q);
                        A && !Q.closed ? oe = F(d, oe, Q.tagName, J, y) : oe++;
                }
            }
            catch (q) {
                if (q instanceof f)
                    throw q;
                if (q instanceof m)
                    throw new f(q.name + ": " + q.message, y.locator, q);
                M.error("element parse error: " + q), oe = -1;
            }
            oe > ie ? ie = oe : _(Math.max(P, ie) + 1);
        }
    }
    function le(d, N) {
        return N.lineNumber = d.lineNumber, N.columnNumber = d.columnNumber, N;
    }
    function g(d, N, w, y, M, A, B) {
        function J(fe, we, ve) {
            if (h(w.attributeNames, fe))
                return A.fatalError("Attribute " + fe + " redefined");
            if (!B && we.indexOf("<") >= 0)
                return A.fatalError("Unescaped '<' not allowed in attributes values");
            w.addValue(fe, 
            // @see https://www.w3.org/TR/xml/#AVNormalize
            // since the xmldom sax parser does not "interpret" DTD the following is not implemented:
            // - recursive replacement of (DTD) entity references
            // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
            we.replace(/[\t\n\r]/g, " ").replace($, M), ve);
        }
        for (var _, T, I = ++N, L = E;;) {
            var V = d.charAt(I);
            switch (V) {
                case "=":
                    if (L === l)
                        _ = d.slice(N, I), L = O;
                    else if (L === v)
                        L = O;
                    else
                        throw new Error("attribute equal must after attrName");
                    break;
                case "'":
                case '"':
                    if (L === O || L === l)
                        if (L === l && (A.warning('attribute value must after "="'), _ = d.slice(N, I)), N = I + 1, I = d.indexOf(V, N), I > 0)
                            T = d.slice(N, I), J(_, T, N - 1), L = C;
                        else
                            throw new Error("attribute value no end '" + V + "' match");
                    else if (L == b)
                        T = d.slice(N, I), J(_, T, N), A.warning('attribute "' + _ + '" missed start quot(' + V + ")!!"), N = I + 1, L = C;
                    else
                        throw new Error('attribute value must after "="');
                    break;
                case "/":
                    switch (L) {
                        case E:
                            w.setTagName(d.slice(N, I));
                        case C:
                        case j:
                        case R:
                            L = R, w.closed = !0;
                        case b:
                        case l:
                            break;
                        case v:
                            w.closed = !0;
                            break;
                        //case S_EQ:
                        default:
                            throw new Error("attribute invalid close char('/')");
                    }
                    break;
                case "":
                    return A.error("unexpected end of input"), L == E && w.setTagName(d.slice(N, I)), I;
                case ">":
                    switch (L) {
                        case E:
                            w.setTagName(d.slice(N, I));
                        case C:
                        case j:
                        case R:
                            break;
                        //normal
                        case b:
                        //Compatible state
                        case l:
                            T = d.slice(N, I), T.slice(-1) === "/" && (w.closed = !0, T = T.slice(0, -1));
                        case v:
                            L === v && (T = _), L == b ? (A.warning('attribute "' + T + '" missed quot(")!'), J(_, T, N)) : (B || A.warning('attribute "' + T + '" missed value!! "' + T + '" instead!!'), J(T, T, N));
                            break;
                        case O:
                            if (!B)
                                return A.fatalError(`AttValue: ' or " expected`);
                    }
                    return I;
                /*xml space '\x20' | #x9 | #xD | #xA; */
                case "":
                    V = " ";
                default:
                    if (V <= " ")
                        switch (L) {
                            case E:
                                w.setTagName(d.slice(N, I)), L = j;
                                break;
                            case l:
                                _ = d.slice(N, I), L = v;
                                break;
                            case b:
                                var T = d.slice(N, I);
                                A.warning('attribute "' + T + '" missed quot(")!!'), J(_, T, N);
                            case C:
                                L = j;
                                break;
                        }
                    else
                        switch (L) {
                            //case S_TAG:void();break;
                            //case S_ATTR:void();break;
                            //case S_ATTR_NOQUOT_VALUE:void();break;
                            case v:
                                B || A.warning('attribute "' + _ + '" missed value!! "' + _ + '" instead2!!'), J(_, _, N), N = I, L = l;
                                break;
                            case C:
                                A.warning('attribute space is required"' + _ + '"!!');
                            case j:
                                L = l, N = I;
                                break;
                            case O:
                                L = b, N = I;
                                break;
                            case R:
                                throw new Error("elements closed character '/' and '>' must be connected to");
                        }
            }
            I++;
        }
    }
    function x(d, N, w) {
        for (var y = d.tagName, M = null, L = d.length; L--;) {
            var A = d[L], B = A.qName, J = A.value, V = B.indexOf(":");
            if (V > 0)
                var _ = A.prefix = B.slice(0, V), T = B.slice(V + 1), I = _ === "xmlns" && T;
            else
                T = B, _ = null, I = B === "xmlns" && "";
            A.localName = T, I !== !1 && (M == null && (M = /* @__PURE__ */ Object.create(null), G(w, w = /* @__PURE__ */ Object.create(null))), w[I] = M[I] = J, A.uri = p.XMLNS, N.startPrefixMapping(I, J));
        }
        for (var L = d.length; L--;)
            A = d[L], A.prefix && (A.prefix === "xml" && (A.uri = p.XML), A.prefix !== "xmlns" && (A.uri = w[A.prefix]));
        var V = y.indexOf(":");
        V > 0 ? (_ = d.prefix = y.slice(0, V), T = d.localName = y.slice(V + 1)) : (_ = null, T = d.localName = y);
        var fe = d.uri = w[_ || ""];
        if (N.startElement(fe, T, y, d), d.closed) {
            if (N.endElement(fe, T, y), M)
                for (_ in M)
                    h(M, _) && N.endPrefixMapping(_);
        }
        else
            return d.currentNSMap = w, d.localNSMap = M, !0;
    }
    function F(d, N, w, y, M) {
        var A = i(w);
        if (A || a(w)) {
            var B = d.indexOf("</" + w + ">", N), J = d.substring(N + 1, B);
            return A && (J = J.replace($, y)), M.characters(J, 0, J.length), B;
        }
        return N + 1;
    }
    function G(d, N) {
        for (var w in d)
            h(d, w) && (N[w] = d[w]);
    }
    function K(d, N) {
        var w = N;
        function y(I) {
            return I = I || 0, d.charAt(w + I);
        }
        function M(I) {
            I = I || 1, w += I;
        }
        function A() {
            for (var I = 0; w < d.length;) {
                var L = y();
                if (L !== " " && L !== `
` && L !== "	" && L !== "\r")
                    return I;
                I++, M();
            }
            return -1;
        }
        function B() {
            return d.substring(w);
        }
        function J(I) {
            return d.substring(w, w + I.length) === I;
        }
        function _(I) {
            return d.substring(w, w + I.length).toUpperCase() === I.toUpperCase();
        }
        function T(I) {
            var L = e.reg("^", I), V = L.exec(B());
            return V ? (M(V[0].length), V[0]) : null;
        }
        return {
            char: y,
            getIndex: function () {
                return w;
            },
            getMatch: T,
            getSource: function () {
                return d;
            },
            skip: M,
            skipBlanks: A,
            substringFromIndex: B,
            substringStartsWith: J,
            substringStartsWithCaseInsensitive: _
        };
    }
    function ee(d, N) {
        function w(J, _) {
            var T = e.PI.exec(J.substringFromIndex());
            return T ? T[1].toLowerCase() === "xml" ? _.fatalError("xml declaration is only allowed at the start of the document, but found at position " + J.getIndex()) : (J.skip(T[0].length), T[0]) : _.fatalError("processing instruction is not well-formed at position " + J.getIndex());
        }
        var y = d.getSource();
        if (d.char() === "[") {
            d.skip(1);
            for (var M = d.getIndex(); d.getIndex() < y.length;) {
                if (d.skipBlanks(), d.char() === "]") {
                    var A = y.substring(M, d.getIndex());
                    return d.skip(1), A;
                }
                var B = null;
                if (d.char() === "<" && d.char(1) === "!")
                    switch (d.char(2)) {
                        case "E":
                            d.char(3) === "L" ? B = d.getMatch(e.elementdecl) : d.char(3) === "N" && (B = d.getMatch(e.EntityDecl));
                            break;
                        case "A":
                            B = d.getMatch(e.AttlistDecl);
                            break;
                        case "N":
                            B = d.getMatch(e.NotationDecl);
                            break;
                        case "-":
                            B = d.getMatch(e.Comment);
                            break;
                    }
                else if (d.char() === "<" && d.char(1) === "?")
                    B = w(d, N);
                else if (d.char() === "%")
                    B = d.getMatch(e.PEReference);
                else
                    return N.fatalError("Error detected in Markup declaration");
                if (!B)
                    return N.fatalError("Error in internal subset at position " + d.getIndex());
            }
            return N.fatalError("doctype internal subset is not well-formed, missing ]");
        }
    }
    function Ie(d, N, w, y, M) {
        var A = K(d, N);
        switch (M ? A.char(2).toUpperCase() : A.char(2)) {
            case "-":
                var B = A.getMatch(e.Comment);
                return B ? (w.comment(B, e.COMMENT_START.length, B.length - e.COMMENT_START.length - e.COMMENT_END.length), A.getIndex()) : y.fatalError("comment is not well-formed at position " + A.getIndex());
            case "[":
                var J = A.getMatch(e.CDSect);
                return J ? !M && !w.currentElement ? y.fatalError("CDATA outside of element") : (w.startCDATA(), w.characters(J, e.CDATA_START.length, J.length - e.CDATA_START.length - e.CDATA_END.length), w.endCDATA(), A.getIndex()) : y.fatalError("Invalid CDATA starting at position " + N);
            case "D": {
                if (w.doc && w.doc.documentElement)
                    return y.fatalError("Doctype not allowed inside or after documentElement at position " + A.getIndex());
                if (M ? !A.substringStartsWithCaseInsensitive(e.DOCTYPE_DECL_START) : !A.substringStartsWith(e.DOCTYPE_DECL_START))
                    return y.fatalError("Expected " + e.DOCTYPE_DECL_START + " at position " + A.getIndex());
                if (A.skip(e.DOCTYPE_DECL_START.length), A.skipBlanks() < 1)
                    return y.fatalError("Expected whitespace after " + e.DOCTYPE_DECL_START + " at position " + A.getIndex());
                var _ = {
                    name: void 0,
                    publicId: void 0,
                    systemId: void 0,
                    internalSubset: void 0
                };
                if (_.name = A.getMatch(e.Name), !_.name)
                    return y.fatalError("doctype name missing or contains unexpected characters at position " + A.getIndex());
                if (M && _.name.toLowerCase() !== "html" && y.warning("Unexpected DOCTYPE in HTML document at position " + A.getIndex()), A.skipBlanks(), A.substringStartsWith(e.PUBLIC) || A.substringStartsWith(e.SYSTEM)) {
                    var T = e.ExternalID_match.exec(A.substringFromIndex());
                    if (!T)
                        return y.fatalError("doctype external id is not well-formed at position " + A.getIndex());
                    T.groups.SystemLiteralOnly !== void 0 ? _.systemId = T.groups.SystemLiteralOnly : (_.systemId = T.groups.SystemLiteral, _.publicId = T.groups.PubidLiteral), A.skip(T[0].length);
                }
                else if (M && A.substringStartsWithCaseInsensitive(e.SYSTEM)) {
                    if (A.skip(e.SYSTEM.length), A.skipBlanks() < 1)
                        return y.fatalError("Expected whitespace after " + e.SYSTEM + " at position " + A.getIndex());
                    if (_.systemId = A.getMatch(e.ABOUT_LEGACY_COMPAT_SystemLiteral), !_.systemId)
                        return y.fatalError("Expected " + e.ABOUT_LEGACY_COMPAT + " in single or double quotes after " + e.SYSTEM + " at position " + A.getIndex());
                }
                return M && _.systemId && !e.ABOUT_LEGACY_COMPAT_SystemLiteral.test(_.systemId) && y.warning("Unexpected doctype.systemId in HTML document at position " + A.getIndex()), M || (A.skipBlanks(), _.internalSubset = ee(A, y)), A.skipBlanks(), A.char() !== ">" ? y.fatalError("doctype not terminated with > at position " + A.getIndex()) : (A.skip(1), w.startDTD(_.name, _.publicId, _.systemId, _.internalSubset), w.endDTD(), A.getIndex());
            }
            default:
                return y.fatalError('Not well-formed XML starting with "<!" at position ' + N);
        }
    }
    function te(d, N, w, y) {
        var M = d.substring(N).match(e.PI);
        if (!M)
            return y.fatalError("Invalid processing instruction starting at position " + N);
        if (M[1].toLowerCase() === "xml") {
            if (N > 0)
                return y.fatalError("processing instruction at position " + N + " is an xml declaration which is only at the start of the document");
            if (!e.XMLDecl.test(d.substring(N)))
                return y.fatalError("xml declaration is not well-formed");
        }
        return w.processingInstruction(M[1], M[2]), N + M[0].length;
    }
    function Be() {
        this.attributeNames = /* @__PURE__ */ Object.create(null);
    }
    return Be.prototype = {
        setTagName: function (d) {
            if (!e.QName_exact.test(d))
                throw new Error("invalid tagName:" + d);
            this.tagName = d;
        },
        addValue: function (d, N, w) {
            if (!e.QName_exact.test(d))
                throw new Error("invalid attribute:" + d);
            this.attributeNames[d] = this.length, this[this.length++] = { qName: d, value: N, offset: w };
        },
        length: 0,
        getLocalName: function (d) {
            return this[d].localName;
        },
        getLocator: function (d) {
            return this[d].locator;
        },
        getQName: function (d) {
            return this[d].qName;
        },
        getURI: function (d) {
            return this[d].uri;
        },
        getValue: function (d) {
            return this[d].value;
        }
        //	,getIndex:function(uri, localName)){
        //		if(localName){
        //
        //		}else{
        //			var qName = uri
        //		}
        //	},
        //	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
        //	getType:function(uri,localName){}
        //	getType:function(i){},
    }, yt.XMLReader = k, yt.parseUtils = K, yt.parseDoctypeCommentOrCData = Ie, yt;
}
var ar;
function Nn() {
    if (ar)
        return rt;
    ar = 1;
    var t = Dt(), e = kr(), n = _t(), i = vn(), o = An(), a = e.DOMImplementation, h = t.hasDefaultHTMLNamespace, p = t.isHTMLMimeType, f = t.isValidMimeType, m = t.MIME_TYPE, E = t.NAMESPACE, l = n.ParseError, v = o.XMLReader;
    function O(g) {
        return g.replace(/\r[\n\u0085]/g, `
`).replace(/[\r\u0085\u2028\u2029]/g, `
`);
    }
    function b(g) {
        if (g = g || {}, g.locator === void 0 && (g.locator = !0), this.assign = g.assign || t.assign, this.domHandler = g.domHandler || C, this.onError = g.onError || g.errorHandler, g.errorHandler && typeof g.errorHandler != "function")
            throw new TypeError("errorHandler object is no longer supported, switch to onError!");
        g.errorHandler && g.errorHandler("warning", "The `errorHandler` option has been deprecated, use `onError` instead!", this), this.normalizeLineEndings = g.normalizeLineEndings || O, this.locator = !!g.locator, this.xmlns = this.assign(/* @__PURE__ */ Object.create(null), g.xmlns);
    }
    b.prototype.parseFromString = function (g, x) {
        if (!f(x))
            throw new TypeError('DOMParser.parseFromString: the provided mimeType "' + x + '" is not valid.');
        var F = this.assign(/* @__PURE__ */ Object.create(null), this.xmlns), G = i.XML_ENTITIES, K = F[""] || null;
        h(x) ? (G = i.HTML_ENTITIES, K = E.HTML) : x === m.XML_SVG_IMAGE && (K = E.SVG), F[""] = K, F.xml = F.xml || E.XML;
        var ee = new this.domHandler({
            mimeType: x,
            defaultNamespace: K,
            onError: this.onError
        }), Ie = this.locator ? {} : void 0;
        this.locator && ee.setDocumentLocator(Ie);
        var te = new v();
        te.errorHandler = ee, te.domBuilder = ee;
        var Be = !t.isHTMLMimeType(x);
        return Be && typeof g != "string" && te.errorHandler.fatalError("source is not a string"), te.parse(this.normalizeLineEndings(String(g)), F, G), ee.doc.documentElement || te.errorHandler.fatalError("missing root element"), ee.doc;
    };
    function C(g) {
        var x = g || {};
        this.mimeType = x.mimeType || m.XML_APPLICATION, this.defaultNamespace = x.defaultNamespace || null, this.cdata = !1, this.currentElement = void 0, this.doc = void 0, this.locator = void 0, this.onError = x.onError;
    }
    function j(g, x) {
        x.lineNumber = g.lineNumber, x.columnNumber = g.columnNumber;
    }
    C.prototype = {
        /**
         * Either creates an XML or an HTML document and stores it under `this.doc`.
         * If it is an XML document, `this.defaultNamespace` is used to create it,
         * and it will not contain any `childNodes`.
         * If it is an HTML document, it will be created without any `childNodes`.
         *
         * @see http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
         */
        startDocument: function () {
            var g = new a();
            this.doc = p(this.mimeType) ? g.createHTMLDocument(!1) : g.createDocument(this.defaultNamespace, "");
        },
        startElement: function (g, x, F, G) {
            var K = this.doc, ee = K.createElementNS(g, F || x), Ie = G.length;
            $(this, ee), this.currentElement = ee, this.locator && j(this.locator, ee);
            for (var te = 0; te < Ie; te++) {
                var g = G.getURI(te), Be = G.getValue(te), F = G.getQName(te), d = K.createAttributeNS(g, F);
                this.locator && j(G.getLocator(te), d), d.value = d.nodeValue = Be, ee.setAttributeNode(d);
            }
        },
        endElement: function (g, x, F) {
            this.currentElement = this.currentElement.parentNode;
        },
        startPrefixMapping: function (g, x) {
        },
        endPrefixMapping: function (g) {
        },
        processingInstruction: function (g, x) {
            var F = this.doc.createProcessingInstruction(g, x);
            this.locator && j(this.locator, F), $(this, F);
        },
        ignorableWhitespace: function (g, x, F) {
        },
        characters: function (g, x, F) {
            if (g = k.apply(this, arguments), g) {
                if (this.cdata)
                    var G = this.doc.createCDATASection(g);
                else
                    var G = this.doc.createTextNode(g);
                this.currentElement ? this.currentElement.appendChild(G) : /^\s*$/.test(g) && this.doc.appendChild(G), this.locator && j(this.locator, G);
            }
        },
        skippedEntity: function (g) {
        },
        endDocument: function () {
            this.doc.normalize();
        },
        /**
         * Stores the locator to be able to set the `columnNumber` and `lineNumber`
         * on the created DOM nodes.
         *
         * @param {Locator} locator
         */
        setDocumentLocator: function (g) {
            g && (g.lineNumber = 0), this.locator = g;
        },
        //LexicalHandler
        comment: function (g, x, F) {
            g = k.apply(this, arguments);
            var G = this.doc.createComment(g);
            this.locator && j(this.locator, G), $(this, G);
        },
        startCDATA: function () {
            this.cdata = !0;
        },
        endCDATA: function () {
            this.cdata = !1;
        },
        startDTD: function (g, x, F, G) {
            var K = this.doc.implementation;
            if (K && K.createDocumentType) {
                var ee = K.createDocumentType(g, x, F, G);
                this.locator && j(this.locator, ee), $(this, ee), this.doc.doctype = ee;
            }
        },
        reportError: function (g, x) {
            if (typeof this.onError == "function")
                try {
                    this.onError(g, x, this);
                }
                catch (F) {
                    throw new l("Reporting " + g + ' "' + x + '" caused ' + F, this.locator);
                }
            else
                console.error("[xmldom " + g + "]	" + x, R(this.locator));
        },
        /**
         * @see http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
         */
        warning: function (g) {
            this.reportError("warning", g);
        },
        error: function (g) {
            this.reportError("error", g);
        },
        /**
         * This function reports a fatal error and throws a ParseError.
         *
         * @param {string} message
         * - The message to be used for reporting and throwing the error.
         * @returns {never}
         * This function always throws an error and never returns a value.
         * @throws {ParseError}
         * Always throws a ParseError with the provided message.
         */
        fatalError: function (g) {
            throw this.reportError("fatalError", g), new l(g, this.locator);
        }
    };
    function R(g) {
        if (g)
            return `
@#[line:` + g.lineNumber + ",col:" + g.columnNumber + "]";
    }
    function k(g, x, F) {
        return typeof g == "string" ? g.substr(x, F) : g.length >= x + F || x ? new java.lang.String(g, x, F) + "" : g;
    }
    "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function (g) {
        C.prototype[g] = function () {
            return null;
        };
    });
    function $(g, x) {
        g.currentElement ? g.currentElement.appendChild(x) : g.doc.appendChild(x);
    }
    function ne(g) {
        if (g === "error")
            throw "onErrorStopParsing";
    }
    function le() {
        throw "onWarningStopParsing";
    }
    return rt.__DOMHandler = C, rt.DOMParser = b, rt.normalizeLineEndings = O, rt.onErrorStopParsing = ne, rt.onWarningStopParsing = le, rt;
}
var sr;
function bn() {
    if (sr)
        return H;
    sr = 1;
    var t = Dt();
    H.assign = t.assign, H.hasDefaultHTMLNamespace = t.hasDefaultHTMLNamespace, H.isHTMLMimeType = t.isHTMLMimeType, H.isValidMimeType = t.isValidMimeType, H.MIME_TYPE = t.MIME_TYPE, H.NAMESPACE = t.NAMESPACE;
    var e = _t();
    H.DOMException = e.DOMException, H.DOMExceptionName = e.DOMExceptionName, H.ExceptionCode = e.ExceptionCode, H.ParseError = e.ParseError;
    var n = kr();
    H.Attr = n.Attr, H.CDATASection = n.CDATASection, H.CharacterData = n.CharacterData, H.Comment = n.Comment, H.Document = n.Document, H.DocumentFragment = n.DocumentFragment, H.DocumentType = n.DocumentType, H.DOMImplementation = n.DOMImplementation, H.Element = n.Element, H.Entity = n.Entity, H.EntityReference = n.EntityReference, H.LiveNodeList = n.LiveNodeList, H.NamedNodeMap = n.NamedNodeMap, H.Node = n.Node, H.NodeList = n.NodeList, H.Notation = n.Notation, H.ProcessingInstruction = n.ProcessingInstruction, H.Text = n.Text, H.XMLSerializer = n.XMLSerializer;
    var i = Nn();
    return H.DOMParser = i.DOMParser, H.normalizeLineEndings = i.normalizeLineEndings, H.onErrorStopParsing = i.onErrorStopParsing, H.onWarningStopParsing = i.onWarningStopParsing, H;
}
bn();
const Ut = "USJ";
var xe = {}, qt, cr;
function Cn() {
    return cr || (cr = 1, qt = () => {
        const t = "\\ud800-\\udfff", h = "\\u0300-\\u036f" + "\\ufe20-\\ufe2f" + "\\u20d0-\\u20ff" + "\\u1ab0-\\u1aff" + "\\u1dc0-\\u1dff", p = "\\ufe0e\\ufe0f", f = "\\uD83D\\uDC69\\uD83C\\uDFFB\\u200D\\uD83C\\uDF93", m = `[${t}]`, E = `[${h}]`, l = "\\ud83c[\\udffb-\\udfff]", v = `(?:${E}|${l})`, O = `[^${t}]`, b = "(?:\\uD83C[\\uDDE6-\\uDDFF]){2}", C = "[\\ud800-\\udbff][\\udc00-\\udfff]", j = "\\u200d", R = "(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40(?:\\udc65|\\udc73|\\udc77)\\udb40(?:\\udc6e|\\udc63|\\udc6c)\\udb40(?:\\udc67|\\udc74|\\udc73)\\udb40\\udc7f)", k = `[${f}]`, $ = `${v}?`, ne = `[${p}]?`, le = `(?:${j}(?:${[O, b, C].join("|")})${ne + $})*`, g = ne + $ + le, F = `(?:${[`${O}${E}?`, E, b, C, m, k].join("|")})`;
        return new RegExp(`${R}|${l}(?=${l})|${F + g}`, "g");
    }), qt;
}
var lr;
function yn() {
    if (lr)
        return xe;
    lr = 1;
    var t = xe && xe.__importDefault || function (f) {
        return f && f.__esModule ? f : { default: f };
    };
    Object.defineProperty(xe, "__esModule", { value: !0 });
    var e = t(Cn());
    function n(f) {
        if (typeof f != "string")
            throw new Error("A string is expected as input");
        return f.match(e.default()) || [];
    }
    xe.toArray = n;
    function i(f) {
        if (typeof f != "string")
            throw new Error("Input must be a string");
        var m = f.match(e.default());
        return m === null ? 0 : m.length;
    }
    xe.length = i;
    function o(f, m, E) {
        if (m === void 0 && (m = 0), typeof f != "string")
            throw new Error("Input must be a string");
        (typeof m != "number" || m < 0) && (m = 0), typeof E == "number" && E < 0 && (E = 0);
        var l = f.match(e.default());
        return l ? l.slice(m, E).join("") : "";
    }
    xe.substring = o;
    function a(f, m, E) {
        if (m === void 0 && (m = 0), typeof f != "string")
            throw new Error("Input must be a string");
        var l = i(f);
        if (typeof m != "number" && (m = parseInt(m, 10)), m >= l)
            return "";
        m < 0 && (m += l);
        var v;
        typeof E > "u" ? v = l : (typeof E != "number" && (E = parseInt(E, 10)), v = E >= 0 ? E + m : m);
        var O = f.match(e.default());
        return O ? O.slice(m, v).join("") : "";
    }
    xe.substr = a;
    function h(f, m, E, l) {
        if (m === void 0 && (m = 16), E === void 0 && (E = "#"), l === void 0 && (l = "right"), typeof f != "string" || typeof m != "number")
            throw new Error("Invalid arguments specified");
        if (["left", "right"].indexOf(l) === -1)
            throw new Error("Pad position should be either left or right");
        typeof E != "string" && (E = String(E));
        var v = i(f);
        if (v > m)
            return o(f, 0, m);
        if (v < m) {
            var O = E.repeat(m - v);
            return l === "left" ? O + f : f + O;
        }
        return f;
    }
    xe.limit = h;
    function p(f, m, E) {
        if (E === void 0 && (E = 0), typeof f != "string")
            throw new Error("Input must be a string");
        if (f === "")
            return m === "" ? 0 : -1;
        E = Number(E), E = isNaN(E) ? 0 : E, m = String(m);
        var l = n(f);
        if (E >= l.length)
            return m === "" ? l.length : -1;
        if (m === "")
            return E;
        var v = n(m), O = !1, b;
        for (b = E; b < l.length; b += 1) {
            for (var C = 0; C < v.length && v[C] === l[b + C];)
                C += 1;
            if (C === v.length && v[C - 1] === l[b + C - 1]) {
                O = !0;
                break;
            }
        }
        return O ? b : -1;
    }
    return xe.indexOf = p, xe;
}
var ot = yn();
function qr(t) {
    return t ? Array.isArray(t) ? t : [t] : [];
}
function xt(t, e) {
    if (!(e > ce(t) || e < -ce(t)))
        return Pt(t, e, 1);
}
function Et(t, e) {
    return e < 0 || e > ce(t) - 1 ? "" : Pt(t, e, 1);
}
function Zu(t, e) {
    if (!(e < 0 || e > ce(t) - 1))
        return Pt(t, e, 1).codePointAt(0);
}
function Tn(t, e, n = ce(t)) {
    const i = In(t, e);
    return !(i === -1 || i + ce(e) !== n);
}
function wn(t, e, n) {
    if (e < 0)
        return -1;
    if (n) {
        if (Et(t, e) === "}" && Et(t, e - 1) === "\\")
            return e;
        const a = St(t, "\\}", e);
        return a >= 0 ? a + 1 : a;
    }
    let i = e;
    const o = ce(t);
    for (; i < o && (i = St(t, "}", i), !(i === -1 || Et(t, i - 1) !== "\\"));)
        i += 1;
    return i >= o ? -1 : i;
}
function Sn(t, e) {
    const n = [];
    let i = 0, o = 0;
    function a(p, f, m) {
        const E = ut(t, o, f), l = n.length > 0 && Me(n[n.length - 1]) ? `${n.pop()}${E}` : E;
        Me(p) ? n.push(`${l}${p}`) : (l && n.push(l), n.push(p)), o = f + m;
    }
    const h = ce(t);
    for (; i < h;) {
        switch (Et(t, i)) {
            case "{":
                if (Et(t, i - 1) !== "\\") {
                    const p = wn(t, i, !1);
                    if (p >= 0) {
                        const f = ut(t, i + 1, p), m = f in e ? (
                        // Just checked that the key is in the object
                        // eslint-disable-next-line no-type-assertion/no-type-assertion
                        e[f]) : f;
                        a(m, i, p + 1 - i), i = p, o = p + 1;
                    }
                }
                else
                    a("{", i - 1, 2);
                break;
            case "}":
                Et(t, i - 1) !== "\\" || a("}", i - 1, 2);
                break;
        }
        i += 1;
    }
    if (o < h) {
        const p = ut(t, o);
        n.push(n.length > 0 && Me(n[n.length - 1]) ? `${n.pop()}${p}` : p);
    }
    return n;
}
function ei(t, e) {
    return Sn(t, e).map((n) => `${n}`).join("");
}
function On(t, e, n = 0) {
    const i = ut(t, n);
    return St(i, e) !== -1;
}
function St(t, e, n = 0) {
    return ot.indexOf(t, e, n);
}
function In(t, e, n) {
    let i = n === void 0 ? ce(t) : n;
    i < 0 ? i = 0 : i >= ce(t) && (i = ce(t) - 1);
    for (let o = i; o >= 0; o--)
        if (Pt(t, o, ce(e)) === e)
            return o;
    return -1;
}
function ce(t) {
    return ot.length(t);
}
function ti(t, e) {
    const n = e.toUpperCase();
    return n === "NONE" ? t : t.normalize(n);
}
function ri(t, e, n) {
    return t.localeCompare(e, "en", n);
}
function ni(t, e, n = " ") {
    return e <= ce(t) ? t : ot.limit(t, e, n, "right");
}
function ui(t, e, n = " ") {
    return e <= ce(t) ? t : ot.limit(t, e, n, "left");
}
function fr(t, e) {
    return e > t ? t : e < -t ? 0 : e < 0 ? e + t : e;
}
function pr(t, e, n) {
    const i = ce(t);
    if (e > i || n && (e > n && !(e >= 0 && e < i && n < 0 && n > -i) || n < -i))
        return "";
    const o = fr(i, e), a = n ? fr(i, n) : void 0;
    return ut(t, o, a);
}
function hr(t, e, n) {
    const i = [];
    if (n !== void 0 && n <= 0)
        return [t];
    if (e === "")
        return xn(t).slice(0, n);
    let o = e;
    (typeof e == "string" || e instanceof RegExp && !On(e.flags, "g")) && (o = new RegExp(e, "g"));
    const a = t.match(o);
    let h = 0;
    if (!a)
        return [t];
    for (let p = 0; p < (n ? n - 1 : a.length); p++) {
        const f = St(t, a[p], h), m = ce(a[p]);
        if (i.push(ut(t, h, f)), h = f + m, n !== void 0 && i.length === n)
            break;
    }
    return i.push(ut(t, h)), i;
}
function Ur(t, e, n = 0) {
    return St(t, e, n) === n;
}
function Pt(t, e = 0, n = ce(t) - e) {
    return ot.substr(t, e, n);
}
function ut(t, e, n = ce(t)) {
    return ot.substring(t, e, n);
}
function xn(t) {
    return ot.toArray(t);
}
function ii(t) {
    return Ur(t, "%") && Tn(t, "%");
}
function oi(t) {
    if (typeof t != "string")
        throw new TypeError("Expected a string");
    return t.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function ai(t) {
    return t ? qr(t).map((i) => Array.isArray(i) ? i.map((o) => new RegExp(o)) : new RegExp(i)) : [];
}
function si(t) {
    return t ? qr(t).map((i) => new RegExp(i)) : [];
}
const Mn = (
// Using unicode control characters to be very explicit about which characters we are using.
// The first 6 characters are the control characters \f\n\r\t\v.
// eslint-disable-next-line no-control-regex
/^[\u000C\u000A\u000D\u0009\u000B\u0020\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\u0085]+$/);
function mt(t) {
    return Mn.test(t);
}
function ci(t) {
    let e = "";
    for (let n = 0; n < t.length; n++) {
        const i = t[n];
        if (i === i.toUpperCase() && i !== i.toLowerCase()) {
            if (n > 0) {
                const a = t[n - 1];
                if (!(a === a.toUpperCase() && a !== a.toLowerCase()))
                    e += "-";
                else if (n + 1 < t.length) {
                    const p = t[n + 1];
                    p === p.toLowerCase() && p !== p.toUpperCase() && (e += "-");
                }
            }
            e += i.toLowerCase();
        }
        else
            e += i;
    }
    return e;
}
const jt = ["chapter", "book", "para", "row", "sidebar", Ut], Bn = "​", jr = [
    { shortName: "ERR", fullNames: ["ERROR"], chapters: -1 },
    { shortName: "GEN", fullNames: ["Genesis"], chapters: 50 },
    { shortName: "EXO", fullNames: ["Exodus"], chapters: 40 },
    { shortName: "LEV", fullNames: ["Leviticus"], chapters: 27 },
    { shortName: "NUM", fullNames: ["Numbers"], chapters: 36 },
    { shortName: "DEU", fullNames: ["Deuteronomy"], chapters: 34 },
    { shortName: "JOS", fullNames: ["Joshua"], chapters: 24 },
    { shortName: "JDG", fullNames: ["Judges"], chapters: 21 },
    { shortName: "RUT", fullNames: ["Ruth"], chapters: 4 },
    { shortName: "1SA", fullNames: ["1 Samuel"], chapters: 31 },
    { shortName: "2SA", fullNames: ["2 Samuel"], chapters: 24 },
    { shortName: "1KI", fullNames: ["1 Kings"], chapters: 22 },
    { shortName: "2KI", fullNames: ["2 Kings"], chapters: 25 },
    { shortName: "1CH", fullNames: ["1 Chronicles"], chapters: 29 },
    { shortName: "2CH", fullNames: ["2 Chronicles"], chapters: 36 },
    { shortName: "EZR", fullNames: ["Ezra"], chapters: 10 },
    { shortName: "NEH", fullNames: ["Nehemiah"], chapters: 13 },
    { shortName: "EST", fullNames: ["Esther"], chapters: 10 },
    { shortName: "JOB", fullNames: ["Job"], chapters: 42 },
    { shortName: "PSA", fullNames: ["Psalm", "Psalms"], chapters: 150 },
    { shortName: "PRO", fullNames: ["Proverbs"], chapters: 31 },
    { shortName: "ECC", fullNames: ["Ecclesiastes"], chapters: 12 },
    { shortName: "SNG", fullNames: ["Song of Solomon", "Song of Songs"], chapters: 8 },
    { shortName: "ISA", fullNames: ["Isaiah"], chapters: 66 },
    { shortName: "JER", fullNames: ["Jeremiah"], chapters: 52 },
    { shortName: "LAM", fullNames: ["Lamentations"], chapters: 5 },
    { shortName: "EZK", fullNames: ["Ezekiel"], chapters: 48 },
    { shortName: "DAN", fullNames: ["Daniel"], chapters: 12 },
    { shortName: "HOS", fullNames: ["Hosea"], chapters: 14 },
    { shortName: "JOL", fullNames: ["Joel"], chapters: 3 },
    { shortName: "AMO", fullNames: ["Amos"], chapters: 9 },
    { shortName: "OBA", fullNames: ["Obadiah"], chapters: 1 },
    { shortName: "JON", fullNames: ["Jonah"], chapters: 4 },
    { shortName: "MIC", fullNames: ["Micah"], chapters: 7 },
    { shortName: "NAM", fullNames: ["Nahum"], chapters: 3 },
    { shortName: "HAB", fullNames: ["Habakkuk"], chapters: 3 },
    { shortName: "ZEP", fullNames: ["Zephaniah"], chapters: 3 },
    { shortName: "HAG", fullNames: ["Haggai"], chapters: 2 },
    { shortName: "ZEC", fullNames: ["Zechariah"], chapters: 14 },
    { shortName: "MAL", fullNames: ["Malachi"], chapters: 4 },
    { shortName: "MAT", fullNames: ["Matthew"], chapters: 28 },
    { shortName: "MRK", fullNames: ["Mark"], chapters: 16 },
    { shortName: "LUK", fullNames: ["Luke"], chapters: 24 },
    { shortName: "JHN", fullNames: ["John"], chapters: 21 },
    { shortName: "ACT", fullNames: ["Acts"], chapters: 28 },
    { shortName: "ROM", fullNames: ["Romans"], chapters: 16 },
    { shortName: "1CO", fullNames: ["1 Corinthians"], chapters: 16 },
    { shortName: "2CO", fullNames: ["2 Corinthians"], chapters: 13 },
    { shortName: "GAL", fullNames: ["Galatians"], chapters: 6 },
    { shortName: "EPH", fullNames: ["Ephesians"], chapters: 6 },
    { shortName: "PHP", fullNames: ["Philippians"], chapters: 4 },
    { shortName: "COL", fullNames: ["Colossians"], chapters: 4 },
    { shortName: "1TH", fullNames: ["1 Thessalonians"], chapters: 5 },
    { shortName: "2TH", fullNames: ["2 Thessalonians"], chapters: 3 },
    { shortName: "1TI", fullNames: ["1 Timothy"], chapters: 6 },
    { shortName: "2TI", fullNames: ["2 Timothy"], chapters: 4 },
    { shortName: "TIT", fullNames: ["Titus"], chapters: 3 },
    { shortName: "PHM", fullNames: ["Philemon"], chapters: 1 },
    { shortName: "HEB", fullNames: ["Hebrews"], chapters: 13 },
    { shortName: "JAS", fullNames: ["James"], chapters: 5 },
    { shortName: "1PE", fullNames: ["1 Peter"], chapters: 5 },
    { shortName: "2PE", fullNames: ["2 Peter"], chapters: 3 },
    { shortName: "1JN", fullNames: ["1 John"], chapters: 5 },
    { shortName: "2JN", fullNames: ["2 John"], chapters: 1 },
    { shortName: "3JN", fullNames: ["3 John"], chapters: 1 },
    { shortName: "JUD", fullNames: ["Jude"], chapters: 1 },
    { shortName: "REV", fullNames: ["Revelation"], chapters: 22 }
], Rn = 1, _n = jr.length - 1, Pn = 1, Ln = 1, li = {
    book: "GEN",
    chapterNum: 1,
    verseNum: 1
}, Fn = (t) => {
    var e;
    return ((e = jr[t]) == null ? void 0 : e.chapters) ?? -1;
}, fi = (t, e) => ({
    book: be.bookNumberToId(Math.max(Rn, Math.min(be.bookIdToNumber(t.book) + e, _n))),
    chapterNum: 1,
    verseNum: 1
}), pi = (t, e) => ({
    ...t,
    chapterNum: Math.min(Math.max(Pn, t.chapterNum + e), Fn(be.bookIdToNumber(t.book))),
    verseNum: 1
}), hi = (t, e) => ({
    ...t,
    verseNum: Math.max(Ln, t.verseNum + e)
});
async function di(t, e, n) {
    const i = be.bookNumberToId(t);
    if (!Ur(Intl.getCanonicalLocales(e)[0], "zh"))
        return n({
            localizeKey: `LocalizedId.${i}`,
            languagesToSearch: [e]
        });
    const o = await n({
        localizeKey: `Book.${i}`,
        languagesToSearch: [e]
    }), a = hr(o, "-");
    return hr(a[0], "ÿ08")[0].trim();
}
function mi(t) {
    return new Lr(be.bookIdToNumber(t.book), t.chapterNum, t.verseNum).BBBCCC;
}
function dr(t) {
    return new Lr(be.bookIdToNumber(t.book), t.chapterNum, t.verseNum).BBBCCCVVV;
}
function Ei(t, e) {
    return dr(t) - dr(e);
}
function kn(t) {
    return `%scrollGroup_${t}%`;
}
function gi(t) {
    return t.map((e) => kn(e));
}
function Di(t, e, n, i) {
    let o;
    switch (e ?? "id") {
        case "English":
            o = be.bookIdToEnglishName(t.book);
            break;
        case "id":
            o = t.book;
            break;
        default:
            o = e ?? "";
            break;
    }
    return `${o}${i ?? " "}${t.chapterNum}${n ?? ":"}${t.verseNum}`;
}
const qn = (
// Using unicode control characters to be very explicit about which characters we are using.
// The first 6 characters are the control characters \f\n\r\t\v.
// eslint-disable-next-line no-control-regex
/^[\u000C\u000A\u000D\u0009\u000B\u0020\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u200B\u0085]+$/);
function mr(t) {
    return qn.test(t);
}
const Un = /^[\u200d\u2003\u2002\u0020\u00a0\u202f\u2009\u200a\u3000\u200b\u200c\u2060\u200e\u200f]+$/;
function jn(t) {
    return Un.test(t);
}
function Er(t) {
    let e = "", n = !1, i = "\0";
    for (let o = 0; o < t.length; o += 1) {
        const a = t[o];
        a.charCodeAt(0) < 32 ? (n || (e += " "), n = !0) : !n && a === Bn && o + 1 < t.length && mr(t[o + 1]) || (mr(a) ? (n || (e += a), n = !0) : jn(a) && i === a || (e += a, n = !1)), i = a;
    }
    return e;
}
function gr(t) {
    return !t || t.length === 0 ? !0 : t.length === 1 && (t[0] === void 0 || t[0] === "");
}
function Dr(t, e) {
    if (!e || !jt.includes(e.type))
        return !1;
    if (!e.content)
        throw new Error(`Parent ${JSON.stringify(e)} of ${JSON.stringify(t)} does not have a content array! This should not happen!`);
    return t === e.content[e.content.length - 1];
}
function $r(t, e, n, i) {
    if (!t && !n)
        return !0;
    if (!t || !n)
        return !1;
    const o = Me(t), a = Me(n);
    if (o && a) {
        const h = Er(t), p = Er(n);
        if (h !== p) {
            if (!mt(xt(h, -1) ?? "") && !mt(xt(p, -1) ?? "") || !Dr(t, e) || !Dr(n, i))
                return !1;
            let f = h;
            for (; mt(xt(f, -1) ?? "");)
                f = pr(f, 0, -1);
            let m = p;
            for (; mt(xt(m, -1) ?? "");)
                m = pr(m, 0, -1);
            if (f !== m)
                return !1;
        }
    }
    else if (!o && !a) {
        const h = t, p = n, f = Object.keys(h).filter((l) => l !== "content");
        if (f.length !== Object.keys(p).filter((l) => l !== "content").length || f.some((l) => !(l in p) || h[l] !== p[l]))
            return !1;
        const m = gr(h.content), E = gr(p.content);
        if (m !== E)
            return !1;
        if (!m && !E) {
            let l = h.content, v = p.content;
            const O = l[l.length - 1];
            jt.includes(h.type) && Me(O) && mt(O) && (l = l.slice(0, -1));
            const b = v[v.length - 1];
            if (jt.includes(p.type) && Me(b) && mt(b) && (v = v.slice(0, -1)), l.length !== v.length)
                return !1;
            for (let C = 0; C < l.length; C += 1)
                if (!$r(l[C], h, v[C], p))
                    return !1;
        }
    }
    else
        return !1;
    return !0;
}
function vi(t, e) {
    return $r(t, void 0, e, void 0);
}
const Ai = (t) => (...e) => t.map((i) => i(...e)).every((i) => i), Ni = (t) => async (...e) => {
    const n = t.map(async (i) => i(...e));
    return (await Promise.all(n)).every((i) => i);
}, Mt = "chapter", Bt = "verse";
var $n = Object.getOwnPropertyNames, Vn = Object.getOwnPropertySymbols, Gn = Object.prototype.hasOwnProperty;
function vr(t, e) {
    return function (i, o, a) {
        return t(i, o, a) && e(i, o, a);
    };
}
function Rt(t) {
    return function (n, i, o) {
        if (!n || !i || typeof n != "object" || typeof i != "object")
            return t(n, i, o);
        var a = o.cache, h = a.get(n), p = a.get(i);
        if (h && p)
            return h === i && p === n;
        a.set(n, i), a.set(i, n);
        var f = t(n, i, o);
        return a.delete(n), a.delete(i), f;
    };
}
function Ar(t) {
    return $n(t).concat(Vn(t));
}
var zn = Object.hasOwn || function (t, e) {
    return Gn.call(t, e);
};
function at(t, e) {
    return t === e || !t && !e && t !== t && e !== e;
}
var Hn = "__v", Jn = "__o", Xn = "_owner", Nr = Object.getOwnPropertyDescriptor, br = Object.keys;
function Yn(t, e, n) {
    var i = t.length;
    if (e.length !== i)
        return !1;
    for (; i-- > 0;)
        if (!n.equals(t[i], e[i], i, i, t, e, n))
            return !1;
    return !0;
}
function Wn(t, e) {
    return at(t.getTime(), e.getTime());
}
function Kn(t, e) {
    return t.name === e.name && t.message === e.message && t.cause === e.cause && t.stack === e.stack;
}
function Qn(t, e) {
    return t === e;
}
function Cr(t, e, n) {
    var i = t.size;
    if (i !== e.size)
        return !1;
    if (!i)
        return !0;
    for (var o = new Array(i), a = t.entries(), h, p, f = 0; (h = a.next()) && !h.done;) {
        for (var m = e.entries(), E = !1, l = 0; (p = m.next()) && !p.done;) {
            if (o[l]) {
                l++;
                continue;
            }
            var v = h.value, O = p.value;
            if (n.equals(v[0], O[0], f, l, t, e, n) && n.equals(v[1], O[1], v[0], O[0], t, e, n)) {
                E = o[l] = !0;
                break;
            }
            l++;
        }
        if (!E)
            return !1;
        f++;
    }
    return !0;
}
var Zn = at;
function eu(t, e, n) {
    var i = br(t), o = i.length;
    if (br(e).length !== o)
        return !1;
    for (; o-- > 0;)
        if (!Vr(t, e, n, i[o]))
            return !1;
    return !0;
}
function Tt(t, e, n) {
    var i = Ar(t), o = i.length;
    if (Ar(e).length !== o)
        return !1;
    for (var a, h, p; o-- > 0;)
        if (a = i[o], !Vr(t, e, n, a) || (h = Nr(t, a), p = Nr(e, a), (h || p) && (!h || !p || h.configurable !== p.configurable || h.enumerable !== p.enumerable || h.writable !== p.writable)))
            return !1;
    return !0;
}
function tu(t, e) {
    return at(t.valueOf(), e.valueOf());
}
function ru(t, e) {
    return t.source === e.source && t.flags === e.flags;
}
function yr(t, e, n) {
    var i = t.size;
    if (i !== e.size)
        return !1;
    if (!i)
        return !0;
    for (var o = new Array(i), a = t.values(), h, p; (h = a.next()) && !h.done;) {
        for (var f = e.values(), m = !1, E = 0; (p = f.next()) && !p.done;) {
            if (!o[E] && n.equals(h.value, p.value, h.value, p.value, t, e, n)) {
                m = o[E] = !0;
                break;
            }
            E++;
        }
        if (!m)
            return !1;
    }
    return !0;
}
function nu(t, e) {
    var n = t.length;
    if (e.length !== n)
        return !1;
    for (; n-- > 0;)
        if (t[n] !== e[n])
            return !1;
    return !0;
}
function uu(t, e) {
    return t.hostname === e.hostname && t.pathname === e.pathname && t.protocol === e.protocol && t.port === e.port && t.hash === e.hash && t.username === e.username && t.password === e.password;
}
function Vr(t, e, n, i) {
    return (i === Xn || i === Jn || i === Hn) && (t.$$typeof || e.$$typeof) ? !0 : zn(e, i) && n.equals(t[i], e[i], i, i, t, e, n);
}
var iu = "[object Arguments]", ou = "[object Boolean]", au = "[object Date]", su = "[object Error]", cu = "[object Map]", lu = "[object Number]", fu = "[object Object]", pu = "[object RegExp]", hu = "[object Set]", du = "[object String]", mu = "[object URL]", Eu = Array.isArray, Tr = typeof ArrayBuffer == "function" && ArrayBuffer.isView ? ArrayBuffer.isView : null, wr = Object.assign, gu = Object.prototype.toString.call.bind(Object.prototype.toString);
function Du(t) {
    var e = t.areArraysEqual, n = t.areDatesEqual, i = t.areErrorsEqual, o = t.areFunctionsEqual, a = t.areMapsEqual, h = t.areNumbersEqual, p = t.areObjectsEqual, f = t.arePrimitiveWrappersEqual, m = t.areRegExpsEqual, E = t.areSetsEqual, l = t.areTypedArraysEqual, v = t.areUrlsEqual;
    return function (b, C, j) {
        if (b === C)
            return !0;
        if (b == null || C == null)
            return !1;
        var R = typeof b;
        if (R !== typeof C)
            return !1;
        if (R !== "object")
            return R === "number" ? h(b, C, j) : R === "function" ? o(b, C, j) : !1;
        var k = b.constructor;
        if (k !== C.constructor)
            return !1;
        if (k === Object)
            return p(b, C, j);
        if (Eu(b))
            return e(b, C, j);
        if (Tr != null && Tr(b))
            return l(b, C, j);
        if (k === Date)
            return n(b, C, j);
        if (k === RegExp)
            return m(b, C, j);
        if (k === Map)
            return a(b, C, j);
        if (k === Set)
            return E(b, C, j);
        var $ = gu(b);
        return $ === au ? n(b, C, j) : $ === pu ? m(b, C, j) : $ === cu ? a(b, C, j) : $ === hu ? E(b, C, j) : $ === fu ? typeof b.then != "function" && typeof C.then != "function" && p(b, C, j) : $ === mu ? v(b, C, j) : $ === su ? i(b, C, j) : $ === iu ? p(b, C, j) : $ === ou || $ === lu || $ === du ? f(b, C, j) : !1;
    };
}
function vu(t) {
    var e = t.circular, n = t.createCustomConfig, i = t.strict, o = {
        areArraysEqual: i ? Tt : Yn,
        areDatesEqual: Wn,
        areErrorsEqual: Kn,
        areFunctionsEqual: Qn,
        areMapsEqual: i ? vr(Cr, Tt) : Cr,
        areNumbersEqual: Zn,
        areObjectsEqual: i ? Tt : eu,
        arePrimitiveWrappersEqual: tu,
        areRegExpsEqual: ru,
        areSetsEqual: i ? vr(yr, Tt) : yr,
        areTypedArraysEqual: i ? Tt : nu,
        areUrlsEqual: uu
    };
    if (n && (o = wr({}, o, n(o))), e) {
        var a = Rt(o.areArraysEqual), h = Rt(o.areMapsEqual), p = Rt(o.areObjectsEqual), f = Rt(o.areSetsEqual);
        o = wr({}, o, {
            areArraysEqual: a,
            areMapsEqual: h,
            areObjectsEqual: p,
            areSetsEqual: f
        });
    }
    return o;
}
function Au(t) {
    return function (e, n, i, o, a, h, p) {
        return t(e, n, p);
    };
}
function Nu(t) {
    var e = t.circular, n = t.comparator, i = t.createState, o = t.equals, a = t.strict;
    if (i)
        return function (f, m) {
            var E = i(), l = E.cache, v = l === void 0 ? e ? /* @__PURE__ */ new WeakMap() : void 0 : l, O = E.meta;
            return n(f, m, {
                cache: v,
                equals: o,
                meta: O,
                strict: a
            });
        };
    if (e)
        return function (f, m) {
            return n(f, m, {
                cache: /* @__PURE__ */ new WeakMap(),
                equals: o,
                meta: void 0,
                strict: a
            });
        };
    var h = {
        cache: void 0,
        equals: o,
        meta: void 0,
        strict: a
    };
    return function (f, m) {
        return n(f, m, h);
    };
}
var bu = ze();
ze({ strict: !0 });
ze({ circular: !0 });
ze({
    circular: !0,
    strict: !0
});
ze({
    createInternalComparator: function () {
        return at;
    }
});
ze({
    strict: !0,
    createInternalComparator: function () {
        return at;
    }
});
ze({
    circular: !0,
    createInternalComparator: function () {
        return at;
    }
});
ze({
    circular: !0,
    createInternalComparator: function () {
        return at;
    },
    strict: !0
});
function ze(t) {
    t === void 0 && (t = {});
    var e = t.circular, n = e === void 0 ? !1 : e, i = t.createInternalComparator, o = t.createState, a = t.strict, h = a === void 0 ? !1 : a, p = vu(t), f = Du(p), m = i ? i(f) : Au(f);
    return Nu({ circular: n, comparator: f, createState: o, equals: m, strict: h });
}
function Cu(t, e) {
    return bu(t, e);
}
function yu(t, e) {
    if (typeof t != typeof e)
        return !1;
    if (!t && !e)
        return !0;
    if (Array.isArray(t)) {
        const a = e, h = t;
        return a.length === 0 ? !0 : a.every((p) => h.includes(p));
    }
    if (typeof t != "object")
        return Cu(t, e);
    const n = e, i = t;
    let o = !0;
    return Object.keys(n).forEach((a) => {
        o && (Object.hasOwn(i, a) && yu(i[a], n[a]) || (o = !1));
    }), o;
}
function Sr(t, e, n) {
    return JSON.stringify(t, (o, a) => {
        let h = a;
        return e && (h = e(o, h)), h === void 0 && (h = null), h;
    }, n);
}
function Tu(t, e) {
    function n(o) {
        return Object.keys(o).forEach((a) => {
            o[a] === null ? o[a] = void 0 : typeof o[a] == "object" && (o[a] = n(o[a]));
        }), o;
    }
    const i = JSON.parse(t, e);
    if (i !== null)
        return typeof i == "object" ? n(i) : i;
}
function bi(t) {
    try {
        const e = Sr(t);
        return e === Sr(Tu(e));
    }
    catch {
        return !1;
    }
}
const Ci = (t) => t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;");
function yi() {
    return typeof navigator < "u" && navigator.languages ? navigator.languages[0] : new Wr().resolvedOptions().locale;
}
function Ti(t, e = 2) {
    if (t === 0)
        return "0 Bytes";
    const n = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], i = Math.floor(Math.log(t) / Math.log(1024)), o = n[i];
    return `${new un("en", {
        style: "decimal",
        maximumFractionDigits: e,
        minimumFractionDigits: 0
    }).format(t / 1024 ** i)} ${o}`;
}
const wu = 1e3, Gr = 60, zr = Gr * 60, Su = zr * 24;
function wi(t, e, n = /* @__PURE__ */ new Date()) {
    const i = Math.floor((e.getTime() - n.getTime()) / wu), o = Math.round(i / Su);
    if (Math.abs(o) >= 1)
        return t.format(o, "day");
    const a = Math.round(i / zr);
    if (Math.abs(a) >= 1)
        return t.format(a, "hour");
    const h = Math.round(i / Gr);
    return Math.abs(h) >= 1 ? t.format(h, "minute") : t.format(i, "second");
}
const zt = {
    projectSettingsContribution: {
        description: "The data an extension provides to inform Platform.Bible of the project settings it provides",
        anyOf: [
            {
                $ref: "#/$defs/projectSettingsGroup"
            },
            {
                type: "array",
                items: {
                    $ref: "#/$defs/projectSettingsGroup"
                }
            }
        ]
    },
    projectSettingsGroup: {
        description: "Group of related settings definitions",
        type: "object",
        properties: {
            label: {
                description: "localizeKey that displays in the project settings dialog as the group name",
                $ref: "#/$defs/localizeKey"
            },
            description: {
                description: "localizeKey that displays in the project settings dialog to describe the group",
                $ref: "#/$defs/localizeKey"
            },
            properties: {
                $ref: "#/$defs/projectSettingProperties"
            }
        },
        required: ["label", "properties"]
    },
    projectSettingProperties: {
        description: "Object whose keys are setting IDs and whose values are settings objects",
        type: "object",
        patternProperties: {
            "^[\\w\\-]+\\.[\\w\\-]+$": {
                $ref: "#/$defs/projectSetting"
            }
        },
        additionalProperties: !1
    },
    projectSetting: {
        description: "A description of an extension's setting entry",
        anyOf: [
            {
                $ref: "#/$defs/extensionControlledProjectSetting"
            }
        ]
    },
    extensionControlledProjectSetting: {
        description: "Setting definition that is validated by the extension.",
        allOf: [
            {
                $ref: "#/$defs/projectSettingBase"
            },
            {
                $ref: "#/$defs/modifierExtensionControlled"
            }
        ]
    },
    projectSettingBase: {
        description: "Base information needed to describe a project setting entry",
        allOf: [
            {
                $ref: "#/$defs/settingBase"
            },
            {
                $ref: "#/$defs/modifierProject"
            }
        ]
    },
    modifierProject: {
        description: "Modifies setting type to be project setting",
        type: "object",
        properties: {
            includeProjectInterfaces: {
                description: "String representation of `RegExp` pattern(s) to match against projects' `projectInterface`s (using the [`test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) function) to determine if they should be included.\n\nIf this is one string, it will be matched against `projectInterface`s. If this is an array, each entry is handled based on its type (at least one entry must match for this filter condition to pass):\n\n- If the entry is a string, it will be matched against each `projectInterface`. If any match, the project will pass this filter condition\n- If the entry is an array of strings, each will be matched against each `projectInterface`. If every string matches against at least one `projectInterface`, the project will pass this filter condition\n\nIn other words, each entry in the first-level array is `OR`'ed together. Each entry in second-level arrays (arrays within the first-level array) are `AND`'ed together.\n\nDefaults to all {@link ProjectInterfaces}, so all projects that do not match `excludeProjectInterfaces` will be included\n\n@example\n\n```typescript\nincludeProjectInterfaces: ['one', ['two', 'three']];\n```\n\nThis filter condition will succeed on projects whose `projectInterface`s fulfill at least one of the following conditions (At least one entry in the array must match):\n\n- Include `one`\n- Include both `two` and `three`.",
                anyOf: [
                    {
                        type: "null"
                    },
                    {
                        type: "string"
                    },
                    {
                        type: "array",
                        items: {
                            anyOf: [
                                {
                                    type: "string"
                                },
                                {
                                    type: "array",
                                    items: { type: "string" }
                                }
                            ]
                        }
                    }
                ]
            },
            excludeProjectInterfaces: {
                description: "String representation of `RegExp` pattern(s) to match against projects' `projectInterface`s (using the [`test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) function) to determine if they should absolutely not be included even if they match with `includeProjectInterfaces`.\n\nIf this is one string, it will be matched against `projectInterface`s. If this is an array, each entry is handled based on its type (at least one entry must match for this filter condition to exclude the project):\n\n- If the entry is a string, it will be matched against each `projectInterface`. If any match, the project will pass this filter condition and exclude the project\n- If the entry is an array of strings, each will be matched against each `projectInterface`. If every string matches against at least one `projectInterface`, the project will pass this filter condition and exclude the project\n\nIn other words, each entry in the first-level array is `OR`'ed together. Each entry in second-level arrays (arrays within the first-level array) are `AND`'ed together.\n\nDefaults to no {@link ProjectInterfaces}, so all projects that match `includeProjectInterfaces` will be included\n\n@example\n\n```typescript\nexcludeProjectInterfaces: ['one', ['two', 'three']];\n```\n\nThis filter condition will succeed and exclude projects whose `projectInterface`s fulfill at least one of the following conditions (At least one entry in the array must match):\n\n- Include `one`\n- Include both `two` and `three`.",
                anyOf: [
                    {
                        type: "null"
                    },
                    {
                        type: "string"
                    },
                    {
                        type: "array",
                        items: {
                            anyOf: [
                                {
                                    type: "string"
                                },
                                {
                                    type: "array",
                                    items: { type: "string" }
                                }
                            ]
                        }
                    }
                ]
            },
            includePdpFactoryIds: {
                description: "String representation of `RegExp` pattern(s) to match against the Project Data Provider Factory Ids that provided each project's metadata (using the [`test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) function) to determine if the projects should be included.\n\nDefaults to all Project Data Provider Factory Ids, so all projects that do not match `excludePdpFactoryIds` will be included",
                anyOf: [
                    {
                        type: "null"
                    },
                    {
                        type: "string"
                    },
                    {
                        type: "array",
                        items: { type: "string" }
                    }
                ]
            },
            excludePdpFactoryIds: {
                description: "String representation of `RegExp` pattern(s) to match against the Project Data Provider Factory Ids that provided each project's metadata (using the [`test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) function) to determine if the projects should absolutely not be included even if they match with `includeProjectInterfaces`.\n\nDefaults to none, so all projects that match `includePdpFactoryIds` will be included",
                anyOf: [
                    {
                        type: "null"
                    },
                    {
                        type: "string"
                    },
                    {
                        type: "array",
                        items: { type: "string" }
                    }
                ]
            }
        }
    },
    settingsContribution: {
        description: "The data an extension provides to inform Platform.Bible of the settings it provides",
        anyOf: [
            {
                $ref: "#/$defs/settingsGroup"
            },
            {
                type: "array",
                items: {
                    $ref: "#/$defs/settingsGroup"
                }
            }
        ]
    },
    settingsGroup: {
        description: "Group of related settings definitions",
        type: "object",
        properties: {
            label: {
                description: "localizeKey that displays in the settings dialog as the group name",
                $ref: "#/$defs/localizeKey"
            },
            description: {
                description: "localizeKey that displays in the settings dialog to describe the group",
                $ref: "#/$defs/localizeKey"
            },
            properties: {
                $ref: "#/$defs/settingProperties"
            }
        },
        required: ["label", "properties"]
    },
    settingProperties: {
        description: "Object whose keys are setting IDs and whose values are settings objects",
        type: "object",
        patternProperties: {
            "^[\\w-]+\\.[\\w-]+$": {
                $ref: "#/$defs/setting"
            }
        },
        additionalProperties: !1
    },
    setting: {
        description: "A description of an extension's setting entry",
        anyOf: [
            {
                $ref: "#/$defs/extensionControlledSetting"
            }
        ]
    },
    extensionControlledSetting: {
        description: "Setting definition that is validated by the extension.",
        allOf: [
            {
                $ref: "#/$defs/settingBase"
            },
            {
                $ref: "#/$defs/modifierExtensionControlled"
            }
        ]
    },
    settingBase: {
        description: "Base information needed to describe a setting entry",
        allOf: [
            {
                $ref: "#/$defs/stateBase"
            },
            {
                type: "object",
                properties: {
                    label: {
                        description: "localizeKey that displays in the settings dialog as the setting name",
                        $ref: "#/$defs/localizeKey"
                    },
                    description: {
                        description: "localizeKey that displays in the settings dialog to describe the setting",
                        $ref: "#/$defs/localizeKey"
                    }
                },
                required: ["label"]
            }
        ]
    },
    projectStateContribution: {
        description: "The data an extension provides to inform Platform.Bible of the project state it provides",
        $ref: "#/$defs/userStateProperties"
    },
    userStateContribution: {
        description: "The data an extension provides to inform Platform.Bible of the user state it provides",
        $ref: "#/$defs/userStateProperties"
    },
    userStateProperties: {
        description: "Object whose keys are state IDs and whose values are state objects",
        type: "object",
        patternProperties: {
            "^[\\w\\-]+\\.[\\w\\-]+$": {
                $ref: "#/$defs/userState"
            }
        },
        additionalProperties: !1
    },
    userState: {
        description: "A description of an extension's user state entry",
        anyOf: [
            {
                $ref: "#/$defs/extensionControlledState"
            }
        ]
    },
    extensionControlledState: {
        description: "State definition that is validated by the extension.",
        allOf: [
            {
                $ref: "#/$defs/stateBase"
            },
            {
                $ref: "#/$defs/modifierExtensionControlled"
            }
        ]
    },
    modifierExtensionControlled: {
        description: 'Modifies state/setting type to be extension-controlled. "Extension-controlled" means the extension provides the component and the validator for the state/setting, so the state/setting is controlled by the extension.',
        not: {
            anyOf: [
                {
                    type: "object",
                    required: ["platformType"]
                },
                {
                    type: "object",
                    required: ["type"]
                }
            ]
        }
    },
    stateBase: {
        description: "Base information needed to describe a state entry",
        type: "object",
        properties: {
            default: {
                description: "default value for the state/setting",
                type: "any"
            },
            derivesFrom: {
                description: "a state/setting ID whose value to set to this state/setting's starting value the first time this state/setting is loaded",
                $ref: "#/$defs/id"
            }
        },
        required: ["default"]
    },
    localizeKey: {
        description: "Identifier for a string that will be localized based on the user's UI language",
        type: "string",
        pattern: "^%[\\w\\-\\.]+%$",
        tsType: "LocalizeKey"
    },
    id: {
        description: "",
        type: "string",
        pattern: "^[\\w\\-]+\\.[\\w\\-]+$",
        tsType: "Id"
    }
};
function Ht(t) {
    t && Object.values(t).forEach((e) => {
        if (e.type) {
            if ("tsType" in e && delete e.tsType, e.type === "any") {
                delete e.type;
                return;
            }
            e.type === "object" && Ht(e.properties);
        }
    });
}
Ht(zt);
const Ou = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    title: "Project Settings Contribution",
    description: "The data an extension provides to inform Platform.Bible of the project settings it provides",
    anyOf: [
        {
            $ref: "#/$defs/projectSettingsGroup"
        },
        {
            type: "array",
            items: {
                $ref: "#/$defs/projectSettingsGroup"
            }
        }
    ],
    $defs: zt
};
Object.freeze(Ou);
const Iu = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    title: "Settings Contribution",
    description: "The data an extension provides to inform Platform.Bible of the settings it provides",
    anyOf: [
        {
            $ref: "#/$defs/settingsGroup"
        },
        {
            type: "array",
            items: {
                $ref: "#/$defs/settingsGroup"
            }
        }
    ],
    $defs: zt
};
Object.freeze(Iu);
const Hr = {
    languageStrings: {
        description: "Map whose keys are localized string keys and whose values provide information about how to localize strings for the localized string key",
        type: "object",
        patternProperties: {
            "^%[\\w\\-\\.]+%$": {
                $ref: "#/$defs/localizedStringValue"
            }
        },
        additionalProperties: !1
    },
    localizedStringValue: {
        description: "Localized string value associated with this key",
        type: "string"
    },
    stringsMetadata: {
        description: "Map whose keys are localized string keys and whose values provide additional non-locale-specific information about the localized string key",
        type: "object",
        patternProperties: {
            "^%[\\w\\-\\.]+%$": {
                $ref: "#/$defs/stringMetadata"
            }
        },
        additionalProperties: !1
    },
    stringMetadata: {
        description: "Additional non-locale-specific information about a localized string key",
        type: "object",
        properties: {
            fallbackKey: {
                description: "Localized string key from which to get this value if one does not exist in the specified language. If a new key/value pair needs to be made to replace an existing one, this could help smooth over the transition if the meanings are close enough.\nYou can use Paratext 9 Localized String Keys here. Be sure to escape any % signs with a backslash `\\`.",
                type: "string",
                pattern: "^%[\\w\\-\\.;&,' (){}#:/\\\\?%⋮|[\\]“”‘’!~* +=•`…​↑↓]+%$",
                tsType: "LocalizeKey"
            },
            notes: {
                description: "Additional information provided by developers in English to help the translator to know how to translate this localized string accurately",
                type: "string"
            }
        }
    },
    localizeKey: {
        description: "Identifier for a string that will be localized based on the user's UI language",
        type: "string",
        pattern: "^%[\\w\\-\\.]+%$",
        tsType: "LocalizeKey"
    }
};
Ht(Hr);
const xu = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    title: "Localized String Data Contribution",
    description: "The data an extension provides to inform Platform.Bible of the localized strings it provides.",
    type: "object",
    properties: {
        metadata: {
            $ref: "#/$defs/stringsMetadata"
        },
        localizedStrings: {
            type: "object",
            additionalProperties: {
                $ref: "#/$defs/languageStrings"
            }
        }
    },
    $defs: Hr
};
Object.freeze(xu);
const Mu = {
    title: "Platform.Bible menus",
    type: "object",
    properties: {
        mainMenu: {
            description: "Top level menu for the application",
            $ref: "#/$defs/multiColumnMenu"
        },
        defaultWebViewTopMenu: {
            description: "Default top menu for web views that don't specify their own",
            $ref: "#/$defs/multiColumnMenu"
        },
        defaultWebViewContextMenu: {
            description: "Default context menu for web views that don't specify their own",
            $ref: "#/$defs/singleColumnMenu"
        },
        webViewMenus: {
            description: "Menus that apply per web view in the application",
            type: "object",
            patternProperties: {
                "^[\\w\\-]+\\.[\\w\\-]+$": {
                    $ref: "#/$defs/menusForOneWebView"
                }
            },
            additionalProperties: !1
        }
    },
    required: ["mainMenu", "defaultWebViewTopMenu", "defaultWebViewContextMenu", "webViewMenus"],
    additionalProperties: !1,
    $defs: {
        localizeKey: {
            description: "Identifier for a string that will be localized in a menu based on the user's UI language",
            type: "string",
            pattern: "^%[\\w\\-\\.]+%$"
        },
        referencedItem: {
            description: "Name of some UI element (i.e., tab, column, group, menu item) or some PAPI object (i.e., command)",
            type: "string",
            pattern: "^[\\w\\-]+\\.[\\w\\-]+$"
        },
        columnsWithHeaders: {
            description: "Group of columns that can be combined with other columns to form a multi-column menu",
            type: "object",
            patternProperties: {
                "^[\\w\\-]+\\.[\\w\\-]+$": {
                    description: "Single column with a header string",
                    type: "object",
                    properties: {
                        label: {
                            description: "Header text for this this column in the UI",
                            $ref: "#/$defs/localizeKey"
                        },
                        localizeNotes: {
                            description: "Additional information provided by developers to help people who perform localization",
                            type: "string"
                        },
                        order: {
                            description: "Relative order of this column compared to other columns (sorted ascending)",
                            type: "number"
                        },
                        isExtensible: {
                            description: "Defines whether contributions are allowed to add menu groups to this column",
                            type: "boolean"
                        }
                    },
                    required: ["label", "order"],
                    additionalProperties: !1
                }
            },
            properties: {
                isExtensible: {
                    description: "Defines whether contributions are allowed to add columns to this multi-column menu",
                    type: "boolean"
                }
            }
        },
        menuGroups: {
            description: "Group of menu items that can be combined with other groups to form a single menu/submenu. Groups are separated using a line within the menu/submenu.",
            type: "object",
            patternProperties: {
                "^[\\w\\-]+\\.[\\w\\-]+$": {
                    description: "Single group that contains menu items",
                    type: "object",
                    oneOf: [
                        {
                            properties: {
                                column: {
                                    description: "Column where this group belongs, not required for single column menus",
                                    $ref: "#/$defs/referencedItem"
                                },
                                order: {
                                    description: "Relative order of this group compared to other groups in the same column or submenu (sorted ascending)",
                                    type: "number"
                                },
                                isExtensible: {
                                    description: "Defines whether contributions are allowed to add menu items to this menu group",
                                    type: "boolean"
                                }
                            },
                            required: ["order"],
                            additionalProperties: !1
                        },
                        {
                            properties: {
                                menuItem: {
                                    description: "Menu item that anchors the submenu where this group belongs",
                                    $ref: "#/$defs/referencedItem"
                                },
                                order: {
                                    description: "Relative order of this group compared to other groups in the same column or submenu (sorted ascending)",
                                    type: "number"
                                },
                                isExtensible: {
                                    description: "Defines whether contributions are allowed to add menu items to this menu group",
                                    type: "boolean"
                                }
                            },
                            required: ["menuItem", "order"],
                            additionalProperties: !1
                        }
                    ]
                }
            },
            additionalProperties: !1
        },
        menuItem: {
            description: "Single item in a menu that can be clicked on to take an action or can be the parent of a submenu",
            type: "object",
            oneOf: [
                {
                    properties: {
                        id: {
                            description: "ID for this menu item that holds a submenu",
                            $ref: "#/$defs/referencedItem"
                        }
                    },
                    required: ["id"]
                },
                {
                    properties: {
                        command: {
                            description: "Name of the PAPI command to run when this menu item is selected.",
                            $ref: "#/$defs/referencedItem"
                        },
                        iconPathBefore: {
                            description: "Uri path to the icon to display before the menu text. Ex: `papi-extension://helloWorld/assets/icon.png`",
                            type: "string"
                        },
                        iconPathAfter: {
                            description: "Uri path to the icon to display after the menu text. Ex: `papi-extension://helloWorld/assets/icon.png`",
                            type: "string"
                        }
                    },
                    required: ["command"]
                }
            ],
            properties: {
                label: {
                    description: "Key that represents the text of this menu item to display",
                    $ref: "#/$defs/localizeKey"
                },
                tooltip: {
                    description: "Key that represents the text to display if a mouse pointer hovers over the menu item",
                    $ref: "#/$defs/localizeKey"
                },
                searchTerms: {
                    description: "Key that represents additional words the platform should reference when users are searching for menu items",
                    $ref: "#/$defs/localizeKey"
                },
                localizeNotes: {
                    description: "Additional information provided by developers to help people who perform localization",
                    type: "string"
                },
                group: {
                    description: "Group to which this menu item belongs",
                    $ref: "#/$defs/referencedItem"
                },
                order: {
                    description: "Relative order of this menu item compared to other menu items in the same group (sorted ascending)",
                    type: "number"
                }
            },
            required: ["label", "group", "order"],
            unevaluatedProperties: !1
        },
        groupsAndItems: {
            description: "Core schema for a column",
            type: "object",
            properties: {
                groups: {
                    description: "Groups that belong in this menu",
                    $ref: "#/$defs/menuGroups"
                },
                items: {
                    description: "List of menu items that belong in this menu",
                    type: "array",
                    items: { $ref: "#/$defs/menuItem" },
                    uniqueItems: !0
                }
            },
            required: ["groups", "items"]
        },
        singleColumnMenu: {
            description: "Menu that contains a column without a header",
            type: "object",
            allOf: [{ $ref: "#/$defs/groupsAndItems" }],
            unevaluatedProperties: !1
        },
        multiColumnMenu: {
            description: "Menu that can contain multiple columns with headers",
            type: "object",
            allOf: [
                { $ref: "#/$defs/groupsAndItems" },
                {
                    properties: {
                        columns: {
                            description: "Columns that belong in this menu",
                            $ref: "#/$defs/columnsWithHeaders"
                        }
                    },
                    required: ["columns"]
                }
            ],
            unevaluatedProperties: !1
        },
        menusForOneWebView: {
            description: "Set of menus that are associated with a single tab",
            type: "object",
            properties: {
                includeDefaults: {
                    description: "Indicates whether the platform default menus should be included for this webview",
                    type: "boolean"
                },
                topMenu: {
                    description: "Menu that opens when you click on the top left corner of a tab",
                    $ref: "#/$defs/multiColumnMenu"
                },
                contextMenu: {
                    description: "Menu that opens when you right click on the main body/area of a tab",
                    $ref: "#/$defs/singleColumnMenu"
                }
            },
            additionalProperties: !1
        }
    }
};
Object.freeze(Mu);
const je = ["figure", "note", "sidebar", "table"];
Object.freeze(je);
class Ee {
    constructor(e) {
        W(this, "usj");
        W(this, "parentMapInternal");
        this.usj = e;
    }
    // If new variables are created to speed up queries, they should be reset here
    usjChanged() {
        this.parentMapInternal = void 0;
    }
    // #region Directly using the JSONPath package to perform JSONPath query -> USJ node
    findSingleValue(e) {
        const n = (0,jsonpath_plus__WEBPACK_IMPORTED_MODULE_1__.JSONPath)({ path: e, json: this.usj, wrap: !0 });
        if (n === void 0 || n.length === 0)
            return;
        if (!Array.isArray(n[0]))
            return n[0];
        const i = (0,jsonpath_plus__WEBPACK_IMPORTED_MODULE_1__.JSONPath)({ path: e, json: this.usj, wrap: !1 });
        return i.length === 1 && Array.isArray(i[0]) ? i[0] : i;
    }
    findParent(e) {
        return this.findSingleValue(`${e}^`);
    }
    findBookId() {
        return this.findSingleValue('$.content[?(@.type=="book" && @.marker=="id")].code');
    }
    findChapterNode(e) {
        const n = `$..content[?(@.type=="chapter" && @.number=="${e}")]`;
        return this.findSingleValue(n);
    }
    // #endregion
    // #region Parent Maps
    static createParentMapInternal(e, n, i) {
        var o;
        i.set(e, n), e.content && i.set(e.content, e), (o = e.content) == null || o.forEach((a) => {
            typeof a == "object" && Ee.createParentMapInternal(a, e, i);
        });
    }
    /** Viewing a Usj object as a tree, build a map to walk up the tree */
    createUsjParentMap() {
        const e = /* @__PURE__ */ new Map();
        return this.usj.content && e.set(this.usj.content, this.usj), this.usj.content.forEach((n) => {
            typeof n == "object" && Ee.createParentMapInternal(n, this.usj, e);
        }), e;
    }
    /** Create the parent map if it doesn't already exist and return it */
    get parentMap() {
        return this.parentMapInternal ? this.parentMapInternal : (this.parentMapInternal = this.createUsjParentMap(), this.parentMapInternal);
    }
    // #endregion
    // #region Working Stacks
    /** Return the working stack applicable to the given node */
    createWorkingStack(e) {
        const n = [], { parentMap: i } = this;
        let o = e, a = i.get(o);
        for (; a !== void 0;) {
            if (!a.content)
                throw new Error("Invalid parentMap: all parents should have content");
            if (
            // Referencing tempNode and tempParent is OK in the loop since 'let' is used instead of 'var'
            // eslint-disable-next-line no-loop-func
            !a.content.find((h, p) => {
                if (h !== o)
                    return !1;
                if (!a)
                    throw new Error('undefined "tempParent" should not be possible');
                return n.unshift({ parent: a, index: p }), !0;
            }))
                throw new Error(`Unable to find correct parent node of ${JSON.stringify(o)}`);
            if (a.type === Ut)
                break;
            o = a, a = i.get(a);
        }
        return n;
    }
    static convertWorkingStackToJsonPath(e) {
        let n = "$";
        return e.forEach((i) => {
            n = `${n}.content[${i.index}]`;
        }), n;
    }
    convertJsonPathToWorkingStack(e) {
        const n = [], i = e.match(/content\[(\d+)\]/g);
        if (!i)
            throw new Error(`Malformed or unexpected jsonPath: ${e}`);
        let o = this.usj;
        return i.forEach((a, h) => {
            const p = /(\d+)/.exec(a);
            if (!p)
                throw new Error(`Malformed or unexpected jsonPath: ${e}`);
            const f = parseInt(p[0], 10);
            if (n.push({ parent: o, index: f }), h + 1 < i.length) {
                if (typeof o == "string" || !o.content)
                    throw new Error(`jsonPath points to node without children: ${JSON.stringify(o)}`);
                const m = o.content[f];
                if (typeof m == "string")
                    throw new Error(`jsonPath points to node without children: ${JSON.stringify(m)}`);
                o = m;
            }
        }), n;
    }
    // #endregion
    // #region Walk the node tree
    /**
     * Given the starting point of a tree to consider (`node`), find the rightmost MarkerObject from
     * the array of `content`. In the following example, this would be "J".
     *
     *         A        <- Consider "A" to be `node`
     *     / / | \ \
     *     B C D E F    <- Consider these to be MarkerObjects inside the `content` array owned by "A"
     *     |  / \  |
     *     G H   I J    <- Consider these to be MarkerObjects inside their parents `content` arrays
     *
     * If "F" did not exist in this example, then "E" would be returned. If "E" and "F" didn't exist,
     * then "I" would be returned.
     *
     * The general idea here is that we are looking for the MarkerObject in Usj that is immediately
     * adjacent to whatever `node`'s next sibling is in `parent`'s `content` array.
     */
    static findRightMostDescendantMarkerObject(e, n, i = []) {
        if (!e.content)
            return { node: e, parent: n };
        for (let o = e.content.length - 1; o >= 0; o--) {
            const a = e.content[o];
            if (typeof a == "object" && !i.includes(a.type))
                return a.content ? this.findRightMostDescendantMarkerObject(a, e, i) : { node: a, parent: e };
        }
        return { node: e, parent: n };
    }
    static findNextMatchingNodeUsingWorkingStack(e, n, i, o) {
        var h;
        let a = e;
        for (; a !== void 0;) {
            const p = typeof a == "object" && i.includes(a.type);
            if (!p && o(a, n))
                return a;
            if (!p && typeof a == "object" && (((h = a.content) == null ? void 0 : h.length) ?? 0) > 0)
                n.push({ parent: a, index: 0 }), [a] = a.content;
            else
                for (a = void 0; n.length > 0;) {
                    const f = n.pop();
                    if (f && f.index + 1 < f.parent.content.length) {
                        f.index += 1, n.push(f), a = f.parent.content[f.index];
                        break;
                    }
                }
        }
    }
    /**
     * Walk through a USJ node tree depth-first, left-to-right to find the first node that matches
     * criteria specified by `searchFunction` (i.e., the first node where `searchFunction` returns
     * `true`)
     */
    findNextMatchingNode(e, n, i) {
        const o = this.createWorkingStack(e);
        return Ee.findNextMatchingNodeUsingWorkingStack(e, o, n, i);
    }
    // #endregion
    // #region Node -> JSONPath
    nodeToJsonPath(e) {
        return Ee.convertWorkingStackToJsonPath(this.createWorkingStack(e));
    }
    // #endregion
    // #region USJ + node -> SerializedVerseRef + offset
    /** Find the chapter and verse that apply to a given USJ node */
    findVerseRefForNode(e, n, i = {
        chapterNum: void 0,
        verseNum: void 0,
        startingContentNode: void 0
    }) {
        if (i.verseNum !== void 0 && i.chapterNum !== void 0)
            return i;
        if (typeof e == "object" && e.number !== void 0) {
            const f = Number.parseInt(e.number, 10);
            if (e.type === Mt)
                return i.chapterNum = f, i.verseNum = i.verseNum ?? 0, i.startingContentNode = i.startingContentNode ?? e, i;
            e.type === Bt && !i.verseNum && (i.verseNum = f, i.startingContentNode = e);
        }
        if (!n.content)
            throw new Error(`"content" array not found: ${JSON.stringify(n)}`);
        let o = 0;
        for (let f = 0; f < n.content.length; f++)
            if (n.content[f] === e) {
                o = f;
                break;
            }
        let a = o - 1;
        for (; a >= 0 && typeof n.content[a] != "object";)
            a -= 1;
        if (a < 0) {
            if (n.type === Ut)
                return i.chapterNum === void 0 && (i.chapterNum = 1, i.verseNum = 0, i.startingContentNode = void 0), i;
            const f = n, m = this.parentMap.get(f);
            if (!m)
                throw new Error(`No parent found for ${JSON.stringify(n)}`);
            return this.findVerseRefForNode(f, m, i);
        }
        const h = n.content[a], p = Ee.findRightMostDescendantMarkerObject(h, n, je);
        return this.findVerseRefForNode(p.node, p.parent, i);
    }
    nodeToVerseRefAndOffset(e, n, i) {
        if (typeof n == "string" && i === void 0)
            throw new Error('If "node" is a string, then "nodeParent" cannot be undefined');
        let o;
        if (i === void 0 ? o = this.parentMap.get(n) : o = Array.isArray(i) ? this.parentMap.get(i) : i, o === void 0)
            throw new Error(`Cannot find parent for ${JSON.stringify(i)}`);
        const a = this.findVerseRefForNode(n, o);
        if (!a)
            return;
        if (!a.chapterNum)
            throw new Error(`Could not determine chapter number for ${JSON.stringify(n)}`);
        const h = {
            book: e,
            chapterNum: a.chapterNum,
            verseNum: a.verseNum ?? 0
        };
        let p = 0;
        return a.startingContentNode !== void 0 && this.findNextMatchingNode(a.startingContentNode, [], (f, m) => {
            var E, l;
            return f === n ? !0 : m.find((v) => je.includes(v.parent.type)) ? !1 : typeof f == "string" ? (p += f.length, !1) : f.type === Mt && f.number !== ((E = a.chapterNum) == null ? void 0 : E.toString()) || f.type === Bt && f.number !== ((l = a.verseNum) == null ? void 0 : l.toString()) ? (p = 0, !0) : !1;
        }), { verseRef: h, offset: p };
    }
    // #endregion
    // #region JSONPath -> SerializedVerseRef + offset
    jsonPathToVerseRefAndOffset(e, n) {
        const i = n ?? this.findBookId();
        if (!i)
            throw new Error("Not able to determine the book ID");
        const o = this.findSingleValue(e);
        if (!o)
            throw new Error(`No result found for JSONPath query: ${e}`);
        const a = this.findParent(e);
        if (!a)
            throw new Error(`Could not determine parent for ${e}`);
        const h = this.nodeToVerseRefAndOffset(i, o, a);
        if (!h)
            throw new Error(`Could not determine SerializedVerseRef that corresponds to ${e}`);
        return h;
    }
    // #endregion
    // #region SerializedVerseRef + offset -> Node + JSONPath + offset
    verseRefToUsjContentLocation(e, n = 0) {
        if (n < 0)
            throw new Error("offset must be >= 0");
        const i = this.findBookId() ?? e.book;
        if (!i)
            throw new Error("Not able to determine the book ID");
        if (i !== e.book)
            throw new Error(`Book IDs don't match: USJ=${i}, SerializedVerseRef=${e.book}`);
        const o = this.findChapterNode(e.chapterNum);
        if (o === void 0)
            throw new Error(`Could not find ${i} chapter ${e.chapterNum}`);
        let a = !1, h = "";
        const p = e.verse ?? e.verseNum.toString(), f = this.findNextMatchingNode(o, je, (v, O) => v === o ? e.verseNum === 0 ? (h = Ee.convertWorkingStackToJsonPath(O), !0) : !1 : typeof v != "object" ? !1 : v.type === Mt ? (a = !0, !0) : v.type === Bt && v.number !== void 0 && v.number === p ? (h = Ee.convertWorkingStackToJsonPath(O), !0) : !1);
        if (a || f === void 0 || typeof f == "string")
            throw new Error(`Verse ${p} not found in ${i} ${e.chapterNum}`);
        if (n === 0)
            return { node: f, offset: 0, jsonPath: h };
        let m = 0, E = 0, l;
        return this.findNextMatchingNode(f, je, (v, O) => {
            if (v === f)
                return !1;
            if (typeof v == "string") {
                if (m += v.length, m > n)
                    return h = Ee.convertWorkingStackToJsonPath(O), E = n - m + v.length, l = v, !0;
            }
            else if (v.type === Mt || v.type === Bt)
                return !0;
            return !1;
        }), { node: l ?? f, offset: E, jsonPath: h };
    }
    // #endregion
    // #region Search for text from a node + JSONPath + offset
    findNextLocationOfMatchingText(e, n, i = 1e3) {
        let o = "", a = 0, h = 0, p = 0;
        if (Ee.findNextMatchingNodeUsingWorkingStack(e.node, this.convertJsonPathToWorkingStack(e.jsonPath), je, (l) => {
            if (typeof l != "string")
                return !1;
            a += l.length, o = `${o}${l}`;
            const v = o.indexOf(n);
            return v < 0 ? (h += o.length, o.length > n.length && (o = o.substring(o.length - n.length)), h -= o.length, a > i) : (p = h + v, !0);
        }), p <= 0)
            return;
        a = 0;
        let f = 0, m = [];
        const E = Ee.findNextMatchingNodeUsingWorkingStack(e.node, this.convertJsonPathToWorkingStack(e.jsonPath), je, (l, v) => typeof l != "string" || (a += l.length, a < p + 1) ? !1 : (f = p - a + l.length, m = v, !0));
        if (!E)
            throw new Error("Internal error: inconsistent search results");
        return {
            node: E,
            offset: f,
            jsonPath: Ee.convertWorkingStackToJsonPath(m)
        };
    }
    // #endregion
    // #region Extract text from a node + JSONPath + offset
    extractText(e, n) {
        let i = "", o = e.offset, a = 0;
        return Ee.findNextMatchingNodeUsingWorkingStack(e.node, this.convertJsonPathToWorkingStack(e.jsonPath), je, (h) => {
            if (typeof h != "string")
                return !1;
            if (o >= h.length)
                return o -= h.length, !1;
            let p = h;
            if (o > 0 && (p = p.substring(o), o = 0), a + p.length < n)
                return a += p.length, i = `${i}${p}`, !1;
            const f = n - a;
            return i = `${i}${p.substring(0, f - 1)}`, !0;
        }), i;
    }
    extractTextBetweenPoints(e, n, i = 100) {
        let o = "";
        return Ee.findNextMatchingNodeUsingWorkingStack(e.node, this.convertJsonPathToWorkingStack(e.jsonPath), je, (a, h) => a === n.node && (typeof a == "object" || n.jsonPath === Ee.convertWorkingStackToJsonPath(h)) ? !0 : typeof a != "string" ? !1 : (o = `${o}${a}`, o.length > i && (o = o.substring(0, i)), o.length >= i)), o;
    }
    // #endregion
    // #region Edit this USJ data
    static removeContentNodesFromArray(e, n) {
        let i = 0;
        for (let o = e.length - 1; o >= 0; o--) {
            const a = e[o];
            n(a) ? (e.splice(o, 1), i += 1) : typeof a != "string" && a.content && (i += this.removeContentNodesFromArray(a.content, n));
        }
        return i;
    }
    removeContentNodes(e) {
        const n = Ee.removeContentNodesFromArray(this.usj.content, e);
        return this.usjChanged(), n;
    }
}




/***/ }),

/***/ "./release/app/buildInfo.json":
/*!************************************!*\
  !*** ./release/app/buildInfo.json ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"build":"mgetgen-dev.20250408175117.62a38561273dbf67434bdf1ddf3f0849d13f3e76"}');

/***/ }),

/***/ "./release/app/package.json":
/*!**********************************!*\
  !*** ./release/app/package.json ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"platform-bible","version":"0.3.0","description":"Extensible Bible translation software","license":"MIT","author":{"name":"Platform","url":"https://github.com/paranext/"},"main":"./dist/main/main.js","scripts":{"rebuild":"node -r ts-node/register ../../.erb/scripts/electron-rebuild.js","postinstall":"npm run rebuild && npm run link-modules","link-modules":"node -r ts-node/register ../../.erb/scripts/link-modules.ts"},"dependencies":{},"volta":{"extends":"../../package.json"}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.dev.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			"main": 1
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 		
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__(__webpack_require__.s = "./src/main/main.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,