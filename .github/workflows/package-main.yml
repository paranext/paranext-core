name: Package

# Make sure these match with the matrix.os values below
env:
  OS_WINDOWS: windows-latest
  OS_MACOS: macos-latest
  # The Ubuntu version must align with the "core" version in electron-builder.json5
  OS_LINUX: ubuntu-22.04

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  publish:
    name: Main on ${{ matrix.os }}, .Net ${{ matrix.dotnet_version }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # Make sure these match with the env values above
        os: [windows-latest, macos-latest, ubuntu-22.04]
        dotnet_version: [8.0.x]

    steps:
      - name: Install MacPorts
        if: ${{ matrix.os == env.OS_MACOS }}
        uses: melusina-org/setup-macports@v1

      - name: Update MacPorts ports tree
        if: ${{ matrix.os == 'macos-latest' }}
        # Not using `-v` for verbose because it is very slow and does not add much value
        run: |
          sudo port sync

      - name: Install loader tools on macOS
        if: ${{ matrix.os == env.OS_MACOS }}
        run: |
          sudo port -v install ld64

      - name: Install icu4c on macOS
        if: ${{ matrix.os == env.OS_MACOS }}
        run: |
          sudo port -v install icu @76.1_0 +universal

      - name: Fixup loader paths for icu4c
        if: ${{ matrix.os == env.OS_MACOS }}
        # LIB_DEPENDENCIES are of the form "<ICU lib short name> <dependency as ICU lib short name>"
        # For example, libicuuc (shortened to "uc") depends on libicudata (shortened to "data")
        # Dependencies can be seen by running "dyld_info -dependents /path/to/something.dylib"
        run: |
          ICU_VERSION=76
          LIB_DEPENDENCIES="
          i18n data
          i18n uc
          io data
          io i18n
          io uc
          uc data
          "
          LIB_DEPENDENCIES=$(echo "$LIB_DEPENDENCIES" | sed '/^$/d')
          while IFS= read -r line; do
            set -- $line
            sudo install_name_tool -change "/opt/local/lib/libicu$2.$ICU_VERSION.dylib" "@loader_path/libicu$2.$ICU_VERSION.dylib" "/opt/local/lib/libicu$1.$ICU_VERSION.dylib"
          done <<< "$LIB_DEPENDENCIES"

      - name: Install snap tools on Linux
        if: ${{ matrix.os == env.OS_LINUX }}
        run: |
          sudo apt update
          sudo apt install -y snapd
          sudo snap install snapcraft --classic
          sudo snap install lxd
          sudo snap refresh lxd
          sudo lxd init --auto
          # Add the current user to the lxd group
          getent group lxd | grep -qwF "$USER" || sudo usermod -aG lxd "$USER"
          newgrp lxd
          # Force the socket to be usable by the current user
          sudo chmod 666 /var/snap/lxd/common/lxd/unix.socket
          # https://github.com/canonical/action-build/blob/master/src/tools.ts#L54
          sudo iptables -P FORWARD ACCEPT

      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet_version }}

      - name: Read package.json
        id: package_json
        uses: zoexx/github-action-json-file-properties@1.0.6
        with:
          file_path: 'package.json'

      - name: Install Node and NPM
        uses: actions/setup-node@v4
        with:
          node-version: ${{ fromJson(steps.package_json.outputs.volta).node }}
          cache: npm

      - name: Install packages and build
        run: |
          npm ci
          npm run build

      - name: Update release version
        shell: bash
        run: |
          COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          cd ./release/app
          CURRENT_VERSION=$(node -pe "require('./package.json').version")
          NEW_VERSION="${CURRENT_VERSION}-commit.${COMMIT_HASH}"
          echo "Updating version from ${CURRENT_VERSION} to ${NEW_VERSION}"
          npm --no-git-tag-version version $NEW_VERSION

      - name: Publish releases - Windows
        if: ${{ matrix.os == env.OS_WINDOWS }}
        run: |
          npm exec electron-builder -- build --publish never --win

      - name: Publish releases - macOS
        if: ${{ matrix.os == env.OS_MACOS }}
        # env:
        #   # These values are used for auto updates signing
        #   APPLE_ID: ${{ secrets.APPLE_ID }}
        #   APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
        #   CSC_LINK: ${{ secrets.CSC_LINK }}
        #   CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          npm exec electron-builder -- build --publish never --mac

      - name: Publish releases - Linux
        if: ${{ matrix.os == env.OS_LINUX }}
        env:
          # no hardlinks so dependencies are copied
          USE_HARD_LINKS: false
        run: |
          npm exec electron-builder -- build --publish never --linux

      - name: Upload Windows artifacts
        if: ${{ matrix.os == env.OS_WINDOWS }}
        uses: actions/upload-artifact@v4
        with:
          name: app-windows
          path: |
            ./release/build/*.exe
            !./release/build/*Setup*.exe

      - name: Upload macOS artifacts
        if: ${{ matrix.os == env.OS_MACOS }}
        uses: actions/upload-artifact@v4
        with:
          name: app-macos
          path: |
            ./release/build/*.dmg

      - name: Upload Linux artifacts
        if: ${{ matrix.os == env.OS_LINUX }}
        uses: actions/upload-artifact@v4
        with:
          name: app-linux
          path: |
            ./release/build/*.snap

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
