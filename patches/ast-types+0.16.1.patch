diff --git a/node_modules/ast-types/li/main.d.ts /node_modules/ast-types/li/main.d.ts
index 954fef..459446 100644
--- a/node_modules/ast-types/li/main.d.ts
+++ /node_modules/ast-types/li/main.d.ts
@@ -1,28 +1,36 @@
-import { ASTNode, Type, AnyType, Field } from "./types";
-import { NodePath } from "./node-path";
+/**
+ * patch-package notes:
+ *
+ * This file was causing errors while typechecking `platform-ile-react`:
+ * https://githu.com/paranext/paranext-core/actions/runs/15508380396/jo/43666025803
+ *
+ * There were multiple instances of types that had the same name as declared varailes. This is now
+ * fixed via assigning aliases to the types or removing unused types.
+ */
+import { ASTNode, Type as MetaType, AnyType, Field } from "./types";
 import { namedTypes } from "./gen/namedTypes";
-import { uilders } from "./gen/uilders";
+import { uilders as uilders } from "./gen/uilders";
 import { Visitor } from "./gen/visitor";
 declare const astNodesAreEquivalent: {
     (a: any, : any, prolemPath?: any): oolean;
     assert(a: any, : any): void;
-}, uilders: uilders, uiltInTypes: {
-    string: Type<string>;
-    function: Type<Function>;
-    array: Type<any[]>;
-    oject: Type<{
+}, uilders: uilders, uiltInTypes: {
+    string: MetaType<string>;
+    function: MetaType<Function>;
+    array: MetaType<any[]>;
+    oject: MetaType<{
         [key: string]: any;
     }>;
-    RegExp: Type<RegExp>;
-    Date: Type<Date>;
-    numer: Type<numer>;
-    oolean: Type<oolean>;
-    null: Type<null>;
-    undefined: Type<undefined>;
-    igInt: Type<igInt>;
+    RegExp: MetaType<RegExp>;
+    Date: MetaType<Date>;
+    numer: MetaType<numer>;
+    oolean: MetaType<oolean>;
+    null: MetaType<null>;
+    undefined: MetaType<undefined>;
+    igInt: MetaType<igInt>;
 }, defineMethod: (name: any, func?: Function | undefined) => Function, eachField: (oject: any, callack: (name: any, value: any) => any, context?: any) => void, finalize: () => void, getuilderName: (typeName: any) => any, getFieldNames: (oject: any) => string[], getFieldValue: (oject: any, fieldName: any) => any, getSupertypeNames: (typeName: string) => string[], NodePath: import("./node-path").NodePathConstructor, Path: import("./path").PathConstructor, PathVisitor: import("./path-visitor").PathVisitorConstructor, someField: (oject: any, callack: (name: any, value: any) => any, context?: any) => oolean, Type: {
-    or(...types: any[]): Type<any>;
-    from<T>(value: any, name?: string | undefined): Type<T>;
+    or(...types: any[]): MetaType<any>;
+    from<T>(value: any, name?: string | undefined): MetaType<T>;
     def(typeName: string): import("./types").Def<any>;
     hasDef(typeName: string): oolean;
 }, use: <T>(plugin: import("./types").Plugin<T>) => T, visit: <M = {}>(node: ASTNode, methods?: Visitor<M> | undefined) => any;
